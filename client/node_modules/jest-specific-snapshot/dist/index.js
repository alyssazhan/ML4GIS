"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toMatchSpecificSnapshot = toMatchSpecificSnapshot;
Object.defineProperty(exports, "addSerializer", {
  enumerable: true,
  get: function get() {
    return _jestSnapshot.addSerializer;
  }
});

var _path = _interopRequireDefault(require("path"));

var _jestSnapshot = require("jest-snapshot");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint no-underscore-dangle: ["error", { "allow": ["_updateSnapshot"] }] */
var snapshotsStateMap = new Map();
var commonSnapshotState;

function getAbsolutePathToSnapshot(testPath, snapshotFile) {
  return _path.default.isAbsolute(snapshotFile) ? snapshotFile : _path.default.resolve(_path.default.dirname(testPath), snapshotFile);
}

afterAll(function () {
  snapshotsStateMap.forEach(function (snapshotState) {
    var uncheckedCount = snapshotState.getUncheckedCount();

    if (uncheckedCount) {
      snapshotState.removeUncheckedKeys();
    }

    snapshotState.save();

    if (commonSnapshotState) {
      // Update common state so we get the report right with added/update/unmatched snapshots.
      // Jest will display the "u" & "i" suggestion, plus displaying the right number of update/added/unmatched snapshots.
      commonSnapshotState.unmatched += snapshotState.unmatched;
      commonSnapshotState.matched += snapshotState.matched;
      commonSnapshotState.updated += snapshotState.updated;
      commonSnapshotState.added += snapshotState.added;
    }
  });
});

function toMatchSpecificSnapshot(received, snapshotFile, testName) {
  var absoluteSnapshotFile = getAbsolutePathToSnapshot(this.testPath, snapshotFile); // store the common state to re-use it in "afterAll" hook.

  commonSnapshotState = this.snapshotState;
  var snapshotState = snapshotsStateMap.get(absoluteSnapshotFile);

  if (!snapshotState) {
    snapshotState = new _jestSnapshot.SnapshotState(absoluteSnapshotFile, {
      updateSnapshot: commonSnapshotState._updateSnapshot,
      snapshotPath: absoluteSnapshotFile
    });
    snapshotsStateMap.set(absoluteSnapshotFile, snapshotState);
  }

  var newThis = Object.assign({}, this, {
    snapshotState: snapshotState
  });

  var patchedToMatchSnapshot = _jestSnapshot.toMatchSnapshot.bind(newThis);

  return patchedToMatchSnapshot(received, testName);
}

expect.extend({
  toMatchSpecificSnapshot: toMatchSpecificSnapshot
});