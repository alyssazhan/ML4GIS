"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Survey;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _SurveyQuestion = require("../SurveyQuestion");

var _SurveyQuestion2 = _interopRequireDefault(_SurveyQuestion);

var _Button = require("@material-ui/core/Button");

var _Button2 = _interopRequireDefault(_Button);

var _KeyboardArrowLeft = require("@material-ui/icons/KeyboardArrowLeft");

var _KeyboardArrowLeft2 = _interopRequireDefault(_KeyboardArrowLeft);

var _KeyboardArrowRight = require("@material-ui/icons/KeyboardArrowRight");

var _KeyboardArrowRight2 = _interopRequireDefault(_KeyboardArrowRight);

var _Check = require("@material-ui/icons/Check");

var _Check2 = _interopRequireDefault(_Check);

var _styledComponents = require("styled-components");

var _styledComponents2 = _interopRequireDefault(_styledComponents);

var _surveyjsExpressionEval = require("surveyjs-expression-eval");

var _surveyjsExpressionEval2 = _interopRequireDefault(_surveyjsExpressionEval);

var _validators = require("../../hooks/use-question-answer/validators.js");

var _validators2 = _interopRequireDefault(_validators);

var _QuestionContext = require("../QuestionContext");

var _QuestionContext2 = _interopRequireDefault(_QuestionContext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const scrollToElement = idOrElm => {
  const elm = typeof idOrElm === "string" ? document.getElementById(idOrElm) : idOrElm;

  if (elm) {
    elm.scrollIntoView({
      block: "start",
      behavior: "smooth"
    });
  }
};

const SurveyActions = _styledComponents2.default.div`
  display: flex;
  justify-content: ${({
  onlyOnePage
}) => !onlyOnePage ? "space-between" : "space-around"};
`;

function Survey({
  form,
  onFileUpload,
  noActions,
  completeText,
  variant = "paper",
  onFinish = () => null,
  autocompleteRequest,
  onQuestionChange = () => null,
  defaultAnswers = {}
}) {
  const [currentPage, setCurrentPage] = (0, _react.useState)(0);
  const [answerMap, setAnswerMap] = (0, _react.useState)(defaultAnswers);
  const [failingQuestions, changeFailingQuestions] = (0, _react.useState)([]);
  const surveyDiv = (0, _react.useRef)(null);
  const questions = form.questions || form.pages[currentPage].elements;
  const visibleQuestions = questions.filter(q => q.visibleIf === undefined ? true : (0, _surveyjsExpressionEval2.default)(q.visibleIf, answerMap));
  let firstPage, lastPage;

  if (form.questions) {
    // single page survey
    firstPage = true;
    lastPage = true;
  } else {
    firstPage = currentPage === 0;
    lastPage = currentPage === form.pages.length - 1;
  }

  const onlyOnePage = firstPage && lastPage;

  const validatePage = () => {
    const fqs = [];

    for (const question of visibleQuestions) {
      if (question.isRequired && answerMap[question.name] === undefined) {
        fqs.push({
          question,
          text: "This question is required!"
        });
        continue;
      }

      if (answerMap[question.name] !== undefined) {
        const failingValidator = (question.validators || []).find(v => !(0, _validators2.default)(v, answerMap[question.name], answerMap));

        if (failingValidator) {
          fqs.push({
            question,
            text: failingValidator.text
          });
          continue;
        }
      }
    }

    changeFailingQuestions(fqs);

    if (fqs.length > 0) {
      return fqs[0];
    } else {
      return {};
    }
  }; // TODO complex survey validator logic


  const pageComplete = true;
  return _react2.default.createElement("div", {
    ref: surveyDiv
  }, visibleQuestions.map(q => _react2.default.createElement(_QuestionContext2.default.Provider, {
    key: q.name,
    value: {
      error: (failingQuestions.find(fq => fq.question.name === q.name) || {}).text,
      containerStyleType: variant
    }
  }, _react2.default.createElement(_SurveyQuestion2.default, {
    question: { ...q,
      defaultAnswer: defaultAnswers[q.name]
    },
    onFileUpload: onFileUpload,
    onChangeAnswer: newAnswer => {
      const newAnswerMap = { ...answerMap,
        [q.name]: newAnswer
      };
      setAnswerMap(newAnswerMap);
      onQuestionChange(q.name, newAnswer, newAnswerMap);
    },
    autocompleteRequest: autocompleteRequest
  }))), !noActions && _react2.default.createElement(SurveyActions, {
    onlyOnePage: onlyOnePage
  }, !onlyOnePage && _react2.default.createElement(_Button2.default, {
    disabled: firstPage,
    onClick: () => setCurrentPage(currentPage - 1)
  }, _react2.default.createElement(_KeyboardArrowLeft2.default, null), "Prev"), _react2.default.createElement(_Button2.default, {
    onClick: () => {
      const {
        question: failingQuestion,
        text
      } = validatePage();

      if (failingQuestion) {
        scrollToElement(failingQuestion.name);
      } else {
        onFinish(answerMap);
      }
    },
    disabled: !lastPage || !pageComplete
  }, completeText ? completeText : _react2.default.createElement(_react2.default.Fragment, null, _react2.default.createElement(_Check2.default, {
    style: {
      marginRight: 4
    }
  }), "Complete")), !onlyOnePage && _react2.default.createElement(_Button2.default, {
    onClick: () => {
      const {
        question: failingQuestion,
        text
      } = validatePage();

      if (failingQuestion) {
        scrollToElement(failingQuestion.name);
      } else {
        scrollToElement(surveyDiv.current);
        setCurrentPage(currentPage + 1);
      }
    },
    disabled: !pageComplete || lastPage
  }, "Next", _react2.default.createElement(_KeyboardArrowRight2.default, null))));
}