"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _kChoiceSort = require("k-choice-sort");

var _kChoiceSort2 = _interopRequireDefault(_kChoiceSort);

var _QuestionContainer = require("../QuestionContainer");

var _QuestionContainer2 = _interopRequireDefault(_QuestionContainer);

var _Button = require("@material-ui/core/Button");

var _Button2 = _interopRequireDefault(_Button);

var _styledComponents = require("styled-components");

var _styledComponents2 = _interopRequireDefault(_styledComponents);

var _ArrowRight = require("@material-ui/icons/ArrowRight");

var _ArrowRight2 = _interopRequireDefault(_ArrowRight);

var _Refresh = require("@material-ui/icons/Refresh");

var _Refresh2 = _interopRequireDefault(_Refresh);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ChoiceButton = (0, _styledComponents2.default)(_Button2.default)`
  && {
    width: 100%;
    justify-content: flex-start;
    text-transform: none;
  }
`;
const RetryButton = (0, _styledComponents2.default)(_Button2.default)`
  && {
    width: 100%;
    text-transform: none;
    font-size: 24px;
  }
`;
const AnimatedChoiceContainer = _styledComponents2.default.div`
  transition: 300ms transform, 300ms opacity;
`;

exports.default = ({
  question,
  onChangeAnswer
}) => {
  const [answer, changeAnswer] = (0, _react.useState)(question.defaultAnswer || undefined);
  const {
    trials: maxTrialCount,
    choices: choicesRaw,
    choicesAtOnce
  } = question;
  const choices = choicesRaw.map(c => typeof c === "string" ? {
    value: c,
    text: c
  } : c);
  const [sorter, changeSorter] = (0, _react.useState)(new _kChoiceSort2.default({
    items: choices.map(c => c.value),
    maxCandidates: choicesAtOnce
  }));
  const [candidates, changeCandidates] = (0, _react.useState)(sorter.getCandidates());
  const [trialCount, changeTrialCount] = (0, _react.useState)(0);
  const [animateDirection, changeAnimateDirection] = (0, _react.useState)("middle");
  const [done, changeDone] = (0, _react.useState)(false);
  return _react2.default.createElement(_QuestionContainer2.default, {
    question: question,
    answered: answer,
    fadedTitle: `(${trialCount}/${maxTrialCount})`
  }, !done ? _react2.default.createElement(AnimatedChoiceContainer, {
    style: {
      transform: `translateX(${animateDirection === "left" ? "-300px" : animateDirection === "right" ? "1200px" : "0px"})`,
      opacity: animateDirection === "middle" ? 1 : 0
    }
  }, candidates.map(cand => {
    const choice = choices.find(c => c.value === cand);
    return _react2.default.createElement(ChoiceButton, {
      disabled: animateDirection !== "middle",
      onClick: () => {
        changeAnimateDirection("left");
        changeTrialCount(trialCount + 1);
        sorter.recordAnswer(cand, candidates.filter(c => c !== cand));
        setTimeout(() => {
          changeCandidates(sorter.getCandidates());

          if (sorter.isSorted() || trialCount + 1 >= maxTrialCount) {
            changeDone(true);
            changeAnswer(sorter.getRankings());
            onChangeAnswer(sorter.getRankings());
          } else {
            changeAnimateDirection("middle");
          }
        }, 300);
      }
    }, _react2.default.createElement(_ArrowRight2.default, null), choice.text);
  })) : _react2.default.createElement(RetryButton, {
    onClick: () => {
      changeDone(false);
      changeTrialCount(0);
      const newSorter = new _kChoiceSort2.default({
        items: choices.map(c => c.value),
        maxCandidates: choicesAtOnce
      });
      changeSorter(newSorter);
      changeCandidates(newSorter.getCandidates());
      changeAnimateDirection("middle");
    }
  }, _react2.default.createElement(_Refresh2.default, {
    style: {
      width: 64,
      height: 64,
      marginRight: 8
    }
  }), "Redo"));
};