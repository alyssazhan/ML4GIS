"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _Chip = require("@material-ui/core/Chip");

var _Chip2 = _interopRequireDefault(_Chip);

var _Checkbox = require("@material-ui/core/Checkbox");

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _QuestionText = require("../QuestionText");

var _QuestionText2 = _interopRequireDefault(_QuestionText);

var _ListItemText = require("@material-ui/core/ListItemText");

var _ListItemText2 = _interopRequireDefault(_ListItemText);

var _Select = require("@material-ui/core/Select");

var _Select2 = _interopRequireDefault(_Select);

var _reactSelect = require("react-select");

var _reactSelect2 = _interopRequireDefault(_reactSelect);

var _MenuItem = require("@material-ui/core/MenuItem");

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _styledComponents = require("styled-components");

var _styledComponents2 = _interopRequireDefault(_styledComponents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SelectedValueContainer = _styledComponents2.default.div`
  padding: 4px;
  padding-left: 8px;
`;

exports.default = ({
  choices,
  answer,
  multiple,
  changeAnswer
}) => {
  const choiceList = choices.map(choice => typeof choice === "string" ? {
    value: choice,
    text: choice
  } : choice);
  const choiceMap = choiceList.reduce((acc, choice) => (acc[choice.value] = choice.text, acc), {});

  if (choiceList.length > 10) {
    const currentChoice = choiceList.find(c => c.value === answer);
    const reactSelectChoice = currentChoice ? {
      value: currentChoice.value,
      label: currentChoice.text
    } : null;
    return _react2.default.createElement(_reactSelect2.default, {
      placeholder: answer,
      value: reactSelectChoice,
      className: "material-survey-selection",
      styles: {
        menu: provided => ({ ...provided,
          fontFamily: "Roboto, sans-serif"
        }),
        menuPortal: provided => ({ ...provided,
          zIndex: 10000
        }),
        container: provided => ({ ...provided,
          fontFamily: "Roboto, sans-serif"
        })
      },
      isMulti: multiple,
      menuPortalTarget: document.body,
      options: choiceList.map(c => ({
        value: c.value,
        label: c.text
      })),
      onChange: ({
        value
      }) => changeAnswer(value)
    });
  } else {
    return _react2.default.createElement(_Select2.default, {
      multiple: multiple,
      value: answer || null,
      style: {
        display: "flex"
      },
      onChange: e => changeAnswer(e.target.value),
      renderValue: !multiple ? selected => _react2.default.createElement(SelectedValueContainer, {
        style: {
          padding: 10
        }
      }, choiceMap[answer]) : selected => _react2.default.createElement(SelectedValueContainer, null, selected.map(value => _react2.default.createElement(_Chip2.default, {
        style: {
          marginRight: 8
        },
        key: value,
        label: choiceMap[value]
      })))
    }, choiceList.map(choice => _react2.default.createElement(_MenuItem2.default, {
      key: choice.value,
      value: choice.value
    }, multiple && _react2.default.createElement(_Checkbox2.default, {
      checked: answer.includes(choice.value)
    }), choice.text)));
  }
};