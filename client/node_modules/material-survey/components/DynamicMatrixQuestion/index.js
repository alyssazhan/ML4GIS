"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DynamicMatrixQuestion;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _Radio = require("@material-ui/core/Radio");

var _Radio2 = _interopRequireDefault(_Radio);

var _Button = require("@material-ui/core/Button");

var _Button2 = _interopRequireDefault(_Button);

var _QuestionContainer = require("../QuestionContainer");

var _QuestionContainer2 = _interopRequireDefault(_QuestionContainer);

var _styledComponents = require("styled-components");

var _styledComponents2 = _interopRequireDefault(_styledComponents);

var _QuestionText = require("../QuestionText");

var _QuestionText2 = _interopRequireDefault(_QuestionText);

var _useQuestionAnswer = require("../../hooks/use-question-answer");

var _useQuestionAnswer2 = _interopRequireDefault(_useQuestionAnswer);

var _Dropdown = require("../DropdownQuestion/Dropdown");

var _Dropdown2 = _interopRequireDefault(_Dropdown);

var _Checkbox = require("@material-ui/core/Checkbox");

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _Delete = require("@material-ui/icons/Delete");

var _Delete2 = _interopRequireDefault(_Delete);

var _TextField = require("@material-ui/core/TextField");

var _TextField2 = _interopRequireDefault(_TextField);

var _AsyncDropdown = require("../AsyncDropdown");

var _AsyncDropdown2 = _interopRequireDefault(_AsyncDropdown);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Row = _styledComponents2.default.div`
  display: flex;
  align-items: flex-end;
  margin-bottom: 10px;
`;
const Col = _styledComponents2.default.div`
  && {
    font-family: Roboto, sans-serif;
    flex: 1;
    flex-wrap: wrap;
    justify-content: center;
  }
`;
const HeaderCol = (0, _styledComponents2.default)(Col)`
  font-weight: bold;
  padding-right: 10px;
`;
const LastCol = (0, _styledComponents2.default)(Col)`
  && {
    margin-left: 4px;
    width: 100px;
    flex: 0;
  }
`;
const CheckboxButton = (0, _styledComponents2.default)(_Button2.default)`
  && {
    align-items: center;
    padding-left: 12px;
    padding-right: 12px;
    margin-left: 2px;
    margin-right: 2px;
  }
  .checkbox {
    padding-left: 0;
    padding-top: 4px;
    padding-bottom: 4px;
  }
  .text {
    text-transform: none;
  }
`;

function DynamicMatrixQuestion({
  question,
  autocompleteRequest,
  onChangeAnswer,
  defaultAnswer = []
}) {
  const [{
    answer,
    error
  }, changeAnswer] = (0, _useQuestionAnswer2.default)(question, onChangeAnswer, defaultAnswer);
  const answerWithBlank = answer.concat([{}]);
  return _react2.default.createElement(_QuestionContainer2.default, {
    question: question,
    answered: answer.length > 0
  }, _react2.default.createElement(Row, null, question.columns.map(({
    title,
    name
  }) => _react2.default.createElement(HeaderCol, {
    style: {
      fontSize: question.columns.length > 3 ? 12 : undefined
    },
    key: name
  }, title || name)), _react2.default.createElement(LastCol, null, _react2.default.createElement(_Button2.default, {
    tabIndex: -1,
    style: {
      opacity: 0
    },
    disabled: true
  }, _react2.default.createElement(_Delete2.default, null)))), answerWithBlank.map((a, i) => _react2.default.createElement(Row, {
    key: i
  }, question.columns.map(({
    name,
    cellType,
    choices = question.choices,
    requestUrl
  }) => {
    const changeRowAnswer = newAnswer => {
      changeAnswer([...answer.slice(0, i), { ...a,
        [name]: newAnswer
      }, ...answer.slice(i + 1)]);
    };

    const rowAnswer = answerWithBlank[i][name];
    return _react2.default.createElement(Col, {
      key: name
    }, cellType === "dropdown" ? _react2.default.createElement("div", {
      style: {
        paddingRight: 4
      }
    }, _react2.default.createElement(_Dropdown2.default, {
      answer: answerWithBlank[i][name],
      choices: choices,
      changeAnswer: newAnswer => changeRowAnswer(newAnswer)
    })) : cellType === "autocomplete" ? _react2.default.createElement("div", {
      style: {
        paddingRight: 4
      }
    }, _react2.default.createElement(_AsyncDropdown2.default, {
      key: rowAnswer,
      answer: rowAnswer,
      requestUrl: requestUrl,
      autocompleteRequest: autocompleteRequest,
      onChange: changeRowAnswer
    })) : cellType === "checkbox" ? _react2.default.createElement("div", null, choices.map((choiceRaw, choiceIndex) => {
      const choice = typeof choiceRaw === "string" ? {
        value: choiceRaw,
        text: choiceRaw
      } : choiceRaw;
      return _react2.default.createElement(CheckboxButton, {
        key: choiceIndex,
        onClick: () => changeRowAnswer((rowAnswer || []).includes(choice.value) ? rowAnswer.filter(r => r !== choice.value) : (rowAnswer || []).concat([choice.value]))
      }, _react2.default.createElement(_Checkbox2.default, {
        tabIndex: -1,
        className: "checkbox",
        checked: (rowAnswer || []).includes(choice.value)
      }), _react2.default.createElement("div", {
        className: "text"
      }, choice.text));
    })) : cellType === "text" ? _react2.default.createElement("div", {
      style: {
        paddingRight: 4
      }
    }, _react2.default.createElement(_TextField2.default, {
      value: rowAnswer || "",
      onChange: e => changeRowAnswer(e.target.value)
    })) : `Unknown Cell Type "${cellType}"`);
  }), _react2.default.createElement(LastCol, null, _react2.default.createElement(_Button2.default, {
    tabIndex: -1,
    style: {
      alignSelf: "center"
    },
    disabled: i === answerWithBlank.length - 1,
    onClick: () => changeAnswer([...answer.slice(0, i), ...answer.slice(i + 1)])
  }, _react2.default.createElement(_Delete2.default, null))))));
}