"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _SliderQuestion = require("../SliderQuestion");

var _SliderQuestion2 = _interopRequireDefault(_SliderQuestion);

var _RadiogroupQuestion = require("../RadiogroupQuestion");

var _RadiogroupQuestion2 = _interopRequireDefault(_RadiogroupQuestion);

var _RatingQuestion = require("../RatingQuestion");

var _RatingQuestion2 = _interopRequireDefault(_RatingQuestion);

var _DropdownQuestion = require("../DropdownQuestion");

var _DropdownQuestion2 = _interopRequireDefault(_DropdownQuestion);

var _ChoiceRankerQuestion = require("../ChoiceRankerQuestion");

var _ChoiceRankerQuestion2 = _interopRequireDefault(_ChoiceRankerQuestion);

var _BooleanQuestion = require("../BooleanQuestion");

var _BooleanQuestion2 = _interopRequireDefault(_BooleanQuestion);

var _TextQuestion = require("../TextQuestion");

var _TextQuestion2 = _interopRequireDefault(_TextQuestion);

var _MultiTextQuestion = require("../MultiTextQuestion");

var _MultiTextQuestion2 = _interopRequireDefault(_MultiTextQuestion);

var _USRegionQuestion = require("../USRegionQuestion");

var _USRegionQuestion2 = _interopRequireDefault(_USRegionQuestion);

var _CheckboxQuestion = require("../CheckboxQuestion");

var _CheckboxQuestion2 = _interopRequireDefault(_CheckboxQuestion);

var _APIAutocompleteQuestion = require("../APIAutocompleteQuestion");

var _APIAutocompleteQuestion2 = _interopRequireDefault(_APIAutocompleteQuestion);

var _DynamicMatrixQuestion = require("../DynamicMatrixQuestion");

var _DynamicMatrixQuestion2 = _interopRequireDefault(_DynamicMatrixQuestion);

var _FileQuestion = require("../FileQuestion");

var _FileQuestion2 = _interopRequireDefault(_FileQuestion);

var _styledComponents = require("styled-components");

var _styledComponents2 = _interopRequireDefault(_styledComponents);

var _isEqual = require("lodash/isEqual");

var _isEqual2 = _interopRequireDefault(_isEqual);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const Red = _styledComponents2.default.div`
  color: red;
`;

class SurveyQuestionComponent extends _react.Component {
  constructor(..._args) {
    super(..._args);

    _defineProperty(this, "shouldComponentUpdate", nextProps => {
      return !(0, _isEqual2.default)(nextProps.question, this.props.question);
    });

    _defineProperty(this, "onChangeAnswer", (...args) => this.props.onChangeAnswer(...args));

    _defineProperty(this, "render", () => {
      const {
        question,
        onChangeAnswer,
        autocompleteRequest,
        onFileUpload
      } = this.props;

      switch (question.type) {
        case "slider":
          {
            return _react2.default.createElement(_SliderQuestion2.default, {
              question: question,
              onChangeAnswer: this.onChangeAnswer
            });
          }

        case "radiogroup":
          {
            return _react2.default.createElement(_RadiogroupQuestion2.default, {
              question: question,
              onChangeAnswer: this.onChangeAnswer
            });
          }

        case "multipletext":
          {
            return _react2.default.createElement(_MultiTextQuestion2.default, {
              question: question,
              onChangeAnswer: this.onChangeAnswer
            });
          }

        case "multiline-text":
        case "text":
          {
            return _react2.default.createElement(_TextQuestion2.default, {
              question: question,
              onChangeAnswer: this.onChangeAnswer
            });
          }

        case "dropdown":
        case "multiple-dropdown":
          {
            return _react2.default.createElement(_DropdownQuestion2.default, {
              question: question,
              onChangeAnswer: this.onChangeAnswer
            });
          }

        case "checkbox":
          {
            return _react2.default.createElement(_CheckboxQuestion2.default, {
              question: question,
              onChangeAnswer: this.onChangeAnswer
            });
          }

        case "us-region":
        case "multiple-us-region":
        case "us-state":
        case "multiple-us-state":
          {
            return _react2.default.createElement(_USRegionQuestion2.default, {
              question: question,
              onChangeAnswer: this.onChangeAnswer
            });
          }

        case "boolean":
          {
            return _react2.default.createElement(_BooleanQuestion2.default, {
              question: question,
              onChangeAnswer: this.onChangeAnswer
            });
          }

        case "choiceranker":
        case "choice-ranker":
          {
            return _react2.default.createElement(_ChoiceRankerQuestion2.default, {
              question: question,
              onChangeAnswer: this.onChangeAnswer
            });
          }

        case "rating":
          {
            return _react2.default.createElement(_RatingQuestion2.default, {
              question: question,
              onChangeAnswer: this.onChangeAnswer
            });
          }

        case "autocomplete":
          {
            if (!autocompleteRequest) throw new Error("You must supply autocompleteRequest method to use APIAutocompleteQuestions");
            return _react2.default.createElement(_APIAutocompleteQuestion2.default, {
              question: question,
              onChangeAnswer: this.onChangeAnswer,
              autocompleteRequest: autocompleteRequest
            });
          }

        case "matrixdynamic":
          {
            return _react2.default.createElement(_DynamicMatrixQuestion2.default, {
              question: question,
              autocompleteRequest: autocompleteRequest,
              onChangeAnswer: this.onChangeAnswer
            });
          }

        case "file":
          {
            if (!onFileUpload) return _react2.default.createElement(Red, null, "File Question Type requires an upload handler. Specify onFileUpload.");
            return _react2.default.createElement(_FileQuestion2.default, {
              question: question,
              onFileUpload: onFileUpload,
              onChangeAnswer: this.onChangeAnswer
            });
          }

        default:
          {
            throw new Error(`Invalid Question Type: "${question.type}" in "${JSON.stringify(question, null, "  ")}"`);
          }
      }
    });
  }

}

exports.default = SurveyQuestionComponent;