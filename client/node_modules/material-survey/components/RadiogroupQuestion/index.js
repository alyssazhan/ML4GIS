"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = RadioGroupQuestion;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _useQuestionAnswer = require("../../hooks/use-question-answer");

var _useQuestionAnswer2 = _interopRequireDefault(_useQuestionAnswer);

var _Radio = require("@material-ui/core/Radio");

var _Radio2 = _interopRequireDefault(_Radio);

var _QuestionContainer = require("../QuestionContainer");

var _QuestionContainer2 = _interopRequireDefault(_QuestionContainer);

var _Button = require("@material-ui/core/Button");

var _Button2 = _interopRequireDefault(_Button);

var _styledComponents = require("styled-components");

var _styledComponents2 = _interopRequireDefault(_styledComponents);

var _QuestionText = require("../QuestionText");

var _QuestionText2 = _interopRequireDefault(_QuestionText);

var _TextField = require("@material-ui/core/TextField");

var _TextField2 = _interopRequireDefault(_TextField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const RadioItem = (0, _styledComponents2.default)(_Button2.default)`
  && {
    display: flex;
    margin-top: 1px;
    padding: 0;
    padding-right: 20px;
    text-transform: none;
  }
`;
const RadioItemNoRipple = _styledComponents2.default.div`
  && {
    display: flex;
    margin-top: 1px;
    padding: 0;
    padding-right: 20px;
    align-items: center;
    input {
      font-size: 14px;
      font-weight: 500;
    }
  }
`;

function RadioGroupQuestion({
  question,
  onChangeAnswer
}) {
  const [{
    answer,
    error
  }, changeAnswer] = (0, _useQuestionAnswer2.default)(question, onChangeAnswer, question.defaultAnswer || undefined);
  const [otherText, changeOtherText] = (0, _react.useState)(question.choices.some(c => c === answer || (c || {}).value === answer) ? "" : answer);
  const choices = question.choices.map(c => typeof c === "string" ? {
    text: c,
    value: c
  } : c);
  return _react2.default.createElement(_QuestionContainer2.default, {
    question: question,
    answered: answer !== undefined,
    error: error
  }, choices.map(({
    value,
    text
  }) => _react2.default.createElement(RadioItem, {
    onClick: () => changeAnswer(value),
    key: value
  }, _react2.default.createElement(_Radio2.default, {
    tabIndex: -1,
    checked: answer === value
  }), _react2.default.createElement(_QuestionText2.default, null, text))), question.hasOther && _react2.default.createElement(RadioItemNoRipple, {
    tabIndex: -1
  }, _react2.default.createElement(_Radio2.default, {
    checked: answer === otherText,
    onClick: () => changeAnswer(otherText)
  }), _react2.default.createElement(_TextField2.default // inputProps={{ style: { fontSize: 8 } }}
  , {
    value: otherText,
    onChange: e => {
      if (answer === otherText) {
        changeOtherText(e.target.value);
        changeAnswer(e.target.value);
      } else {
        changeOtherText(e.target.value);
      }
    }
  })));
}