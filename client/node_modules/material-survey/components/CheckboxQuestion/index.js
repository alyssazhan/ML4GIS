"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CheckboxQuestion;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _Checkbox = require("@material-ui/core/Checkbox");

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _QuestionContainer = require("../QuestionContainer");

var _QuestionContainer2 = _interopRequireDefault(_QuestionContainer);

var _Button = require("@material-ui/core/Button");

var _Button2 = _interopRequireDefault(_Button);

var _styledComponents = require("styled-components");

var _styledComponents2 = _interopRequireDefault(_styledComponents);

var _QuestionText = require("../QuestionText");

var _QuestionText2 = _interopRequireDefault(_QuestionText);

var _useQuestionAnswer = require("../../hooks/use-question-answer");

var _useQuestionAnswer2 = _interopRequireDefault(_useQuestionAnswer);

var _TextField = require("@material-ui/core/TextField");

var _TextField2 = _interopRequireDefault(_TextField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const CheckboxItem = (0, _styledComponents2.default)(_Button2.default)`
  && {
    display: flex;
    padding: 0;
    padding-right: 20px;
    text-transform: none;
    margin-top: 1px;
  }
`;

function CheckboxQuestion({
  question,
  onChangeAnswer
}) {
  const [{
    answer,
    error
  }, changeAnswer] = (0, _useQuestionAnswer2.default)(question, onChangeAnswer, []);
  return _react2.default.createElement(_QuestionContainer2.default, {
    question: question,
    answered: answer.length > 0,
    error: error
  }, question.choices.map(choice => typeof choice === "string" ? {
    value: choice,
    text: choice
  } : choice).map(({
    value,
    text
  }) => {
    const onChange = () => {
      let newAnswer = answer.includes(value) ? answer.filter(a => a !== value) : answer.concat([value]);
      if (!question.hasOther) newAnswer = newAnswer.sort();
      changeAnswer(newAnswer);
    };

    return _react2.default.createElement(CheckboxItem, {
      role: "button",
      onClick: onChange,
      key: value
    }, _react2.default.createElement(_Checkbox2.default, {
      tabIndex: -1,
      checked: answer.includes(value)
    }), _react2.default.createElement(_QuestionText2.default, null, text));
  }), question.hasOther && answer.concat(null).filter(a => !question.choices.some(c => c === a || (c || {}).value === a)).map((otherValue, i) => _react2.default.createElement(CheckboxItem, {
    role: "button"
  }, _react2.default.createElement(_Checkbox2.default, {
    tabIndex: -1,
    onClick: () => {
      if (otherValue !== null) {
        changeAnswer(answer.filter(a => a !== otherValue));
      } else {
        changeAnswer([...answer.slice(0, i), "", ...answer.slice(i + 1)]);
      }
    },
    checked: otherValue !== null
  }), _react2.default.createElement(_TextField2.default, {
    value: otherValue || "",
    onChange: e => {
      changeAnswer([...answer.slice(0, i), e.target.value, ...answer.slice(i + 1)]);
    }
  }))));
}