"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _Radio = require("@material-ui/core/Radio");

var _Radio2 = _interopRequireDefault(_Radio);

var _QuestionContainer = require("../QuestionContainer");

var _QuestionContainer2 = _interopRequireDefault(_QuestionContainer);

var _styledComponents = require("styled-components");

var _styledComponents2 = _interopRequireDefault(_styledComponents);

var _QuestionText = require("../QuestionText");

var _QuestionText2 = _interopRequireDefault(_QuestionText);

var _TextField = require("@material-ui/core/TextField");

var _TextField2 = _interopRequireDefault(_TextField);

var _Slider = require("@material-ui/core/Slider");

var _Slider2 = _interopRequireDefault(_Slider);

var _useQuestionAnswer = require("../../hooks/use-question-answer");

var _useQuestionAnswer2 = _interopRequireDefault(_useQuestionAnswer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Row = _styledComponents2.default.div`
  display: flex;
  align-items: center;
  padding-top: 10px;
`;
const Col = _styledComponents2.default.div`
  display: flex;
  flex-direction: column;
  flex-grow: 1;
`;
const SpacedRow = _styledComponents2.default.div`
  display: flex;
  padding-top: 10px;
  align-items: center;
  justify-content: space-between;
`;

exports.default = ({
  question,
  onChangeAnswer
}) => {
  const [{
    answer,
    error
  }, changeAnswer] = (0, _useQuestionAnswer2.default)(question, onChangeAnswer, question.defaultAnswer || undefined);
  const [textFieldText, changeTextFieldText] = (0, _react.useState)(answer);
  return _react2.default.createElement(_QuestionContainer2.default, {
    question: question,
    answered: answer !== undefined,
    fadedTitle: question.unit ? `(${question.unit})` : undefined,
    error: error
  }, _react2.default.createElement(Row, null, _react2.default.createElement(_TextField2.default, {
    style: {
      border: "1px solid #ccc",
      borderRadius: 2,
      marginRight: 10,
      width: 80
    },
    inputProps: {
      style: {
        textAlign: "center"
      }
    },
    value: textFieldText || "",
    onChange: e => {
      const tft = e.target.value;
      changeTextFieldText(tft);
      const tfn = parseFloat(tft);

      if (!isNaN(tfn) && tfn <= question.max && tfn >= question.min) {
        changeAnswer(tfn);
      }
    }
  }), _react2.default.createElement(Col, null, _react2.default.createElement(_Slider2.default, {
    onChange: (e, value) => {
      console.log({
        value
      });
      changeAnswer(value);
      changeTextFieldText(value.toFixed(2));
    },
    style: {
      opacity: answer === undefined ? 0.5 : 1
    },
    value: answer === undefined ? (question.max + question.min) / 2 : answer,
    min: question.min,
    max: question.max,
    step: question.step || 1
  }), _react2.default.createElement(SpacedRow, null, _react2.default.createElement(_QuestionText2.default, null, question.min), _react2.default.createElement(_QuestionText2.default, null, question.max)))));
};