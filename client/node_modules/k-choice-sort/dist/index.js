'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// @flow

// See the README for algorithm explanation

var Sorter = function () {
  function Sorter(_ref) {
    var items = _ref.items,
        maxCandidates = _ref.maxCandidates,
        fromJSON = _ref.fromJSON;

    _classCallCheck(this, Sorter);

    if (fromJSON) {
      this.items = fromJSON.items;
      this.n = this.items.length;
      this.maxCandidates = fromJSON.maxCandidates;
      this.M = JSON.parse(JSON.stringify(fromJSON.M));
    } else {
      this.items = items;
      this.n = this.items.length;
      this.maxCandidates = maxCandidates;
      this.initializeMatrix();
    }
  }

  _createClass(Sorter, [{
    key: 'initializeMatrix',
    value: function initializeMatrix() {
      var items = this.items,
          n = this.n;

      this.M = [];
      for (var i = 0; i < n; i++) {
        var ar = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var item = _step.value;
            ar.push(0);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        this.M.push(ar);
      }
      for (var _i = 0; _i < n; _i++) {
        this.M[_i][_i] = 2;
      }
    }
  }, {
    key: 'getCandidates',
    value: function getCandidates() {
      var maxCandidates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var n = this.n,
          M = this.M,
          items = this.items;

      maxCandidates = maxCandidates || this.maxCandidates || 2;
      // Find column with the most unknowns, then choose those unknowns (and the
      // column's index) as candidates
      var columnUnknownCounts = {};
      var columnIndex = 0,
          columnUnknownCount = 0;
      for (var col = 0; col < n; col++) {
        var totalUnknowns = 0;
        for (var row = 0; row < n; row++) {
          if (M[row][col] == 0) totalUnknowns++;
        }
        columnUnknownCounts[col] = totalUnknowns;
        if (totalUnknowns > columnUnknownCount) {
          columnIndex = col;
          columnUnknownCount = totalUnknowns;
        }
      }

      var candidateIndices = [];
      for (var _row = 0; _row < n; _row++) {
        if (M[_row][columnIndex] == 0) {
          candidateIndices.push(_row);
        }
      }

      candidateIndices = candidateIndices.sort(function (a, b) {
        return columnUnknownCounts[b] - columnUnknownCounts[a];
      });

      return [columnIndex].concat(candidateIndices).slice(0, maxCandidates).map(function (i) {
        return items[i];
      });
    }
  }, {
    key: 'isSorted',
    value: function isSorted() {
      var M = this.M,
          n = this.n;

      for (var row = 0; row < n; row++) {
        for (var col = 0; col < n; col++) {
          if (M[row][col] === 0) return false;
        }
      }
      return true;
    }
  }, {
    key: 'recordAnswer',
    value: function recordAnswer(winnerItem, loserItems) {
      var M = this.M,
          items = this.items;

      var winner = items.indexOf(winnerItem);
      var losers = loserItems.map(function (loserItem) {
        return items.indexOf(loserItem);
      });
      if (winner === -1 || losers.includes(-1)) {
        throw new Error('Invalid winner/losers to recordAnswer');
      }
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = losers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var loser = _step2.value;

          M[winner][loser] = 1;
          M[loser][winner] = -1;
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      this.solveForUnknowns();
    }
  }, {
    key: 'solveForUnknowns',
    value: function solveForUnknowns() {
      // TODO this method could be much more efficient. For low values of
      // n this method works "fast enough"
      // NOTE: The procedure below is documented in the README
      var M = this.M,
          n = this.n;

      var graphUpdated = false;
      for (var b = 0; b < n; b++) {
        for (var a = 0; a < n; a++) {
          if (M[b][a] == 0) {
            for (var k = 0; k < n; k++) {
              if (M[k][a] == 1 && M[b][k] == 1) {
                M[b][a] = 1;
                M[a][b] = -1;
                graphUpdated = true;
              }
            }
          }
        }
      }
      if (graphUpdated) this.solveForUnknowns();
    }
  }, {
    key: 'getLargestRankingGroupSize',
    value: function getLargestRankingGroupSize() {
      var counts = {};
      var rankings = this.getRankings();
      for (var itemKey in rankings) {
        var ranking = rankings[itemKey];
        counts[ranking] = (counts[ranking] || 0) + 1;
      }
      return Math.max.apply(Math, _toConsumableArray(Object.values(counts)));
    }
  }, {
    key: 'getRankingGroupCount',
    value: function getRankingGroupCount() {
      return new Set(Object.values(this.getRankings())).size;
    }
  }, {
    key: 'getRankedOrder',
    value: function getRankedOrder() {
      var items = this.items;

      if (!this.isSorted()) throw new Error('A ranked order can only be returned if the sorter has been fully sorted');
      var rankedOrder = [];
      var rankings = this.getRankings();
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = items[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var item = _step3.value;

          rankedOrder[rankings[item]] = item;
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return rankedOrder;
    }
  }, {
    key: 'getRankings',
    value: function getRankings() {
      var n = this.n,
          M = this.M,
          items = this.items;

      var itemRankings = {};
      for (var row = 0; row < n; row++) {
        var rank = 0;
        for (var col = 0; col < n; col++) {
          if (M[row][col] === 0) rank += 0.5;else if (M[row][col] === 1) rank += 1;
        }
        itemRankings[items[row]] = rank;
      }
      return itemRankings;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        items: this.items,
        M: this.M,
        maxCandidates: this.maxCandidates
      };
    }
  }]);

  return Sorter;
}();

Sorter.fromJSON = function (json) {
  var sorter = new Sorter({ fromJSON: json });
  return sorter;
};

module.exports = Sorter;