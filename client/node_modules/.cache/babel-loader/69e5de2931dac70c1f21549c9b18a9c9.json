{"ast":null,"code":"import _objectSpread from\"D:\\\\GitHub\\\\ML4GIS\\\\client\\\\node_modules\\\\react-scripts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"D:\\\\GitHub\\\\ML4GIS\\\\client\\\\node_modules\\\\react-scripts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"D:\\\\GitHub\\\\ML4GIS\\\\client\\\\node_modules\\\\react-scripts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";export var getEnclosingBox=function getEnclosingBox(region){switch(region.type){case\"polygon\":{var rectangle={x:Math.min.apply(Math,_toConsumableArray(region.points.map(function(_ref){var _ref2=_slicedToArray(_ref,2),x=_ref2[0],y=_ref2[1];return x;}))),y:Math.min.apply(Math,_toConsumableArray(region.points.map(function(_ref3){var _ref4=_slicedToArray(_ref3,2),x=_ref4[0],y=_ref4[1];return y;}))),w:0,h:0};rectangle.w=Math.max.apply(Math,_toConsumableArray(region.points.map(function(_ref5){var _ref6=_slicedToArray(_ref5,2),x=_ref6[0],y=_ref6[1];return x;})))-rectangle.x;rectangle.h=Math.max.apply(Math,_toConsumableArray(region.points.map(function(_ref7){var _ref8=_slicedToArray(_ref7,2),x=_ref8[0],y=_ref8[1];return y;})))-rectangle.y;return rectangle;}case\"polygon1\":{var _rectangle={x:Math.min.apply(Math,_toConsumableArray(region.points.map(function(_ref9){var _ref10=_slicedToArray(_ref9,2),x=_ref10[0],y=_ref10[1];return x;}))),y:Math.min.apply(Math,_toConsumableArray(region.points.map(function(_ref11){var _ref12=_slicedToArray(_ref11,2),x=_ref12[0],y=_ref12[1];return y;}))),w:0,h:0};_rectangle.w=Math.max.apply(Math,_toConsumableArray(region.points.map(function(_ref13){var _ref14=_slicedToArray(_ref13,2),x=_ref14[0],y=_ref14[1];return x;})))-_rectangle.x;_rectangle.h=Math.max.apply(Math,_toConsumableArray(region.points.map(function(_ref15){var _ref16=_slicedToArray(_ref15,2),x=_ref16[0],y=_ref16[1];return y;})))-_rectangle.y;return _rectangle;}case\"circle\":{return{x:region.x-region.xr,y:region.y-region.yr,w:region.xr*2,h:region.yr*2};}case\"rectangle\":{return{x:region.x,y:region.y,w:region.w,h:region.h};}case\"point\":{return{x:region.x,y:region.y,w:0,h:0};}default:{return{x:0,y:0,w:0,h:0};}}throw new Error(\"unknown region\");};export var moveRegion=function moveRegion(region,x,y){switch(region.type){case\"point\":{return _objectSpread(_objectSpread({},region),{},{x:x,y:y});}case\"rectangle\":{return _objectSpread(_objectSpread({},region),{},{x:x-region.w/2,y:y-region.h/2});}case\"circle\":{return _objectSpread(_objectSpread({},region),{},{x:x,y:y});}}return region;};","map":{"version":3,"sources":["D:/GitHub/ML4GIS/client/src/pages/Home/annotateComponents/ImageCanvas/regionTools.js"],"names":["getEnclosingBox","region","type","rectangle","x","Math","min","points","map","y","w","h","max","xr","yr","Error","moveRegion"],"mappings":"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","sourcesContent":["\r\nexport type BaseRegion = {\r\n  id: string | number,\r\n  cls?: string,\r\n  locked?: boolean,\r\n  visible?: boolean,\r\n  color: string,\r\n  editingLabels?: boolean,\r\n  highlighted?: boolean,\r\n  tags?: Array<string>,\r\n}\r\n\r\nexport type Point = {|\r\n  ...$Exact<BaseRegion>,\r\n  type: \"point\",\r\n  x: number,\r\n  y: number,\r\n|}\r\n\r\nexport type Rectangle = {|\r\n  ...$Exact<BaseRegion>,\r\n  type: \"rectangle\",\r\n  x: number,\r\n  y: number,\r\n  w: number,\r\n  h: number,\r\n|}\r\n\r\nexport type Polygon = {|\r\n  ...$Exact<BaseRegion>,\r\n  type: \"polygon\",\r\n  open?: boolean,\r\n  points: Array<[number, number]>,\r\n|}\r\n\r\nexport type Polygon1 = {|\r\n...$Exact<BaseRegion>,\r\n    type:\r\n\"polygon1\",\r\n    points:Array<[number, number]>,\r\n    holes: Array<[number, number]>,\r\n    open?: boolean,\r\n    creatingHole?:  boolean,\r\n|}\r\nexport type Circle = {|\r\n...$Exact<BaseRegion>,\r\n    type: \"circle\",\r\n    // x and y indicate the coordinates of the centre of the circle\r\n    x: number,\r\n    y: number,\r\n    // x and y radius (technically, Circles are capable of representing Ovals)\r\n    xr: number,\r\n    xr: number\r\n|}\r\nexport type Region =\r\n  | Point\r\n  | Rectangle\r\n  | Polygon\r\n  | Polygon1\r\n  |Circle\r\n\r\nexport const getEnclosingBox = (region: Region) => {\r\n  switch (region.type) {\r\n    case \"polygon\": {\r\n      const rectangle = {\r\n        x: Math.min(...region.points.map(([x, y]) => x)),\r\n        y: Math.min(...region.points.map(([x, y]) => y)),\r\n        w: 0,\r\n        h: 0,\r\n      }\r\n      rectangle.w = Math.max(...region.points.map(([x, y]) => x)) - rectangle.x\r\n      rectangle.h = Math.max(...region.points.map(([x, y]) => y)) - rectangle.y\r\n      return rectangle\r\n    }\r\n    case \"polygon1\": {\r\n      const rectangle = {\r\n        x: Math.min(...region.points.map(([x, y]) => x)),\r\n        y: Math.min(...region.points.map(([x, y]) => y)),\r\n        w: 0,\r\n        h: 0,\r\n      }\r\n      rectangle.w = Math.max(...region.points.map(([x, y]) => x)) - rectangle.x\r\n      rectangle.h = Math.max(...region.points.map(([x, y]) => y)) - rectangle.y\r\n      return rectangle\r\n    }\r\n    case \"circle\": {\r\n      return {\r\n        x: region.x - region.xr,\r\n        y: region.y - region.yr,\r\n        w: region.xr * 2,\r\n        h: region.yr * 2\r\n      }\r\n    }\r\n    case \"rectangle\": {\r\n      return { x: region.x, y: region.y, w: region.w, h: region.h }\r\n    }\r\n    case \"point\": {\r\n      return { x: region.x, y: region.y, w: 0, h: 0 }\r\n    }\r\n    default: {\r\n      return { x: 0, y: 0, w: 0, h: 0 }\r\n    }\r\n  }\r\n  throw new Error(\"unknown region\")\r\n}\r\n\r\nexport const moveRegion = (region: Region, x: number, y: number) => {\r\n  switch (region.type) {\r\n    case \"point\": {\r\n      return { ...region, x, y }\r\n    }\r\n    case \"rectangle\": {\r\n      return { ...region, x: x - region.w / 2, y: y - region.h / 2 }\r\n    }\r\n    case \"circle\": {\r\n      return {\r\n        ...region,\r\n        x,\r\n        y\r\n      }\r\n    }\r\n  }\r\n  return region\r\n}\r\n"]},"metadata":{},"sourceType":"module"}