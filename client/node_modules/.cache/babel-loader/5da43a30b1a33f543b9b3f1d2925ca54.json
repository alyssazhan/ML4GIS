{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport resolveShiftedAlias from '../../helpers/resolving-handlers/resolveShiftedAlias';\nimport resolveUnshiftedAlias from '../../helpers/resolving-handlers/resolveUnshiftedAlias';\nimport KeyOSAndLayoutAliasesDictionary from '../../const/KeyOSAndLayoutAliasesDictionary';\nimport KeySequenceParser from './KeySequenceParser';\nimport resolveUnaltedAlias from '../../helpers/resolving-handlers/resolveUnaltedAlias';\nimport resolveAltedAlias from '../../helpers/resolving-handlers/resolveAltedAlias';\nimport resolveUnaltShiftedAlias from '../../helpers/resolving-handlers/resolveUnaltShiftedAlias';\nimport resolveAltShiftedAlias from '../../helpers/resolving-handlers/resolveAltShiftedAlias';\n/**\n * Serializes instances of KeyCombination to KeyCombinationString.\n *\n * Used primarily to serialize string representations of key events as they happen.\n * @class\n */\n\nvar KeyCombinationSerializer = /*#__PURE__*/function () {\n  function KeyCombinationSerializer() {\n    _classCallCheck(this, KeyCombinationSerializer);\n  }\n\n  _createClass(KeyCombinationSerializer, null, [{\n    key: \"serialize\",\n\n    /**\n     * Returns a string representation of a single KeyCombination\n     * @param {KeyCombination} keyCombination KeyCombination to serialize\n     * @returns {string[]} Serialization of KeyCombination\n     */\n    value: function serialize(keyCombination) {\n      var combinationIncludesShift = keyCombination['Shift'];\n      var combinationIncludesAlt = keyCombination['Alt'];\n      var keyCombinationIdDict = {};\n      /**\n       * List of key names in alphabetical order\n       * @type {string[]}\n       */\n\n      var sortedKeys = Object.keys(keyCombination).sort();\n      sortedKeys.forEach(function (keyName) {\n        var keyAliases = [];\n\n        if (combinationIncludesShift) {\n          if (combinationIncludesAlt) {\n            var unaltShiftedKeyNames = resolveUnaltShiftedAlias(keyName);\n            var altShiftedKeyNames = resolveAltShiftedAlias(keyName);\n            keyAliases = [].concat(_toConsumableArray(keyAliases), [keyName], _toConsumableArray(unaltShiftedKeyNames), _toConsumableArray(altShiftedKeyNames));\n          } else {\n            var unshiftedKeyNames = resolveUnshiftedAlias(keyName);\n            var shiftedKeyNames = resolveShiftedAlias(keyName);\n            keyAliases = [].concat(_toConsumableArray(keyAliases), [keyName], _toConsumableArray(unshiftedKeyNames), _toConsumableArray(shiftedKeyNames));\n          }\n        } else if (combinationIncludesAlt) {\n          var unaltedKeyNames = resolveUnaltedAlias(keyName);\n          var altedKeyNames = resolveAltedAlias(keyName);\n          keyAliases = [].concat(_toConsumableArray(keyAliases), [keyName], _toConsumableArray(unaltedKeyNames), _toConsumableArray(altedKeyNames));\n        } else {\n          keyAliases.push(keyName);\n          var keyAlias = KeyOSAndLayoutAliasesDictionary[keyName];\n\n          if (keyAlias) {\n            keyAliases = [].concat(_toConsumableArray(keyAliases), _toConsumableArray(keyAlias));\n          }\n        }\n\n        var keyCombinationIds = Object.keys(keyCombinationIdDict);\n\n        if (keyCombinationIds.length > 0) {\n          keyCombinationIds.forEach(function (keyCombinationId) {\n            keyAliases.forEach(function (keyAlias) {\n              keyCombinationIdDict[keyCombinationId + \"+\".concat(keyAlias)] = _objectSpread({}, keyCombinationIdDict[keyCombinationId], _defineProperty({}, keyAlias, true));\n            });\n            delete keyCombinationIdDict[keyCombinationId];\n          });\n        } else {\n          keyAliases.forEach(function (keyAlias) {\n            keyCombinationIdDict[keyAlias] = _defineProperty({}, keyAlias, true);\n          });\n        }\n      });\n      return Object.values(keyCombinationIdDict).map(function (keysInCombo) {\n        return Object.keys(keysInCombo).sort().join('+');\n      });\n    }\n    /**\n     * Whether the specified key sequence is valid (is of the correct format and contains\n     * combinations consisting entirely of valid keys)\n     * @param {KeySequenceString} keySequence Key sequence to validate\n     * @returns {boolean} Whether the key sequence is valid\n     */\n\n  }, {\n    key: \"isValidKeySerialization\",\n    value: function isValidKeySerialization(keySequence) {\n      if (keySequence.length > 0) {\n        return !!KeySequenceParser.parse(keySequence, {\n          ensureValidKeys: true\n        }).combination;\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return KeyCombinationSerializer;\n}();\n\nexport default KeyCombinationSerializer;","map":{"version":3,"sources":["D:/GitHub/ML4GIS/client/node_modules/react-hotkeys/es/lib/shared/KeyCombinationSerializer.js"],"names":["_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","value","defineProperty","configurable","writable","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","prototype","toString","call","Array","from","isArray","arr2","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","resolveShiftedAlias","resolveUnshiftedAlias","KeyOSAndLayoutAliasesDictionary","KeySequenceParser","resolveUnaltedAlias","resolveAltedAlias","resolveUnaltShiftedAlias","resolveAltShiftedAlias","KeyCombinationSerializer","serialize","keyCombination","combinationIncludesShift","combinationIncludesAlt","keyCombinationIdDict","sortedKeys","sort","keyName","keyAliases","unaltShiftedKeyNames","altShiftedKeyNames","unshiftedKeyNames","shiftedKeyNames","unaltedKeyNames","altedKeyNames","push","keyAlias","keyCombinationIds","keyCombinationId","values","map","keysInCombo","join","isValidKeySerialization","keySequence","parse","ensureValidKeys","combination"],"mappings":"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","sourcesContent":["function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport resolveShiftedAlias from '../../helpers/resolving-handlers/resolveShiftedAlias';\nimport resolveUnshiftedAlias from '../../helpers/resolving-handlers/resolveUnshiftedAlias';\nimport KeyOSAndLayoutAliasesDictionary from '../../const/KeyOSAndLayoutAliasesDictionary';\nimport KeySequenceParser from './KeySequenceParser';\nimport resolveUnaltedAlias from '../../helpers/resolving-handlers/resolveUnaltedAlias';\nimport resolveAltedAlias from '../../helpers/resolving-handlers/resolveAltedAlias';\nimport resolveUnaltShiftedAlias from '../../helpers/resolving-handlers/resolveUnaltShiftedAlias';\nimport resolveAltShiftedAlias from '../../helpers/resolving-handlers/resolveAltShiftedAlias';\n/**\n * Serializes instances of KeyCombination to KeyCombinationString.\n *\n * Used primarily to serialize string representations of key events as they happen.\n * @class\n */\n\nvar KeyCombinationSerializer =\n/*#__PURE__*/\nfunction () {\n  function KeyCombinationSerializer() {\n    _classCallCheck(this, KeyCombinationSerializer);\n  }\n\n  _createClass(KeyCombinationSerializer, null, [{\n    key: \"serialize\",\n\n    /**\n     * Returns a string representation of a single KeyCombination\n     * @param {KeyCombination} keyCombination KeyCombination to serialize\n     * @returns {string[]} Serialization of KeyCombination\n     */\n    value: function serialize(keyCombination) {\n      var combinationIncludesShift = keyCombination['Shift'];\n      var combinationIncludesAlt = keyCombination['Alt'];\n      var keyCombinationIdDict = {};\n      /**\n       * List of key names in alphabetical order\n       * @type {string[]}\n       */\n\n      var sortedKeys = Object.keys(keyCombination).sort();\n      sortedKeys.forEach(function (keyName) {\n        var keyAliases = [];\n\n        if (combinationIncludesShift) {\n          if (combinationIncludesAlt) {\n            var unaltShiftedKeyNames = resolveUnaltShiftedAlias(keyName);\n            var altShiftedKeyNames = resolveAltShiftedAlias(keyName);\n            keyAliases = [].concat(_toConsumableArray(keyAliases), [keyName], _toConsumableArray(unaltShiftedKeyNames), _toConsumableArray(altShiftedKeyNames));\n          } else {\n            var unshiftedKeyNames = resolveUnshiftedAlias(keyName);\n            var shiftedKeyNames = resolveShiftedAlias(keyName);\n            keyAliases = [].concat(_toConsumableArray(keyAliases), [keyName], _toConsumableArray(unshiftedKeyNames), _toConsumableArray(shiftedKeyNames));\n          }\n        } else if (combinationIncludesAlt) {\n          var unaltedKeyNames = resolveUnaltedAlias(keyName);\n          var altedKeyNames = resolveAltedAlias(keyName);\n          keyAliases = [].concat(_toConsumableArray(keyAliases), [keyName], _toConsumableArray(unaltedKeyNames), _toConsumableArray(altedKeyNames));\n        } else {\n          keyAliases.push(keyName);\n          var keyAlias = KeyOSAndLayoutAliasesDictionary[keyName];\n\n          if (keyAlias) {\n            keyAliases = [].concat(_toConsumableArray(keyAliases), _toConsumableArray(keyAlias));\n          }\n        }\n\n        var keyCombinationIds = Object.keys(keyCombinationIdDict);\n\n        if (keyCombinationIds.length > 0) {\n          keyCombinationIds.forEach(function (keyCombinationId) {\n            keyAliases.forEach(function (keyAlias) {\n              keyCombinationIdDict[keyCombinationId + \"+\".concat(keyAlias)] = _objectSpread({}, keyCombinationIdDict[keyCombinationId], _defineProperty({}, keyAlias, true));\n            });\n            delete keyCombinationIdDict[keyCombinationId];\n          });\n        } else {\n          keyAliases.forEach(function (keyAlias) {\n            keyCombinationIdDict[keyAlias] = _defineProperty({}, keyAlias, true);\n          });\n        }\n      });\n      return Object.values(keyCombinationIdDict).map(function (keysInCombo) {\n        return Object.keys(keysInCombo).sort().join('+');\n      });\n    }\n    /**\n     * Whether the specified key sequence is valid (is of the correct format and contains\n     * combinations consisting entirely of valid keys)\n     * @param {KeySequenceString} keySequence Key sequence to validate\n     * @returns {boolean} Whether the key sequence is valid\n     */\n\n  }, {\n    key: \"isValidKeySerialization\",\n    value: function isValidKeySerialization(keySequence) {\n      if (keySequence.length > 0) {\n        return !!KeySequenceParser.parse(keySequence, {\n          ensureValidKeys: true\n        }).combination;\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return KeyCombinationSerializer;\n}();\n\nexport default KeyCombinationSerializer;"]},"metadata":{},"sourceType":"module"}