{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { setHarmonicInterval, clearHarmonicInterval } from 'set-harmonic-interval';\n\nvar useHarmonicIntervalFn = function useHarmonicIntervalFn(fn, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n\n  var latestCallback = useRef(function () {});\n  useEffect(function () {\n    latestCallback.current = fn;\n  });\n  useEffect(function () {\n    if (delay !== null) {\n      var interval_1 = setHarmonicInterval(function () {\n        return latestCallback.current();\n      }, delay);\n      return function () {\n        return clearHarmonicInterval(interval_1);\n      };\n    }\n\n    return undefined;\n  }, [delay]);\n};\n\nexport default useHarmonicIntervalFn;","map":{"version":3,"sources":["D:/GitHub/ML4GIS/client/node_modules/react-use/esm/useHarmonicIntervalFn.js"],"names":["useEffect","useRef","setHarmonicInterval","clearHarmonicInterval","useHarmonicIntervalFn","fn","delay","latestCallback","current","interval_1","undefined"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,SAASC,mBAAT,EAA8BC,qBAA9B,QAA2D,uBAA3D;;AACA,IAAIC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAUC,EAAV,EAAcC,KAAd,EAAqB;AAC7C,MAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB;AAAEA,IAAAA,KAAK,GAAG,CAAR;AAAY;;AACpC,MAAIC,cAAc,GAAGN,MAAM,CAAC,YAAY,CAAG,CAAhB,CAA3B;AACAD,EAAAA,SAAS,CAAC,YAAY;AAClBO,IAAAA,cAAc,CAACC,OAAf,GAAyBH,EAAzB;AACH,GAFQ,CAAT;AAGAL,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIM,KAAK,KAAK,IAAd,EAAoB;AAChB,UAAIG,UAAU,GAAGP,mBAAmB,CAAC,YAAY;AAAE,eAAOK,cAAc,CAACC,OAAf,EAAP;AAAkC,OAAjD,EAAmDF,KAAnD,CAApC;AACA,aAAO,YAAY;AAAE,eAAOH,qBAAqB,CAACM,UAAD,CAA5B;AAA2C,OAAhE;AACH;;AACD,WAAOC,SAAP;AACH,GANQ,EAMN,CAACJ,KAAD,CANM,CAAT;AAOH,CAbD;;AAcA,eAAeF,qBAAf","sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport { setHarmonicInterval, clearHarmonicInterval } from 'set-harmonic-interval';\r\nvar useHarmonicIntervalFn = function (fn, delay) {\r\n    if (delay === void 0) { delay = 0; }\r\n    var latestCallback = useRef(function () { });\r\n    useEffect(function () {\r\n        latestCallback.current = fn;\r\n    });\r\n    useEffect(function () {\r\n        if (delay !== null) {\r\n            var interval_1 = setHarmonicInterval(function () { return latestCallback.current(); }, delay);\r\n            return function () { return clearHarmonicInterval(interval_1); };\r\n        }\r\n        return undefined;\r\n    }, [delay]);\r\n};\r\nexport default useHarmonicIntervalFn;\r\n"]},"metadata":{},"sourceType":"module"}