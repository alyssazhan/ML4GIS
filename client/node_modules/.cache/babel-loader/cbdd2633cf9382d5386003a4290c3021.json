{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the same directory of this source tree.\n *\n * @flow\n */\nimport getEventCharCode from './getEventCharCode';\nimport translateToKey from './translateToKey';\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\n\nvar normalizeKey = {\n  Esc: 'Escape',\n  Spacebar: ' ',\n  Left: 'ArrowLeft',\n  Up: 'ArrowUp',\n  Right: 'ArrowRight',\n  Down: 'ArrowDown',\n  Del: 'Delete',\n  Win: 'OS',\n  Menu: 'ContextMenu',\n  Apps: 'ContextMenu',\n  Scroll: 'ScrollLock',\n  MozPrintableKey: 'Unidentified'\n};\n/**\n * @param {object} nativeEvent Native browser event.\n * @returns {string} Normalized `key` property.\n */\n\nfunction reactsGetEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  } // Browser does not implement `key`, polyfill as much of it as we can.\n\n\n  if (nativeEvent.type === 'keypress') {\n    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n\n  return '';\n}\n\nexport default reactsGetEventKey;","map":{"version":3,"sources":["D:/GitHub/ML4GIS/client/node_modules/react-hotkeys/es/vendor/react-dom/reactsGetEventKey.js"],"names":["getEventCharCode","translateToKey","normalizeKey","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","reactsGetEventKey","nativeEvent","key","type","charCode","String","fromCharCode","keyCode"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA;AACA;AACA;AACA;;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,GAAG,EAAE,QADY;AAEjBC,EAAAA,QAAQ,EAAE,GAFO;AAGjBC,EAAAA,IAAI,EAAE,WAHW;AAIjBC,EAAAA,EAAE,EAAE,SAJa;AAKjBC,EAAAA,KAAK,EAAE,YALU;AAMjBC,EAAAA,IAAI,EAAE,WANW;AAOjBC,EAAAA,GAAG,EAAE,QAPY;AAQjBC,EAAAA,GAAG,EAAE,IARY;AASjBC,EAAAA,IAAI,EAAE,aATW;AAUjBC,EAAAA,IAAI,EAAE,aAVW;AAWjBC,EAAAA,MAAM,EAAE,YAXS;AAYjBC,EAAAA,eAAe,EAAE;AAZA,CAAnB;AAcA;AACA;AACA;AACA;;AAEA,SAASC,iBAAT,CAA2BC,WAA3B,EAAwC;AACtC,MAAIA,WAAW,CAACC,GAAhB,EAAqB;AACnB;AACA;AACA;AACA;AACA,QAAIA,GAAG,GAAGf,YAAY,CAACc,WAAW,CAACC,GAAb,CAAZ,IAAiCD,WAAW,CAACC,GAAvD;;AAEA,QAAIA,GAAG,KAAK,cAAZ,EAA4B;AAC1B,aAAOA,GAAP;AACD;AACF,GAXqC,CAWpC;;;AAGF,MAAID,WAAW,CAACE,IAAZ,KAAqB,UAAzB,EAAqC;AACnC,QAAIC,QAAQ,GAAGnB,gBAAgB,CAACgB,WAAD,CAA/B,CADmC,CACW;AAC9C;;AAEA,WAAOG,QAAQ,KAAK,EAAb,GAAkB,OAAlB,GAA4BC,MAAM,CAACC,YAAP,CAAoBF,QAApB,CAAnC;AACD;;AAED,MAAIH,WAAW,CAACE,IAAZ,KAAqB,SAArB,IAAkCF,WAAW,CAACE,IAAZ,KAAqB,OAA3D,EAAoE;AAClE;AACA;AACA,WAAOjB,cAAc,CAACe,WAAW,CAACM,OAAb,CAAd,IAAuC,cAA9C;AACD;;AAED,SAAO,EAAP;AACD;;AAED,eAAeP,iBAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the same directory of this source tree.\n *\n * @flow\n */\nimport getEventCharCode from './getEventCharCode';\nimport translateToKey from './translateToKey';\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\n\nvar normalizeKey = {\n  Esc: 'Escape',\n  Spacebar: ' ',\n  Left: 'ArrowLeft',\n  Up: 'ArrowUp',\n  Right: 'ArrowRight',\n  Down: 'ArrowDown',\n  Del: 'Delete',\n  Win: 'OS',\n  Menu: 'ContextMenu',\n  Apps: 'ContextMenu',\n  Scroll: 'ScrollLock',\n  MozPrintableKey: 'Unidentified'\n};\n/**\n * @param {object} nativeEvent Native browser event.\n * @returns {string} Normalized `key` property.\n */\n\nfunction reactsGetEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  } // Browser does not implement `key`, polyfill as much of it as we can.\n\n\n  if (nativeEvent.type === 'keypress') {\n    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n\n  return '';\n}\n\nexport default reactsGetEventKey;"]},"metadata":{},"sourceType":"module"}