{"ast":null,"code":"var _jsxFileName = \"/Users/yan/Documents/proj/ML4GIS/client/src/annotateComponents/RegionShapes/index.js\";\nimport React, { memo } from \"react\";\nimport colorAlpha from \"color-alpha\";\n\nfunction clamp(num, min, max) {\n  return num <= min ? min : num >= max ? max : num;\n}\n\nconst RegionComponents = {\n  point: memo(({\n    region,\n    iw,\n    ih\n  }) => /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(\".concat(region.x * iw, \" \").concat(region.y * ih, \")\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 8L8 0L0 -8L-8 0Z\",\n    strokeWidth: 2,\n    stroke: region.color,\n    fill: \"transparent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }))),\n  rectangle: memo(({\n    region,\n    iw,\n    ih\n  }) => /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(\".concat(region.x * iw, \" \").concat(region.y * ih, \")\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    strokeWidth: 2,\n    x: 0,\n    y: 0,\n    width: Math.max(region.w * iw, 0),\n    height: Math.max(region.h * ih, 0),\n    stroke: colorAlpha(region.color, 0.75),\n    fill: colorAlpha(region.color, 0.25),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }))),\n  polygon: memo(({\n    region,\n    iw,\n    ih,\n    fullSegmentationMode\n  }) => {\n    const Component = region.open ? \"polyline\" : \"polygon\";\n    const alphaBase = fullSegmentationMode ? 0.5 : 1;\n    return /*#__PURE__*/React.createElement(Component, {\n      points: region.points.map(([x, y]) => [x * iw, y * ih]).map(a => a.join(\" \")).join(\" \"),\n      strokeWidth: 2,\n      stroke: colorAlpha(region.color, 0.75),\n      fill: colorAlpha(region.color, 0.25),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    });\n  }),\n  keypoints: ({\n    region,\n    iw,\n    ih,\n    keypointDefinitions\n  }) => {\n    const points = region.points,\n          keypointsDefinitionId = region.keypointsDefinitionId;\n\n    if (!keypointDefinitions[keypointsDefinitionId]) {\n      throw new Error(\"No definition for keypoint configuration \\\"\".concat(keypointsDefinitionId, \"\\\"\"));\n    }\n\n    const _keypointDefinitions$ = keypointDefinitions[keypointsDefinitionId],\n          landmarks = _keypointDefinitions$.landmarks,\n          connections = _keypointDefinitions$.connections;\n    return /*#__PURE__*/React.createElement(\"g\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, Object.entries(points).map(([keypointId, {\n      x,\n      y\n    }], i) => /*#__PURE__*/React.createElement(\"g\", {\n      key: i,\n      transform: \"translate(\".concat(x * iw, \" \").concat(y * ih, \")\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"path\", {\n      d: \"M0 8L8 0L0 -8L-8 0Z\",\n      strokeWidth: 2,\n      stroke: landmarks[keypointId].color,\n      fill: \"transparent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }))), connections.map(([kp1Id, kp2Id]) => {\n      const kp1 = points[kp1Id];\n      const kp2 = points[kp2Id];\n      const midPoint = {\n        x: (kp1.x + kp2.x) / 2,\n        y: (kp1.y + kp2.y) / 2\n      };\n      return /*#__PURE__*/React.createElement(\"g\", {\n        key: \"\".concat(kp1.x, \",\").concat(kp1.y, \".\").concat(kp2.x, \",\").concat(kp2.y),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"line\", {\n        x1: kp1.x * iw,\n        y1: kp1.y * ih,\n        x2: midPoint.x * iw,\n        y2: midPoint.y * ih,\n        strokeWidth: 2,\n        stroke: landmarks[kp1Id].color,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"line\", {\n        x1: kp2.x * iw,\n        y1: kp2.y * ih,\n        x2: midPoint.x * iw,\n        y2: midPoint.y * ih,\n        strokeWidth: 2,\n        stroke: landmarks[kp2Id].color,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }\n      }));\n    }));\n  },\n  pixel: () => null\n};\nexport const WrappedRegionList = memo(({\n  regions,\n  keypointDefinitions,\n  iw,\n  ih,\n  fullSegmentationMode\n}) => {\n  return regions.filter(r => r.visible !== false).map(r => {\n    const Component = RegionComponents[r.type];\n    return /*#__PURE__*/React.createElement(Component, {\n      key: r.regionId,\n      region: r,\n      iw: iw,\n      ih: ih,\n      keypointDefinitions: keypointDefinitions,\n      fullSegmentationMode: fullSegmentationMode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    });\n  });\n}, (n, p) => n.regions === p.regions && n.iw === p.iw && n.ih === p.ih);\nexport const RegionShapes = ({\n  mat,\n  imagePosition,\n  regions = [],\n  keypointDefinitions,\n  fullSegmentationMode\n}) => {\n  const iw = imagePosition.bottomRight.x - imagePosition.topLeft.x;\n  const ih = imagePosition.bottomRight.y - imagePosition.topLeft.y;\n  if (isNaN(iw) || isNaN(ih)) return null;\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    width: iw,\n    height: ih,\n    style: {\n      position: \"absolute\",\n      zIndex: 2,\n      left: imagePosition.topLeft.x,\n      top: imagePosition.topLeft.y,\n      pointerEvents: \"none\",\n      width: iw,\n      height: ih\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(WrappedRegionList, {\n    key: \"wrapped-region-list\",\n    regions: regions,\n    iw: iw,\n    ih: ih,\n    keypointDefinitions: keypointDefinitions,\n    fullSegmentationMode: fullSegmentationMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }));\n};\nexport default RegionShapes;","map":{"version":3,"sources":["/Users/yan/Documents/proj/ML4GIS/client/src/annotateComponents/RegionShapes/index.js"],"names":["React","memo","colorAlpha","clamp","num","min","max","RegionComponents","point","region","iw","ih","x","y","color","rectangle","Math","w","h","polygon","fullSegmentationMode","Component","open","alphaBase","points","map","a","join","keypoints","keypointDefinitions","keypointsDefinitionId","Error","landmarks","connections","Object","entries","keypointId","i","kp1Id","kp2Id","kp1","kp2","midPoint","pixel","WrappedRegionList","regions","filter","r","visible","type","regionId","n","p","RegionShapes","mat","imagePosition","bottomRight","topLeft","isNaN","position","zIndex","left","top","pointerEvents","width","height"],"mappings":"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","sourcesContent":["// @flow\n\nimport React, { memo } from \"react\"\nimport colorAlpha from \"color-alpha\"\n\nfunction clamp(num, min, max) {\n  return num <= min ? min : num >= max ? max : num\n}\n\nconst RegionComponents = {\n  point: memo(({ region, iw, ih }) => (\n    <g transform={`translate(${region.x * iw} ${region.y * ih})`}>\n      <path\n        d={\"M0 8L8 0L0 -8L-8 0Z\"}\n        strokeWidth={2}\n        stroke={region.color}\n        fill=\"transparent\"\n      />\n    </g>\n  )),\n    rectangle: memo(({ region, iw, ih }) => (\n    <g transform={`translate(${region.x * iw} ${region.y * ih})`}>\n      <rect\n        strokeWidth={2}\n        x={0}\n        y={0}\n        width={Math.max(region.w * iw, 0)}\n        height={Math.max(region.h * ih, 0)}\n        stroke={colorAlpha(region.color, 0.75)}\n        fill={colorAlpha(region.color, 0.25)}\n      />\n    </g>\n  )),\n  polygon: memo(({ region, iw, ih, fullSegmentationMode }) => {\n    const Component = region.open ? \"polyline\" : \"polygon\"\n    const alphaBase = fullSegmentationMode ? 0.5 : 1\n    return (\n      <Component\n        points={region.points\n          .map(([x, y]) => [x * iw, y * ih])\n          .map((a) => a.join(\" \"))\n          .join(\" \")}\n        strokeWidth={2}\n        stroke={colorAlpha(region.color, 0.75)}\n        fill={colorAlpha(region.color, 0.25)}\n      />\n    )\n  }),\n  keypoints: ({ region, iw, ih, keypointDefinitions }) => {\n    const { points, keypointsDefinitionId } = region\n    if (!keypointDefinitions[keypointsDefinitionId]) {\n      throw new Error(\n        `No definition for keypoint configuration \"${keypointsDefinitionId}\"`\n      )\n    }\n    const { landmarks, connections } = keypointDefinitions[\n      keypointsDefinitionId\n    ]\n    return (\n      <g>\n        {Object.entries(points).map(([keypointId, { x, y }], i) => (\n          <g key={i} transform={`translate(${x * iw} ${y * ih})`}>\n            <path\n              d={\"M0 8L8 0L0 -8L-8 0Z\"}\n              strokeWidth={2}\n              stroke={landmarks[keypointId].color}\n              fill=\"transparent\"\n            />\n          </g>\n        ))}\n        {connections.map(([kp1Id, kp2Id]) => {\n          const kp1 = points[kp1Id]\n          const kp2 = points[kp2Id]\n          const midPoint = { x: (kp1.x + kp2.x) / 2, y: (kp1.y + kp2.y) / 2 }\n\n          return (\n            <g key={`${kp1.x},${kp1.y}.${kp2.x},${kp2.y}`}>\n              <line\n                x1={kp1.x * iw}\n                y1={kp1.y * ih}\n                x2={midPoint.x * iw}\n                y2={midPoint.y * ih}\n                strokeWidth={2}\n                stroke={landmarks[kp1Id].color}\n              />\n              <line\n                x1={kp2.x * iw}\n                y1={kp2.y * ih}\n                x2={midPoint.x * iw}\n                y2={midPoint.y * ih}\n                strokeWidth={2}\n                stroke={landmarks[kp2Id].color}\n              />\n            </g>\n          )\n        })}\n      </g>\n    )\n  },\n \n  pixel: () => null,\n}\n\nexport const WrappedRegionList = memo(\n  ({ regions, keypointDefinitions, iw, ih, fullSegmentationMode }) => {\n    return regions\n      .filter((r) => r.visible !== false)\n      .map((r) => {\n        const Component = RegionComponents[r.type]\n        return (\n          <Component\n            key={r.regionId}\n            region={r}\n            iw={iw}\n            ih={ih}\n            keypointDefinitions={keypointDefinitions}\n            fullSegmentationMode={fullSegmentationMode}\n          />\n        )\n      })\n  },\n  (n, p) => n.regions === p.regions && n.iw === p.iw && n.ih === p.ih\n)\n\nexport const RegionShapes = ({\n  mat,\n  imagePosition,\n  regions = [],\n  keypointDefinitions,\n  fullSegmentationMode,\n}) => {\n  const iw = imagePosition.bottomRight.x - imagePosition.topLeft.x\n  const ih = imagePosition.bottomRight.y - imagePosition.topLeft.y\n  if (isNaN(iw) || isNaN(ih)) return null\n  return (\n    <svg\n      width={iw}\n      height={ih}\n      style={{\n        position: \"absolute\",\n        zIndex: 2,\n        left: imagePosition.topLeft.x,\n        top: imagePosition.topLeft.y,\n        pointerEvents: \"none\",\n        width: iw,\n        height: ih,\n      }}\n    >\n      <WrappedRegionList\n        key=\"wrapped-region-list\"\n        regions={regions}\n        iw={iw}\n        ih={ih}\n        keypointDefinitions={keypointDefinitions}\n        fullSegmentationMode={fullSegmentationMode}\n      />\n    </svg>\n  )\n}\n\nexport default RegionShapes\n"]},"metadata":{},"sourceType":"module"}