{"ast":null,"code":"(function () {\n  \"use strict\";\n\n  function immutableInit(config) {\n    // https://github.com/facebook/react/blob/v15.0.1/src/isomorphic/classic/element/ReactElement.js#L21\n    var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element');\n    var REACT_ELEMENT_TYPE_FALLBACK = 0xeac7;\n    var globalConfig = {\n      use_static: false\n    };\n\n    if (isObject(config)) {\n      if (config.use_static !== undefined) {\n        globalConfig.use_static = Boolean(config.use_static);\n      }\n    }\n\n    function isObject(data) {\n      return typeof data === 'object' && !Array.isArray(data) && data !== null;\n    }\n\n    function instantiateEmptyObject(obj) {\n      var prototype = Object.getPrototypeOf(obj);\n\n      if (!prototype) {\n        return {};\n      } else {\n        return Object.create(prototype);\n      }\n    }\n\n    function addPropertyTo(target, methodName, value) {\n      Object.defineProperty(target, methodName, {\n        enumerable: false,\n        configurable: false,\n        writable: false,\n        value: value\n      });\n    }\n\n    function banProperty(target, methodName) {\n      addPropertyTo(target, methodName, function () {\n        throw new ImmutableError(\"The \" + methodName + \" method cannot be invoked on an Immutable data structure.\");\n      });\n    }\n\n    var immutabilityTag = \"__immutable_invariants_hold\";\n\n    function addImmutabilityTag(target) {\n      addPropertyTo(target, immutabilityTag, true);\n    }\n\n    function isImmutable(target) {\n      if (typeof target === \"object\") {\n        return target === null || Boolean(Object.getOwnPropertyDescriptor(target, immutabilityTag));\n      } else {\n        // In JavaScript, only objects are even potentially mutable.\n        // strings, numbers, null, and undefined are all naturally immutable.\n        return true;\n      }\n    }\n\n    function isEqual(a, b) {\n      // Avoid false positives due to (NaN !== NaN) evaluating to true\n      return a === b || a !== a && b !== b;\n    }\n\n    function isMergableObject(target) {\n      return target !== null && typeof target === \"object\" && !Array.isArray(target) && !(target instanceof Date);\n    }\n\n    var mutatingObjectMethods = [\"setPrototypeOf\"];\n    var nonMutatingObjectMethods = [\"keys\"];\n    var mutatingArrayMethods = mutatingObjectMethods.concat([\"push\", \"pop\", \"sort\", \"splice\", \"shift\", \"unshift\", \"reverse\"]);\n    var nonMutatingArrayMethods = nonMutatingObjectMethods.concat([\"map\", \"filter\", \"slice\", \"concat\", \"reduce\", \"reduceRight\"]);\n    var mutatingDateMethods = mutatingObjectMethods.concat([\"setDate\", \"setFullYear\", \"setHours\", \"setMilliseconds\", \"setMinutes\", \"setMonth\", \"setSeconds\", \"setTime\", \"setUTCDate\", \"setUTCFullYear\", \"setUTCHours\", \"setUTCMilliseconds\", \"setUTCMinutes\", \"setUTCMonth\", \"setUTCSeconds\", \"setYear\"]);\n\n    function ImmutableError(message) {\n      this.name = 'MyError';\n      this.message = message;\n      this.stack = new Error().stack;\n    }\n\n    ImmutableError.prototype = new Error();\n    ImmutableError.prototype.constructor = Error;\n\n    function makeImmutable(obj, bannedMethods) {\n      // Tag it so we can quickly tell it's immutable later.\n      addImmutabilityTag(obj);\n\n      if (\"development\" !== \"production\") {\n        // Make all mutating methods throw exceptions.\n        for (var index in bannedMethods) {\n          if (bannedMethods.hasOwnProperty(index)) {\n            banProperty(obj, bannedMethods[index]);\n          }\n        } // Freeze it and return it.\n\n\n        Object.freeze(obj);\n      }\n\n      return obj;\n    }\n\n    function makeMethodReturnImmutable(obj, methodName) {\n      var currentMethod = obj[methodName];\n      addPropertyTo(obj, methodName, function () {\n        return Immutable(currentMethod.apply(obj, arguments));\n      });\n    }\n\n    function arraySet(idx, value, config) {\n      var deep = config && config.deep;\n\n      if (idx in this) {\n        if (deep && this[idx] !== value && isMergableObject(value) && isMergableObject(this[idx])) {\n          value = Immutable.merge(this[idx], value, {\n            deep: true,\n            mode: 'replace'\n          });\n        }\n\n        if (isEqual(this[idx], value)) {\n          return this;\n        }\n      }\n\n      var mutable = asMutableArray.call(this);\n      mutable[idx] = Immutable(value);\n      return makeImmutableArray(mutable);\n    }\n\n    var immutableEmptyArray = Immutable([]);\n\n    function arraySetIn(pth, value, config) {\n      var head = pth[0];\n\n      if (pth.length === 1) {\n        return arraySet.call(this, head, value, config);\n      } else {\n        var tail = pth.slice(1);\n        var thisHead = this[head];\n        var newValue;\n\n        if (typeof thisHead === \"object\" && thisHead !== null) {\n          // Might (validly) be object or array\n          newValue = Immutable.setIn(thisHead, tail, value);\n        } else {\n          var nextHead = tail[0]; // If the next path part is a number, then we are setting into an array, else an object.\n\n          if (nextHead !== '' && isFinite(nextHead)) {\n            newValue = arraySetIn.call(immutableEmptyArray, tail, value);\n          } else {\n            newValue = objectSetIn.call(immutableEmptyObject, tail, value);\n          }\n        }\n\n        if (head in this && thisHead === newValue) {\n          return this;\n        }\n\n        var mutable = asMutableArray.call(this);\n        mutable[head] = newValue;\n        return makeImmutableArray(mutable);\n      }\n    }\n\n    function makeImmutableArray(array) {\n      // Don't change their implementations, but wrap these functions to make sure\n      // they always return an immutable value.\n      for (var index in nonMutatingArrayMethods) {\n        if (nonMutatingArrayMethods.hasOwnProperty(index)) {\n          var methodName = nonMutatingArrayMethods[index];\n          makeMethodReturnImmutable(array, methodName);\n        }\n      }\n\n      if (!globalConfig.use_static) {\n        addPropertyTo(array, \"flatMap\", flatMap);\n        addPropertyTo(array, \"asObject\", asObject);\n        addPropertyTo(array, \"asMutable\", asMutableArray);\n        addPropertyTo(array, \"set\", arraySet);\n        addPropertyTo(array, \"setIn\", arraySetIn);\n        addPropertyTo(array, \"update\", update);\n        addPropertyTo(array, \"updateIn\", updateIn);\n        addPropertyTo(array, \"getIn\", getIn);\n      }\n\n      for (var i = 0, length = array.length; i < length; i++) {\n        array[i] = Immutable(array[i]);\n      }\n\n      return makeImmutable(array, mutatingArrayMethods);\n    }\n\n    function makeImmutableDate(date) {\n      if (!globalConfig.use_static) {\n        addPropertyTo(date, \"asMutable\", asMutableDate);\n      }\n\n      return makeImmutable(date, mutatingDateMethods);\n    }\n\n    function asMutableDate() {\n      return new Date(this.getTime());\n    }\n    /**\r\n     * Effectively performs a map() over the elements in the array, using the\r\n     * provided iterator, except that whenever the iterator returns an array, that\r\n     * array's elements are added to the final result instead of the array itself.\r\n     *\r\n     * @param {function} iterator - The iterator function that will be invoked on each element in the array. It will receive three arguments: the current value, the current index, and the current object.\r\n     */\n\n\n    function flatMap(iterator) {\n      // Calling .flatMap() with no arguments is a no-op. Don't bother cloning.\n      if (arguments.length === 0) {\n        return this;\n      }\n\n      var result = [],\n          length = this.length,\n          index;\n\n      for (index = 0; index < length; index++) {\n        var iteratorResult = iterator(this[index], index, this);\n\n        if (Array.isArray(iteratorResult)) {\n          // Concatenate Array results into the return value we're building up.\n          result.push.apply(result, iteratorResult);\n        } else {\n          // Handle non-Array results the same way map() does.\n          result.push(iteratorResult);\n        }\n      }\n\n      return makeImmutableArray(result);\n    }\n    /**\r\n     * Returns an Immutable copy of the object without the given keys included.\r\n     *\r\n     * @param {array} keysToRemove - A list of strings representing the keys to exclude in the return value. Instead of providing a single array, this method can also be called by passing multiple strings as separate arguments.\r\n     */\n\n\n    function without(remove) {\n      // Calling .without() with no arguments is a no-op. Don't bother cloning.\n      if (typeof remove === \"undefined\" && arguments.length === 0) {\n        return this;\n      }\n\n      if (typeof remove !== \"function\") {\n        // If we weren't given an array, use the arguments list.\n        var keysToRemoveArray = Array.isArray(remove) ? remove.slice() : Array.prototype.slice.call(arguments); // Convert numeric keys to strings since that's how they'll\n        // come from the enumeration of the object.\n\n        keysToRemoveArray.forEach(function (el, idx, arr) {\n          if (typeof el === \"number\") {\n            arr[idx] = el.toString();\n          }\n        });\n\n        remove = function remove(val, key) {\n          return keysToRemoveArray.indexOf(key) !== -1;\n        };\n      }\n\n      var result = instantiateEmptyObject(this);\n\n      for (var key in this) {\n        if (this.hasOwnProperty(key) && remove(this[key], key) === false) {\n          result[key] = this[key];\n        }\n      }\n\n      return makeImmutableObject(result);\n    }\n\n    function asMutableArray(opts) {\n      var result = [],\n          i,\n          length;\n\n      if (opts && opts.deep) {\n        for (i = 0, length = this.length; i < length; i++) {\n          result.push(asDeepMutable(this[i]));\n        }\n      } else {\n        for (i = 0, length = this.length; i < length; i++) {\n          result.push(this[i]);\n        }\n      }\n\n      return result;\n    }\n    /**\r\n     * Effectively performs a [map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) over the elements in the array, expecting that the iterator function\r\n     * will return an array of two elements - the first representing a key, the other\r\n     * a value. Then returns an Immutable Object constructed of those keys and values.\r\n     *\r\n     * @param {function} iterator - A function which should return an array of two elements - the first representing the desired key, the other the desired value.\r\n     */\n\n\n    function asObject(iterator) {\n      // If no iterator was provided, assume the identity function\n      // (suggesting this array is already a list of key/value pairs.)\n      if (typeof iterator !== \"function\") {\n        iterator = function iterator(value) {\n          return value;\n        };\n      }\n\n      var result = {},\n          length = this.length,\n          index;\n\n      for (index = 0; index < length; index++) {\n        var pair = iterator(this[index], index, this),\n            key = pair[0],\n            value = pair[1];\n        result[key] = value;\n      }\n\n      return makeImmutableObject(result);\n    }\n\n    function asDeepMutable(obj) {\n      if (!obj || typeof obj !== 'object' || !Object.getOwnPropertyDescriptor(obj, immutabilityTag) || obj instanceof Date) {\n        return obj;\n      }\n\n      return Immutable.asMutable(obj, {\n        deep: true\n      });\n    }\n\n    function quickCopy(src, dest) {\n      for (var key in src) {\n        if (Object.getOwnPropertyDescriptor(src, key)) {\n          dest[key] = src[key];\n        }\n      }\n\n      return dest;\n    }\n    /**\r\n     * Returns an Immutable Object containing the properties and values of both\r\n     * this object and the provided object, prioritizing the provided object's\r\n     * values whenever the same key is present in both objects.\r\n     *\r\n     * @param {object} other - The other object to merge. Multiple objects can be passed as an array. In such a case, the later an object appears in that list, the higher its priority.\r\n     * @param {object} config - Optional config object that contains settings. Supported settings are: {deep: true} for deep merge and {merger: mergerFunc} where mergerFunc is a function\r\n     *                          that takes a property from both objects. If anything is returned it overrides the normal merge behaviour.\r\n     */\n\n\n    function merge(other, config) {\n      // Calling .merge() with no arguments is a no-op. Don't bother cloning.\n      if (arguments.length === 0) {\n        return this;\n      }\n\n      if (other === null || typeof other !== \"object\") {\n        throw new TypeError(\"Immutable#merge can only be invoked with objects or arrays, not \" + JSON.stringify(other));\n      }\n\n      var receivedArray = Array.isArray(other),\n          deep = config && config.deep,\n          mode = config && config.mode || 'merge',\n          merger = config && config.merger,\n          result; // Use the given key to extract a value from the given object, then place\n      // that value in the result object under the same key. If that resulted\n      // in a change from this object's value at that key, set anyChanges = true.\n\n      function addToResult(currentObj, otherObj, key) {\n        var immutableValue = Immutable(otherObj[key]);\n        var mergerResult = merger && merger(currentObj[key], immutableValue, config);\n        var currentValue = currentObj[key];\n\n        if (result !== undefined || mergerResult !== undefined || !currentObj.hasOwnProperty(key) || !isEqual(immutableValue, currentValue)) {\n          var newValue;\n\n          if (mergerResult !== undefined) {\n            newValue = mergerResult;\n          } else if (deep && isMergableObject(currentValue) && isMergableObject(immutableValue)) {\n            newValue = Immutable.merge(currentValue, immutableValue, config);\n          } else {\n            newValue = immutableValue;\n          }\n\n          if (!isEqual(currentValue, newValue) || !currentObj.hasOwnProperty(key)) {\n            if (result === undefined) {\n              // Make a shallow clone of the current object.\n              result = quickCopy(currentObj, instantiateEmptyObject(currentObj));\n            }\n\n            result[key] = newValue;\n          }\n        }\n      }\n\n      function clearDroppedKeys(currentObj, otherObj) {\n        for (var key in currentObj) {\n          if (!otherObj.hasOwnProperty(key)) {\n            if (result === undefined) {\n              // Make a shallow clone of the current object.\n              result = quickCopy(currentObj, instantiateEmptyObject(currentObj));\n            }\n\n            delete result[key];\n          }\n        }\n      }\n\n      var key; // Achieve prioritization by overriding previous values that get in the way.\n\n      if (!receivedArray) {\n        // The most common use case: just merge one object into the existing one.\n        for (key in other) {\n          if (Object.getOwnPropertyDescriptor(other, key)) {\n            addToResult(this, other, key);\n          }\n        }\n\n        if (mode === 'replace') {\n          clearDroppedKeys(this, other);\n        }\n      } else {\n        // We also accept an Array\n        for (var index = 0, length = other.length; index < length; index++) {\n          var otherFromArray = other[index];\n\n          for (key in otherFromArray) {\n            if (otherFromArray.hasOwnProperty(key)) {\n              addToResult(result !== undefined ? result : this, otherFromArray, key);\n            }\n          }\n        }\n      }\n\n      if (result === undefined) {\n        return this;\n      } else {\n        return makeImmutableObject(result);\n      }\n    }\n\n    function objectReplace(value, config) {\n      var deep = config && config.deep; // Calling .replace() with no arguments is a no-op. Don't bother cloning.\n\n      if (arguments.length === 0) {\n        return this;\n      }\n\n      if (value === null || typeof value !== \"object\") {\n        throw new TypeError(\"Immutable#replace can only be invoked with objects or arrays, not \" + JSON.stringify(value));\n      }\n\n      return Immutable.merge(this, value, {\n        deep: deep,\n        mode: 'replace'\n      });\n    }\n\n    var immutableEmptyObject = Immutable({});\n\n    function objectSetIn(path, value, config) {\n      if (!Array.isArray(path) || path.length === 0) {\n        throw new TypeError(\"The first argument to Immutable#setIn must be an array containing at least one \\\"key\\\" string.\");\n      }\n\n      var head = path[0];\n\n      if (path.length === 1) {\n        return objectSet.call(this, head, value, config);\n      }\n\n      var tail = path.slice(1);\n      var newValue;\n      var thisHead = this[head];\n\n      if (this.hasOwnProperty(head) && typeof thisHead === \"object\" && thisHead !== null) {\n        // Might (validly) be object or array\n        newValue = Immutable.setIn(thisHead, tail, value);\n      } else {\n        newValue = objectSetIn.call(immutableEmptyObject, tail, value);\n      }\n\n      if (this.hasOwnProperty(head) && thisHead === newValue) {\n        return this;\n      }\n\n      var mutable = quickCopy(this, instantiateEmptyObject(this));\n      mutable[head] = newValue;\n      return makeImmutableObject(mutable);\n    }\n\n    function objectSet(property, value, config) {\n      var deep = config && config.deep;\n\n      if (this.hasOwnProperty(property)) {\n        if (deep && this[property] !== value && isMergableObject(value) && isMergableObject(this[property])) {\n          value = Immutable.merge(this[property], value, {\n            deep: true,\n            mode: 'replace'\n          });\n        }\n\n        if (isEqual(this[property], value)) {\n          return this;\n        }\n      }\n\n      var mutable = quickCopy(this, instantiateEmptyObject(this));\n      mutable[property] = Immutable(value);\n      return makeImmutableObject(mutable);\n    }\n\n    function update(property, updater) {\n      var restArgs = Array.prototype.slice.call(arguments, 2);\n      var initialVal = this[property];\n      return Immutable.set(this, property, updater.apply(initialVal, [initialVal].concat(restArgs)));\n    }\n\n    function getInPath(obj, path) {\n      /*jshint eqnull:true */\n      for (var i = 0, l = path.length; obj != null && i < l; i++) {\n        obj = obj[path[i]];\n      }\n\n      return i && i == l ? obj : undefined;\n    }\n\n    function updateIn(path, updater) {\n      var restArgs = Array.prototype.slice.call(arguments, 2);\n      var initialVal = getInPath(this, path);\n      return Immutable.setIn(this, path, updater.apply(initialVal, [initialVal].concat(restArgs)));\n    }\n\n    function getIn(path, defaultValue) {\n      var value = getInPath(this, path);\n      return value === undefined ? defaultValue : value;\n    }\n\n    function asMutableObject(opts) {\n      var result = instantiateEmptyObject(this),\n          key;\n\n      if (opts && opts.deep) {\n        for (key in this) {\n          if (this.hasOwnProperty(key)) {\n            result[key] = asDeepMutable(this[key]);\n          }\n        }\n      } else {\n        for (key in this) {\n          if (this.hasOwnProperty(key)) {\n            result[key] = this[key];\n          }\n        }\n      }\n\n      return result;\n    } // Creates plain object to be used for cloning\n\n\n    function instantiatePlainObject() {\n      return {};\n    } // Finalizes an object with immutable methods, freezes it, and returns it.\n\n\n    function makeImmutableObject(obj) {\n      if (!globalConfig.use_static) {\n        addPropertyTo(obj, \"merge\", merge);\n        addPropertyTo(obj, \"replace\", objectReplace);\n        addPropertyTo(obj, \"without\", without);\n        addPropertyTo(obj, \"asMutable\", asMutableObject);\n        addPropertyTo(obj, \"set\", objectSet);\n        addPropertyTo(obj, \"setIn\", objectSetIn);\n        addPropertyTo(obj, \"update\", update);\n        addPropertyTo(obj, \"updateIn\", updateIn);\n        addPropertyTo(obj, \"getIn\", getIn);\n      }\n\n      return makeImmutable(obj, mutatingObjectMethods);\n    } // Returns true if object is a valid react element\n    // https://github.com/facebook/react/blob/v15.0.1/src/isomorphic/classic/element/ReactElement.js#L326\n\n\n    function isReactElement(obj) {\n      return typeof obj === 'object' && obj !== null && (obj.$$typeof === REACT_ELEMENT_TYPE_FALLBACK || obj.$$typeof === REACT_ELEMENT_TYPE);\n    }\n\n    function isFileObject(obj) {\n      return typeof File !== 'undefined' && obj instanceof File;\n    }\n\n    function isBlobObject(obj) {\n      return typeof Blob !== 'undefined' && obj instanceof Blob;\n    }\n\n    function isPromise(obj) {\n      return typeof obj === 'object' && typeof obj.then === 'function';\n    }\n\n    function isError(obj) {\n      return obj instanceof Error;\n    }\n\n    function Immutable(obj, options, stackRemaining) {\n      if (isImmutable(obj) || isReactElement(obj) || isFileObject(obj) || isBlobObject(obj) || isError(obj)) {\n        return obj;\n      } else if (isPromise(obj)) {\n        return obj.then(Immutable);\n      } else if (Array.isArray(obj)) {\n        return makeImmutableArray(obj.slice());\n      } else if (obj instanceof Date) {\n        return makeImmutableDate(new Date(obj.getTime()));\n      } else {\n        // Don't freeze the object we were given; make a clone and use that.\n        var prototype = options && options.prototype;\n        var instantiateEmptyObject = !prototype || prototype === Object.prototype ? instantiatePlainObject : function () {\n          return Object.create(prototype);\n        };\n        var clone = instantiateEmptyObject();\n\n        if (\"development\" !== \"production\") {\n          /*jshint eqnull:true */\n          if (stackRemaining == null) {\n            stackRemaining = 64;\n          }\n\n          if (stackRemaining <= 0) {\n            throw new ImmutableError(\"Attempt to construct Immutable from a deeply nested object was detected.\" + \" Have you tried to wrap an object with circular references (e.g. React element)?\" + \" See https://github.com/rtfeldman/seamless-immutable/wiki/Deeply-nested-object-was-detected for details.\");\n          }\n\n          stackRemaining -= 1;\n        }\n\n        for (var key in obj) {\n          if (Object.getOwnPropertyDescriptor(obj, key)) {\n            clone[key] = Immutable(obj[key], undefined, stackRemaining);\n          }\n        }\n\n        return makeImmutableObject(clone);\n      }\n    } // Wrapper to allow the use of object methods as static methods of Immutable.\n\n\n    function toStatic(fn) {\n      function staticWrapper() {\n        var args = [].slice.call(arguments);\n        var self = args.shift();\n        return fn.apply(self, args);\n      }\n\n      return staticWrapper;\n    } // Wrapper to allow the use of object methods as static methods of Immutable.\n    // with the additional condition of choosing which function to call depending\n    // if argument is an array or an object.\n\n\n    function toStaticObjectOrArray(fnObject, fnArray) {\n      function staticWrapper() {\n        var args = [].slice.call(arguments);\n        var self = args.shift();\n\n        if (Array.isArray(self)) {\n          return fnArray.apply(self, args);\n        } else {\n          return fnObject.apply(self, args);\n        }\n      }\n\n      return staticWrapper;\n    } // Wrapper to allow the use of object methods as static methods of Immutable.\n    // with the additional condition of choosing which function to call depending\n    // if argument is an array or an object or a date.\n\n\n    function toStaticObjectOrDateOrArray(fnObject, fnArray, fnDate) {\n      function staticWrapper() {\n        var args = [].slice.call(arguments);\n        var self = args.shift();\n\n        if (Array.isArray(self)) {\n          return fnArray.apply(self, args);\n        } else if (self instanceof Date) {\n          return fnDate.apply(self, args);\n        } else {\n          return fnObject.apply(self, args);\n        }\n      }\n\n      return staticWrapper;\n    } // Export the library\n\n\n    Immutable.from = Immutable;\n    Immutable.isImmutable = isImmutable;\n    Immutable.ImmutableError = ImmutableError;\n    Immutable.merge = toStatic(merge);\n    Immutable.replace = toStatic(objectReplace);\n    Immutable.without = toStatic(without);\n    Immutable.asMutable = toStaticObjectOrDateOrArray(asMutableObject, asMutableArray, asMutableDate);\n    Immutable.set = toStaticObjectOrArray(objectSet, arraySet);\n    Immutable.setIn = toStaticObjectOrArray(objectSetIn, arraySetIn);\n    Immutable.update = toStatic(update);\n    Immutable.updateIn = toStatic(updateIn);\n    Immutable.getIn = toStatic(getIn);\n    Immutable.flatMap = toStatic(flatMap);\n    Immutable.asObject = toStatic(asObject);\n\n    if (!globalConfig.use_static) {\n      Immutable.static = immutableInit({\n        use_static: true\n      });\n    }\n\n    Object.freeze(Immutable);\n    return Immutable;\n  }\n\n  var Immutable = immutableInit();\n  /* istanbul ignore if */\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return Immutable;\n    });\n  } else if (typeof module === \"object\") {\n    module.exports = Immutable;\n  } else if (typeof exports === \"object\") {\n    exports.Immutable = Immutable;\n  } else if (typeof window === \"object\") {\n    window.Immutable = Immutable;\n  } else if (typeof global === \"object\") {\n    global.Immutable = Immutable;\n  }\n})();","map":{"version":3,"sources":["D:/GitHub/ML4GIS/client/node_modules/seamless-immutable/seamless-immutable.development.js"],"names":["immutableInit","config","REACT_ELEMENT_TYPE","Symbol","for","REACT_ELEMENT_TYPE_FALLBACK","globalConfig","use_static","isObject","undefined","Boolean","data","Array","isArray","instantiateEmptyObject","obj","prototype","Object","getPrototypeOf","create","addPropertyTo","target","methodName","value","defineProperty","enumerable","configurable","writable","banProperty","ImmutableError","immutabilityTag","addImmutabilityTag","isImmutable","getOwnPropertyDescriptor","isEqual","a","b","isMergableObject","Date","mutatingObjectMethods","nonMutatingObjectMethods","mutatingArrayMethods","concat","nonMutatingArrayMethods","mutatingDateMethods","message","name","stack","Error","constructor","makeImmutable","bannedMethods","index","hasOwnProperty","freeze","makeMethodReturnImmutable","currentMethod","Immutable","apply","arguments","arraySet","idx","deep","merge","mode","mutable","asMutableArray","call","makeImmutableArray","immutableEmptyArray","arraySetIn","pth","head","length","tail","slice","thisHead","newValue","setIn","nextHead","isFinite","objectSetIn","immutableEmptyObject","array","flatMap","asObject","update","updateIn","getIn","i","makeImmutableDate","date","asMutableDate","getTime","iterator","result","iteratorResult","push","without","remove","keysToRemoveArray","forEach","el","arr","toString","val","key","indexOf","makeImmutableObject","opts","asDeepMutable","pair","asMutable","quickCopy","src","dest","other","TypeError","JSON","stringify","receivedArray","merger","addToResult","currentObj","otherObj","immutableValue","mergerResult","currentValue","clearDroppedKeys","otherFromArray","objectReplace","path","objectSet","property","updater","restArgs","initialVal","set","getInPath","l","defaultValue","asMutableObject","instantiatePlainObject","isReactElement","$$typeof","isFileObject","File","isBlobObject","Blob","isPromise","then","isError","options","stackRemaining","clone","toStatic","fn","staticWrapper","args","self","shift","toStaticObjectOrArray","fnObject","fnArray","toStaticObjectOrDateOrArray","fnDate","from","replace","static","define","amd","module","exports","window","global"],"mappings":"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","sourcesContent":["(function() {\r\n  \"use strict\";\r\n\r\nfunction immutableInit(config) {\r\n\r\n  // https://github.com/facebook/react/blob/v15.0.1/src/isomorphic/classic/element/ReactElement.js#L21\r\n  var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element');\r\n  var REACT_ELEMENT_TYPE_FALLBACK = 0xeac7;\r\n\r\n  var globalConfig = {\r\n    use_static: false\r\n  };\r\n  if (isObject(config)) {\r\n      if (config.use_static !== undefined) {\r\n          globalConfig.use_static = Boolean(config.use_static);\r\n      }\r\n  }\r\n\r\n  function isObject(data) {\r\n    return (\r\n      typeof data === 'object' &&\r\n      !Array.isArray(data) &&\r\n      data !== null\r\n    );\r\n  }\r\n\r\n  function instantiateEmptyObject(obj) {\r\n      var prototype = Object.getPrototypeOf(obj);\r\n      if (!prototype) {\r\n          return {};\r\n      } else {\r\n          return Object.create(prototype);\r\n      }\r\n  }\r\n\r\n  function addPropertyTo(target, methodName, value) {\r\n    Object.defineProperty(target, methodName, {\r\n      enumerable: false,\r\n      configurable: false,\r\n      writable: false,\r\n      value: value\r\n    });\r\n  }\r\n\r\n  function banProperty(target, methodName) {\r\n    addPropertyTo(target, methodName, function() {\r\n      throw new ImmutableError(\"The \" + methodName +\r\n        \" method cannot be invoked on an Immutable data structure.\");\r\n    });\r\n  }\r\n\r\n  var immutabilityTag = \"__immutable_invariants_hold\";\r\n\r\n  function addImmutabilityTag(target) {\r\n    addPropertyTo(target, immutabilityTag, true);\r\n  }\r\n\r\n  function isImmutable(target) {\r\n    if (typeof target === \"object\") {\r\n      return target === null || Boolean(\r\n        Object.getOwnPropertyDescriptor(target, immutabilityTag)\r\n      );\r\n    } else {\r\n      // In JavaScript, only objects are even potentially mutable.\r\n      // strings, numbers, null, and undefined are all naturally immutable.\r\n      return true;\r\n    }\r\n  }\r\n\r\n  function isEqual(a, b) {\r\n    // Avoid false positives due to (NaN !== NaN) evaluating to true\r\n    return (a === b || (a !== a && b !== b));\r\n  }\r\n\r\n  function isMergableObject(target) {\r\n    return target !== null && typeof target === \"object\" && !(Array.isArray(target)) && !(target instanceof Date);\r\n  }\r\n\r\n  var mutatingObjectMethods = [\r\n    \"setPrototypeOf\"\r\n  ];\r\n\r\n  var nonMutatingObjectMethods = [\r\n    \"keys\"\r\n  ];\r\n\r\n  var mutatingArrayMethods = mutatingObjectMethods.concat([\r\n    \"push\", \"pop\", \"sort\", \"splice\", \"shift\", \"unshift\", \"reverse\"\r\n  ]);\r\n\r\n  var nonMutatingArrayMethods = nonMutatingObjectMethods.concat([\r\n    \"map\", \"filter\", \"slice\", \"concat\", \"reduce\", \"reduceRight\"\r\n  ]);\r\n\r\n  var mutatingDateMethods = mutatingObjectMethods.concat([\r\n    \"setDate\", \"setFullYear\", \"setHours\", \"setMilliseconds\", \"setMinutes\", \"setMonth\", \"setSeconds\",\r\n    \"setTime\", \"setUTCDate\", \"setUTCFullYear\", \"setUTCHours\", \"setUTCMilliseconds\", \"setUTCMinutes\",\r\n    \"setUTCMonth\", \"setUTCSeconds\", \"setYear\"\r\n  ]);\r\n\r\n  function ImmutableError(message) {\r\n    this.name = 'MyError';\r\n    this.message = message;\r\n    this.stack = (new Error()).stack;\r\n  }\r\n  ImmutableError.prototype = new Error();\r\n  ImmutableError.prototype.constructor = Error;\r\n\r\n  function makeImmutable(obj, bannedMethods) {\r\n    // Tag it so we can quickly tell it's immutable later.\r\n    addImmutabilityTag(obj);\r\n\r\n    if (\"development\" !== \"production\") {\r\n      // Make all mutating methods throw exceptions.\r\n      for (var index in bannedMethods) {\r\n        if (bannedMethods.hasOwnProperty(index)) {\r\n          banProperty(obj, bannedMethods[index]);\r\n        }\r\n      }\r\n\r\n      // Freeze it and return it.\r\n      Object.freeze(obj);\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  function makeMethodReturnImmutable(obj, methodName) {\r\n    var currentMethod = obj[methodName];\r\n\r\n    addPropertyTo(obj, methodName, function() {\r\n      return Immutable(currentMethod.apply(obj, arguments));\r\n    });\r\n  }\r\n\r\n  function arraySet(idx, value, config) {\r\n    var deep          = config && config.deep;\r\n\r\n    if (idx in this) {\r\n      if (deep && this[idx] !== value && isMergableObject(value) && isMergableObject(this[idx])) {\r\n        value = Immutable.merge(this[idx], value, {deep: true, mode: 'replace'});\r\n      }\r\n      if (isEqual(this[idx], value)) {\r\n        return this;\r\n      }\r\n    }\r\n\r\n    var mutable = asMutableArray.call(this);\r\n    mutable[idx] = Immutable(value);\r\n    return makeImmutableArray(mutable);\r\n  }\r\n\r\n  var immutableEmptyArray = Immutable([]);\r\n\r\n  function arraySetIn(pth, value, config) {\r\n    var head = pth[0];\r\n\r\n    if (pth.length === 1) {\r\n      return arraySet.call(this, head, value, config);\r\n    } else {\r\n      var tail = pth.slice(1);\r\n      var thisHead = this[head];\r\n      var newValue;\r\n\r\n      if (typeof(thisHead) === \"object\" && thisHead !== null) {\r\n        // Might (validly) be object or array\r\n        newValue = Immutable.setIn(thisHead, tail, value);\r\n      } else {\r\n        var nextHead = tail[0];\r\n        // If the next path part is a number, then we are setting into an array, else an object.\r\n        if (nextHead !== '' && isFinite(nextHead)) {\r\n          newValue = arraySetIn.call(immutableEmptyArray, tail, value);\r\n        } else {\r\n          newValue = objectSetIn.call(immutableEmptyObject, tail, value);\r\n        }\r\n      }\r\n\r\n      if (head in this && thisHead === newValue) {\r\n        return this;\r\n      }\r\n\r\n      var mutable = asMutableArray.call(this);\r\n      mutable[head] = newValue;\r\n      return makeImmutableArray(mutable);\r\n    }\r\n  }\r\n\r\n  function makeImmutableArray(array) {\r\n    // Don't change their implementations, but wrap these functions to make sure\r\n    // they always return an immutable value.\r\n    for (var index in nonMutatingArrayMethods) {\r\n      if (nonMutatingArrayMethods.hasOwnProperty(index)) {\r\n        var methodName = nonMutatingArrayMethods[index];\r\n        makeMethodReturnImmutable(array, methodName);\r\n      }\r\n    }\r\n\r\n    if (!globalConfig.use_static) {\r\n      addPropertyTo(array, \"flatMap\",  flatMap);\r\n      addPropertyTo(array, \"asObject\", asObject);\r\n      addPropertyTo(array, \"asMutable\", asMutableArray);\r\n      addPropertyTo(array, \"set\", arraySet);\r\n      addPropertyTo(array, \"setIn\", arraySetIn);\r\n      addPropertyTo(array, \"update\", update);\r\n      addPropertyTo(array, \"updateIn\", updateIn);\r\n      addPropertyTo(array, \"getIn\", getIn);\r\n    }\r\n\r\n    for(var i = 0, length = array.length; i < length; i++) {\r\n      array[i] = Immutable(array[i]);\r\n    }\r\n\r\n    return makeImmutable(array, mutatingArrayMethods);\r\n  }\r\n\r\n  function makeImmutableDate(date) {\r\n    if (!globalConfig.use_static) {\r\n      addPropertyTo(date, \"asMutable\", asMutableDate);\r\n    }\r\n\r\n    return makeImmutable(date, mutatingDateMethods);\r\n  }\r\n\r\n  function asMutableDate() {\r\n    return new Date(this.getTime());\r\n  }\r\n\r\n  /**\r\n   * Effectively performs a map() over the elements in the array, using the\r\n   * provided iterator, except that whenever the iterator returns an array, that\r\n   * array's elements are added to the final result instead of the array itself.\r\n   *\r\n   * @param {function} iterator - The iterator function that will be invoked on each element in the array. It will receive three arguments: the current value, the current index, and the current object.\r\n   */\r\n  function flatMap(iterator) {\r\n    // Calling .flatMap() with no arguments is a no-op. Don't bother cloning.\r\n    if (arguments.length === 0) {\r\n      return this;\r\n    }\r\n\r\n    var result = [],\r\n        length = this.length,\r\n        index;\r\n\r\n    for (index = 0; index < length; index++) {\r\n      var iteratorResult = iterator(this[index], index, this);\r\n\r\n      if (Array.isArray(iteratorResult)) {\r\n        // Concatenate Array results into the return value we're building up.\r\n        result.push.apply(result, iteratorResult);\r\n      } else {\r\n        // Handle non-Array results the same way map() does.\r\n        result.push(iteratorResult);\r\n      }\r\n    }\r\n\r\n    return makeImmutableArray(result);\r\n  }\r\n\r\n  /**\r\n   * Returns an Immutable copy of the object without the given keys included.\r\n   *\r\n   * @param {array} keysToRemove - A list of strings representing the keys to exclude in the return value. Instead of providing a single array, this method can also be called by passing multiple strings as separate arguments.\r\n   */\r\n  function without(remove) {\r\n    // Calling .without() with no arguments is a no-op. Don't bother cloning.\r\n    if (typeof remove === \"undefined\" && arguments.length === 0) {\r\n      return this;\r\n    }\r\n\r\n    if (typeof remove !== \"function\") {\r\n      // If we weren't given an array, use the arguments list.\r\n      var keysToRemoveArray = (Array.isArray(remove)) ?\r\n         remove.slice() : Array.prototype.slice.call(arguments);\r\n\r\n      // Convert numeric keys to strings since that's how they'll\r\n      // come from the enumeration of the object.\r\n      keysToRemoveArray.forEach(function(el, idx, arr) {\r\n        if(typeof(el) === \"number\") {\r\n          arr[idx] = el.toString();\r\n        }\r\n      });\r\n\r\n      remove = function(val, key) {\r\n        return keysToRemoveArray.indexOf(key) !== -1;\r\n      };\r\n    }\r\n\r\n    var result = instantiateEmptyObject(this);\r\n\r\n    for (var key in this) {\r\n      if (this.hasOwnProperty(key) && remove(this[key], key) === false) {\r\n        result[key] = this[key];\r\n      }\r\n    }\r\n\r\n    return makeImmutableObject(result);\r\n  }\r\n\r\n  function asMutableArray(opts) {\r\n    var result = [], i, length;\r\n\r\n    if(opts && opts.deep) {\r\n      for(i = 0, length = this.length; i < length; i++) {\r\n        result.push(asDeepMutable(this[i]));\r\n      }\r\n    } else {\r\n      for(i = 0, length = this.length; i < length; i++) {\r\n        result.push(this[i]);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Effectively performs a [map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) over the elements in the array, expecting that the iterator function\r\n   * will return an array of two elements - the first representing a key, the other\r\n   * a value. Then returns an Immutable Object constructed of those keys and values.\r\n   *\r\n   * @param {function} iterator - A function which should return an array of two elements - the first representing the desired key, the other the desired value.\r\n   */\r\n  function asObject(iterator) {\r\n    // If no iterator was provided, assume the identity function\r\n    // (suggesting this array is already a list of key/value pairs.)\r\n    if (typeof iterator !== \"function\") {\r\n      iterator = function(value) { return value; };\r\n    }\r\n\r\n    var result = {},\r\n        length = this.length,\r\n        index;\r\n\r\n    for (index = 0; index < length; index++) {\r\n      var pair  = iterator(this[index], index, this),\r\n          key   = pair[0],\r\n          value = pair[1];\r\n\r\n      result[key] = value;\r\n    }\r\n\r\n    return makeImmutableObject(result);\r\n  }\r\n\r\n  function asDeepMutable(obj) {\r\n    if (\r\n      (!obj) ||\r\n      (typeof obj !== 'object') ||\r\n      (!Object.getOwnPropertyDescriptor(obj, immutabilityTag)) ||\r\n      (obj instanceof Date)\r\n    ) { return obj; }\r\n    return Immutable.asMutable(obj, {deep: true});\r\n  }\r\n\r\n  function quickCopy(src, dest) {\r\n    for (var key in src) {\r\n      if (Object.getOwnPropertyDescriptor(src, key)) {\r\n        dest[key] = src[key];\r\n      }\r\n    }\r\n\r\n    return dest;\r\n  }\r\n\r\n  /**\r\n   * Returns an Immutable Object containing the properties and values of both\r\n   * this object and the provided object, prioritizing the provided object's\r\n   * values whenever the same key is present in both objects.\r\n   *\r\n   * @param {object} other - The other object to merge. Multiple objects can be passed as an array. In such a case, the later an object appears in that list, the higher its priority.\r\n   * @param {object} config - Optional config object that contains settings. Supported settings are: {deep: true} for deep merge and {merger: mergerFunc} where mergerFunc is a function\r\n   *                          that takes a property from both objects. If anything is returned it overrides the normal merge behaviour.\r\n   */\r\n  function merge(other, config) {\r\n    // Calling .merge() with no arguments is a no-op. Don't bother cloning.\r\n    if (arguments.length === 0) {\r\n      return this;\r\n    }\r\n\r\n    if (other === null || (typeof other !== \"object\")) {\r\n      throw new TypeError(\"Immutable#merge can only be invoked with objects or arrays, not \" + JSON.stringify(other));\r\n    }\r\n\r\n    var receivedArray = (Array.isArray(other)),\r\n        deep          = config && config.deep,\r\n        mode          = config && config.mode || 'merge',\r\n        merger        = config && config.merger,\r\n        result;\r\n\r\n    // Use the given key to extract a value from the given object, then place\r\n    // that value in the result object under the same key. If that resulted\r\n    // in a change from this object's value at that key, set anyChanges = true.\r\n    function addToResult(currentObj, otherObj, key) {\r\n      var immutableValue = Immutable(otherObj[key]);\r\n      var mergerResult = merger && merger(currentObj[key], immutableValue, config);\r\n      var currentValue = currentObj[key];\r\n\r\n      if ((result !== undefined) ||\r\n        (mergerResult !== undefined) ||\r\n        (!currentObj.hasOwnProperty(key)) ||\r\n        !isEqual(immutableValue, currentValue)) {\r\n\r\n        var newValue;\r\n\r\n        if (mergerResult !== undefined) {\r\n          newValue = mergerResult;\r\n        } else if (deep && isMergableObject(currentValue) && isMergableObject(immutableValue)) {\r\n          newValue = Immutable.merge(currentValue, immutableValue, config);\r\n        } else {\r\n          newValue = immutableValue;\r\n        }\r\n\r\n        if (!isEqual(currentValue, newValue) || !currentObj.hasOwnProperty(key)) {\r\n          if (result === undefined) {\r\n            // Make a shallow clone of the current object.\r\n            result = quickCopy(currentObj, instantiateEmptyObject(currentObj));\r\n          }\r\n\r\n          result[key] = newValue;\r\n        }\r\n      }\r\n    }\r\n\r\n    function clearDroppedKeys(currentObj, otherObj) {\r\n      for (var key in currentObj) {\r\n        if (!otherObj.hasOwnProperty(key)) {\r\n          if (result === undefined) {\r\n            // Make a shallow clone of the current object.\r\n            result = quickCopy(currentObj, instantiateEmptyObject(currentObj));\r\n          }\r\n          delete result[key];\r\n        }\r\n      }\r\n    }\r\n\r\n    var key;\r\n\r\n    // Achieve prioritization by overriding previous values that get in the way.\r\n    if (!receivedArray) {\r\n      // The most common use case: just merge one object into the existing one.\r\n      for (key in other) {\r\n        if (Object.getOwnPropertyDescriptor(other, key)) {\r\n          addToResult(this, other, key);\r\n        }\r\n      }\r\n      if (mode === 'replace') {\r\n        clearDroppedKeys(this, other);\r\n      }\r\n    } else {\r\n      // We also accept an Array\r\n      for (var index = 0, length = other.length; index < length; index++) {\r\n        var otherFromArray = other[index];\r\n\r\n        for (key in otherFromArray) {\r\n          if (otherFromArray.hasOwnProperty(key)) {\r\n            addToResult(result !== undefined ? result : this, otherFromArray, key);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (result === undefined) {\r\n      return this;\r\n    } else {\r\n      return makeImmutableObject(result);\r\n    }\r\n  }\r\n\r\n  function objectReplace(value, config) {\r\n    var deep          = config && config.deep;\r\n\r\n    // Calling .replace() with no arguments is a no-op. Don't bother cloning.\r\n    if (arguments.length === 0) {\r\n      return this;\r\n    }\r\n\r\n    if (value === null || typeof value !== \"object\") {\r\n      throw new TypeError(\"Immutable#replace can only be invoked with objects or arrays, not \" + JSON.stringify(value));\r\n    }\r\n\r\n    return Immutable.merge(this, value, {deep: deep, mode: 'replace'});\r\n  }\r\n\r\n  var immutableEmptyObject = Immutable({});\r\n\r\n  function objectSetIn(path, value, config) {\r\n    if (!(Array.isArray(path)) || path.length === 0) {\r\n      throw new TypeError(\"The first argument to Immutable#setIn must be an array containing at least one \\\"key\\\" string.\");\r\n    }\r\n\r\n    var head = path[0];\r\n    if (path.length === 1) {\r\n      return objectSet.call(this, head, value, config);\r\n    }\r\n\r\n    var tail = path.slice(1);\r\n    var newValue;\r\n    var thisHead = this[head];\r\n\r\n    if (this.hasOwnProperty(head) && typeof(thisHead) === \"object\" && thisHead !== null) {\r\n      // Might (validly) be object or array\r\n      newValue = Immutable.setIn(thisHead, tail, value);\r\n    } else {\r\n      newValue = objectSetIn.call(immutableEmptyObject, tail, value);\r\n    }\r\n\r\n    if (this.hasOwnProperty(head) && thisHead === newValue) {\r\n      return this;\r\n    }\r\n\r\n    var mutable = quickCopy(this, instantiateEmptyObject(this));\r\n    mutable[head] = newValue;\r\n    return makeImmutableObject(mutable);\r\n  }\r\n\r\n  function objectSet(property, value, config) {\r\n    var deep          = config && config.deep;\r\n\r\n    if (this.hasOwnProperty(property)) {\r\n      if (deep && this[property] !== value && isMergableObject(value) && isMergableObject(this[property])) {\r\n        value = Immutable.merge(this[property], value, {deep: true, mode: 'replace'});\r\n      }\r\n      if (isEqual(this[property], value)) {\r\n        return this;\r\n      }\r\n    }\r\n\r\n    var mutable = quickCopy(this, instantiateEmptyObject(this));\r\n    mutable[property] = Immutable(value);\r\n    return makeImmutableObject(mutable);\r\n  }\r\n\r\n  function update(property, updater) {\r\n    var restArgs = Array.prototype.slice.call(arguments, 2);\r\n    var initialVal = this[property];\r\n    return Immutable.set(this, property, updater.apply(initialVal, [initialVal].concat(restArgs)));\r\n  }\r\n\r\n  function getInPath(obj, path) {\r\n    /*jshint eqnull:true */\r\n    for (var i = 0, l = path.length; obj != null && i < l; i++) {\r\n      obj = obj[path[i]];\r\n    }\r\n\r\n    return (i && i == l) ? obj : undefined;\r\n  }\r\n\r\n  function updateIn(path, updater) {\r\n    var restArgs = Array.prototype.slice.call(arguments, 2);\r\n    var initialVal = getInPath(this, path);\r\n\r\n    return Immutable.setIn(this, path, updater.apply(initialVal, [initialVal].concat(restArgs)));\r\n  }\r\n\r\n  function getIn(path, defaultValue) {\r\n    var value = getInPath(this, path);\r\n    return value === undefined ? defaultValue : value;\r\n  }\r\n\r\n  function asMutableObject(opts) {\r\n    var result = instantiateEmptyObject(this), key;\r\n\r\n    if(opts && opts.deep) {\r\n      for (key in this) {\r\n        if (this.hasOwnProperty(key)) {\r\n          result[key] = asDeepMutable(this[key]);\r\n        }\r\n      }\r\n    } else {\r\n      for (key in this) {\r\n        if (this.hasOwnProperty(key)) {\r\n          result[key] = this[key];\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  // Creates plain object to be used for cloning\r\n  function instantiatePlainObject() {\r\n    return {};\r\n  }\r\n\r\n  // Finalizes an object with immutable methods, freezes it, and returns it.\r\n  function makeImmutableObject(obj) {\r\n    if (!globalConfig.use_static) {\r\n      addPropertyTo(obj, \"merge\", merge);\r\n      addPropertyTo(obj, \"replace\", objectReplace);\r\n      addPropertyTo(obj, \"without\", without);\r\n      addPropertyTo(obj, \"asMutable\", asMutableObject);\r\n      addPropertyTo(obj, \"set\", objectSet);\r\n      addPropertyTo(obj, \"setIn\", objectSetIn);\r\n      addPropertyTo(obj, \"update\", update);\r\n      addPropertyTo(obj, \"updateIn\", updateIn);\r\n      addPropertyTo(obj, \"getIn\", getIn);\r\n    }\r\n\r\n    return makeImmutable(obj, mutatingObjectMethods);\r\n  }\r\n\r\n  // Returns true if object is a valid react element\r\n  // https://github.com/facebook/react/blob/v15.0.1/src/isomorphic/classic/element/ReactElement.js#L326\r\n  function isReactElement(obj) {\r\n    return typeof obj === 'object' &&\r\n           obj !== null &&\r\n           (obj.$$typeof === REACT_ELEMENT_TYPE_FALLBACK || obj.$$typeof === REACT_ELEMENT_TYPE);\r\n  }\r\n\r\n  function isFileObject(obj) {\r\n    return typeof File !== 'undefined' &&\r\n           obj instanceof File;\r\n  }\r\n\r\n  function isBlobObject(obj) {\r\n    return typeof Blob !== 'undefined' &&\r\n           obj instanceof Blob;\r\n  }\r\n\r\n  function isPromise(obj) {\r\n    return typeof obj === 'object' &&\r\n           typeof obj.then === 'function';\r\n  }\r\n\r\n  function isError(obj) {\r\n    return obj instanceof Error;\r\n  }\r\n\r\n  function Immutable(obj, options, stackRemaining) {\r\n    if (isImmutable(obj) || isReactElement(obj) || isFileObject(obj) || isBlobObject(obj) || isError(obj)) {\r\n      return obj;\r\n    } else if (isPromise(obj)) {\r\n      return obj.then(Immutable);\r\n    } else if (Array.isArray(obj)) {\r\n      return makeImmutableArray(obj.slice());\r\n    } else if (obj instanceof Date) {\r\n      return makeImmutableDate(new Date(obj.getTime()));\r\n    } else {\r\n      // Don't freeze the object we were given; make a clone and use that.\r\n      var prototype = options && options.prototype;\r\n      var instantiateEmptyObject =\r\n        (!prototype || prototype === Object.prototype) ?\r\n          instantiatePlainObject : (function() { return Object.create(prototype); });\r\n      var clone = instantiateEmptyObject();\r\n\r\n      if (\"development\" !== \"production\") {\r\n        /*jshint eqnull:true */\r\n        if (stackRemaining == null) {\r\n          stackRemaining = 64;\r\n        }\r\n        if (stackRemaining <= 0) {\r\n          throw new ImmutableError(\"Attempt to construct Immutable from a deeply nested object was detected.\" +\r\n            \" Have you tried to wrap an object with circular references (e.g. React element)?\" +\r\n            \" See https://github.com/rtfeldman/seamless-immutable/wiki/Deeply-nested-object-was-detected for details.\");\r\n        }\r\n        stackRemaining -= 1;\r\n      }\r\n\r\n      for (var key in obj) {\r\n        if (Object.getOwnPropertyDescriptor(obj, key)) {\r\n          clone[key] = Immutable(obj[key], undefined, stackRemaining);\r\n        }\r\n      }\r\n\r\n      return makeImmutableObject(clone);\r\n    }\r\n  }\r\n\r\n  // Wrapper to allow the use of object methods as static methods of Immutable.\r\n  function toStatic(fn) {\r\n    function staticWrapper() {\r\n      var args = [].slice.call(arguments);\r\n      var self = args.shift();\r\n      return fn.apply(self, args);\r\n    }\r\n\r\n    return staticWrapper;\r\n  }\r\n\r\n  // Wrapper to allow the use of object methods as static methods of Immutable.\r\n  // with the additional condition of choosing which function to call depending\r\n  // if argument is an array or an object.\r\n  function toStaticObjectOrArray(fnObject, fnArray) {\r\n    function staticWrapper() {\r\n      var args = [].slice.call(arguments);\r\n      var self = args.shift();\r\n      if (Array.isArray(self)) {\r\n          return fnArray.apply(self, args);\r\n      } else {\r\n          return fnObject.apply(self, args);\r\n      }\r\n    }\r\n\r\n    return staticWrapper;\r\n  }\r\n\r\n  // Wrapper to allow the use of object methods as static methods of Immutable.\r\n  // with the additional condition of choosing which function to call depending\r\n  // if argument is an array or an object or a date.\r\n  function toStaticObjectOrDateOrArray(fnObject, fnArray, fnDate) {\r\n    function staticWrapper() {\r\n      var args = [].slice.call(arguments);\r\n      var self = args.shift();\r\n      if (Array.isArray(self)) {\r\n          return fnArray.apply(self, args);\r\n      } else if (self instanceof Date) {\r\n          return fnDate.apply(self, args);\r\n      } else {\r\n          return fnObject.apply(self, args);\r\n      }\r\n    }\r\n\r\n    return staticWrapper;\r\n  }\r\n\r\n  // Export the library\r\n  Immutable.from           = Immutable;\r\n  Immutable.isImmutable    = isImmutable;\r\n  Immutable.ImmutableError = ImmutableError;\r\n  Immutable.merge          = toStatic(merge);\r\n  Immutable.replace        = toStatic(objectReplace);\r\n  Immutable.without        = toStatic(without);\r\n  Immutable.asMutable      = toStaticObjectOrDateOrArray(asMutableObject, asMutableArray, asMutableDate);\r\n  Immutable.set            = toStaticObjectOrArray(objectSet, arraySet);\r\n  Immutable.setIn          = toStaticObjectOrArray(objectSetIn, arraySetIn);\r\n  Immutable.update         = toStatic(update);\r\n  Immutable.updateIn       = toStatic(updateIn);\r\n  Immutable.getIn          = toStatic(getIn);\r\n  Immutable.flatMap        = toStatic(flatMap);\r\n  Immutable.asObject       = toStatic(asObject);\r\n  if (!globalConfig.use_static) {\r\n      Immutable.static = immutableInit({\r\n          use_static: true\r\n      });\r\n  }\r\n\r\n  Object.freeze(Immutable);\r\n\r\n  return Immutable;\r\n}\r\n\r\n  var Immutable = immutableInit();\r\n  /* istanbul ignore if */\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function() {\r\n      return Immutable;\r\n    });\r\n  } else if (typeof module === \"object\") {\r\n    module.exports = Immutable;\r\n  } else if (typeof exports === \"object\") {\r\n    exports.Immutable = Immutable;\r\n  } else if (typeof window === \"object\") {\r\n    window.Immutable = Immutable;\r\n  } else if (typeof global === \"object\") {\r\n    global.Immutable = Immutable;\r\n  }\r\n})();\r\n"]},"metadata":{},"sourceType":"script"}