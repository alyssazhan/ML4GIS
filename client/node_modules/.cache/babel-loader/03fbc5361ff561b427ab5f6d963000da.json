{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport KeyEventCounter from './KeyEventCounter';\nimport Configuration from '../config/Configuration';\nimport describeKeyEvent from '../../helpers/logging/describeKeyEvent';\nimport KeyEventType from '../../const/KeyEventType';\n/**\r\n * Handles the propagation of keyboard events up through the React component tree,\r\n * starting from the hot keys component closest to the event target\r\n * @class\r\n */\n\nvar EventPropagator = /*#__PURE__*/function () {\n  /**\r\n   * Create a new instance of EventPropagator\r\n   * @param {ComponentOptionsList} componentList List of options of the components\r\n   *        the event is propagating through\r\n   * @param {Logger} logger The logger instance to use\r\n   * @param {function} logPrefix Function that returns the appropriate log prefix for\r\n   *        each log entry\r\n   * @returns {EventPropagator}\r\n   */\n  function EventPropagator(componentList, _ref) {\n    var logger = _ref.logger,\n        logPrefix = _ref.logPrefix;\n\n    _classCallCheck(this, EventPropagator);\n\n    this._componentList = componentList;\n    this._previousPropagation = null;\n    this.logger = logger;\n    this._logPrefix = logPrefix;\n\n    this._reset();\n  }\n\n  _createClass(EventPropagator, [{\n    key: \"_reset\",\n    value: function _reset() {\n      /**\r\n       * Position of the component that the event last propagated through\r\n       * @type {number}\r\n       */\n      this._previousPosition = -1;\n      /**\r\n       * Position of the current component the event is propagating through\r\n       * @type {number}\r\n       */\n\n      this._position = -1;\n      /**\r\n       * Flag to record whether the keyboard event matches an action whose handler\r\n       * has already been called\r\n       * @type {boolean}\r\n       */\n\n      this._actionHandled = false;\n      /**\r\n       * Flag to record whether the keyboard event should be ignored\r\n       * @type {boolean}\r\n       */\n\n      this._ignoreEvent = false;\n      /**\r\n       * Flag to record whether the keyboard event current being handled should be\r\n       * observed, even if matches the ignoreEventCondition\r\n       * @type {boolean}\r\n       */\n\n      this._observeIgnoredEvents = false;\n      /**\r\n       * Flag to record whether the event is being stopped from further propagation\r\n       * @type {boolean}\r\n       */\n\n      this._stopping = false;\n      /**\r\n       * The id of the component the event is current propagating through\r\n       * @type {ComponentId}\r\n       */\n\n      this._componentId = null;\n      /**\r\n       * The name of the key the propagating event relates to\r\n       * @type {ReactKeyName}\r\n       */\n\n      this._key = null;\n      /**\r\n       * The type of keyboard event that is propagating\r\n       * @type {KeyEventType}\r\n       */\n\n      this._type = null;\n    }\n    /********************************************************************************\r\n     * New event propagation\r\n     *********************************************************************************/\n\n    /**\r\n     * Whether the current propagation step is the first one\r\n     * @returns {boolean} true if this is the first propagation step\r\n     */\n\n  }, {\n    key: \"isFirstPropagationStep\",\n    value: function isFirstPropagationStep() {\n      var previousPosition = this.getPreviousPosition();\n      return previousPosition === -1 || previousPosition >= this._position;\n    }\n    /**\r\n     * Whether the propagation is for a particular key\r\n     * @param {ReactKeyName} keyName The name of the key to query\r\n     * @returns {boolean} true if the event propagation is for the key\r\n     */\n\n  }, {\n    key: \"isForKey\",\n    value: function isForKey(keyName) {\n      return this._key === keyName;\n    }\n    /**\r\n     * The type of keyboard event that is propagating\r\n     * @param {KeyEventType} keyEventType The type of keyboard event to query\r\n     * @returns {boolean} true if the keyboard event propagating is that type\r\n     */\n\n  }, {\n    key: \"isForEventType\",\n    value: function isForEventType(keyEventType) {\n      return this._type === keyEventType;\n    }\n    /********************************************************************************\r\n     * Propagation steps\r\n     *********************************************************************************/\n\n    /**\r\n     * Begin a new propagation step, called as a before callback. i.e. the first thing\r\n     * after an event has propagated to a new hot keys component\r\n     * @param {ComponentId} componentId The id of the component that has just had the\r\n     *        event propagate up to it\r\n     * @param {KeyboardEvent} event The actual KeyboardEvent that is propagating\r\n     * @param {ReactKeyName} key The name of the key the event relates to\r\n     * @param {KeyEventType} type The type of keyboard event\r\n     * @returns {boolean} true if the event should be observed, otherwise false if it\r\n     *        should be ignored.\r\n     */\n\n  }, {\n    key: \"startNewPropagationStep\",\n    value: function startNewPropagationStep(componentId, event, key, type) {\n      this._position = this._componentList.getIndexById(componentId);\n      this._componentId = componentId;\n\n      if (this.isFirstPropagationStep()) {\n        KeyEventCounter.incrementId();\n        this._key = event.key;\n        this._type = type;\n      }\n\n      if (event.repeat && Configuration.option('ignoreRepeatedEventsWhenKeyHeldDown')) {\n        this.logger.debug(this._logPrefix(componentId), \"Ignored repeated \".concat(describeKeyEvent(event, key, KeyEventType.keydown), \" event.\"));\n        this.ignoreEvent(event);\n        return false;\n      }\n\n      return true;\n    }\n    /**\r\n     * Ends handling of a propagation step and performs cleanup. Called as a after callback.\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: \"finishPropagationStep\",\n    value: function finishPropagationStep() {\n      if (this.isStopped() || this._componentList.isRoot(this._componentId)) {\n        this._previousPropagation = this._clone();\n\n        this._reset();\n      } else {\n        this._previousPosition = this._position;\n      }\n    }\n    /********************************************************************************\r\n     * Previous propagation\r\n     *********************************************************************************/\n\n    /**\r\n     * The previous event propagation, either for an earlier event type of the same key\r\n     * or a different key's event propagation\r\n     * @returns {EventPropagator} The propagator for the previous event propagation\r\n     */\n\n  }, {\n    key: \"getPreviousPropagation\",\n    value: function getPreviousPropagation() {\n      if (!this._previousPropagation) {\n        this._previousPropagation = this._clone({\n          copyState: false\n        });\n      }\n\n      return this._previousPropagation;\n    }\n    /**\r\n     * The position of the component that last had the current propagating event\r\n     * propagate through it\r\n     * @returns {number}\r\n     */\n\n  }, {\n    key: \"getPreviousPosition\",\n    value: function getPreviousPosition() {\n      return this._previousPosition;\n    }\n    /********************************************************************************\r\n     * Ignoring events\r\n     *********************************************************************************/\n\n    /**\r\n     * Set the observeIgnoredEvents flag, to observe (not ignore) keyboard events that\r\n     * match the ignored events filter\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: \"observeIgnoredEvents\",\n    value: function observeIgnoredEvents() {\n      this._observeIgnoredEvents = true;\n    }\n    /**\r\n     * Record that an event is being ignored for the rest of its propagation and, if\r\n     * enabled, stop it from further propagation entirely.\r\n     * @param {KeyboardEvent} event Event to ignore\r\n     * @returns {boolean} true if the event was stopped from further propagation,\r\n     *          otherwise false.\r\n     */\n\n  }, {\n    key: \"ignoreEvent\",\n    value: function ignoreEvent(event) {\n      this.setIgnoreEvent(true);\n\n      if (this.isIgnoringEvent() && Configuration.option('stopEventPropagationAfterIgnoring')) {\n        this.logger.debug(this._logPrefix(this._componentId), 'Stopping further event propagation.');\n        this.stop(event);\n        this.finishPropagationStep();\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * Set the ignore event flag, to ignore the current event for the rest of its\r\n     * propagation\r\n     * @param {boolean} ignore true to ignore the event, or false to not ignore it\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: \"setIgnoreEvent\",\n    value: function setIgnoreEvent(ignore) {\n      this._ignoreEvent = ignore;\n    }\n    /**\r\n     * Whether to ignore the currently propagating event or not\r\n     * @returns {boolean} true if the event is being ignored for the current propagation\r\n     */\n\n  }, {\n    key: \"isIgnoringEvent\",\n    value: function isIgnoringEvent() {\n      return !this._observeIgnoredEvents && this._ignoreEvent;\n    }\n    /********************************************************************************\r\n     * Stopping propagation\r\n     *********************************************************************************/\n\n    /**\r\n     * Whether the event has been stopped from further propagation\r\n     * @returns {boolean} true if the event is being stopped\r\n     */\n\n  }, {\n    key: \"isStopped\",\n    value: function isStopped() {\n      return this._stopping;\n    }\n    /**\r\n     * Stop an event from further propagation\r\n     * @param {KeyboardEvent} event Event to call stopPropagation() on\r\n     * @returns {boolean} true if the event was stopped and false if it was already\r\n     *          stopped\r\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(event) {\n      if (!this.isStopped()) {\n        this._stopping = true; // noinspection JSUnresolvedVariable\n\n        if (!event.simulated) {\n          event.stopPropagation();\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * Whether the keyboard event has yet propagated to the root hot keys component\r\n     * @returns {boolean} true if it still has hotkeys components to propagate to\r\n     *          before being complete.\r\n     */\n\n  }, {\n    key: \"isPendingPropagation\",\n    value: function isPendingPropagation() {\n      var previousPosition = this.getPreviousPosition();\n      return previousPosition !== -1 && previousPosition + 1 < this._position;\n    }\n    /**\r\n     * If the action has already been handled\r\n     * @returns {boolean} true if the action has already been handled\r\n     */\n\n  }, {\n    key: \"isHandled\",\n    value: function isHandled() {\n      return this._actionHandled;\n    }\n    /**\r\n     * Record that the current propagating event matched and action and its handler\r\n     * has been called.\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: \"setHandled\",\n    value: function setHandled() {\n      this._actionHandled = true;\n    }\n    /********************************************************************************\r\n     * Private methods\r\n     ********************************************************************************/\n\n  }, {\n    key: \"_clone\",\n    value: function _clone() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref2$copyState = _ref2.copyState,\n          copyState = _ref2$copyState === void 0 ? true : _ref2$copyState;\n\n      var cloned = new EventPropagator(this._componentList, {\n        logger: this.logger,\n        logPrefix: this._logPrefix\n      });\n\n      if (copyState) {\n        Object.assign(cloned, this);\n      }\n\n      return cloned;\n    }\n  }]);\n\n  return EventPropagator;\n}();\n\nexport default EventPropagator;","map":{"version":3,"sources":["D:/GitHub/ML4GIS/client/node_modules/react-hotkeys/es/lib/listening/EventPropagator.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","KeyEventCounter","Configuration","describeKeyEvent","KeyEventType","EventPropagator","componentList","_ref","logger","logPrefix","_componentList","_previousPropagation","_logPrefix","_reset","value","_previousPosition","_position","_actionHandled","_ignoreEvent","_observeIgnoredEvents","_stopping","_componentId","_key","_type","isFirstPropagationStep","previousPosition","getPreviousPosition","isForKey","keyName","isForEventType","keyEventType","startNewPropagationStep","componentId","event","type","getIndexById","incrementId","repeat","option","debug","concat","keydown","ignoreEvent","finishPropagationStep","isStopped","isRoot","_clone","getPreviousPropagation","copyState","observeIgnoredEvents","setIgnoreEvent","isIgnoringEvent","stop","ignore","simulated","stopPropagation","isPendingPropagation","isHandled","setHandled","_ref2","arguments","undefined","_ref2$copyState","cloned","assign"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\r\n\r\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\r\n\r\nimport KeyEventCounter from './KeyEventCounter';\r\nimport Configuration from '../config/Configuration';\r\nimport describeKeyEvent from '../../helpers/logging/describeKeyEvent';\r\nimport KeyEventType from '../../const/KeyEventType';\r\n/**\r\n * Handles the propagation of keyboard events up through the React component tree,\r\n * starting from the hot keys component closest to the event target\r\n * @class\r\n */\r\n\r\nvar EventPropagator =\r\n/*#__PURE__*/\r\nfunction () {\r\n  /**\r\n   * Create a new instance of EventPropagator\r\n   * @param {ComponentOptionsList} componentList List of options of the components\r\n   *        the event is propagating through\r\n   * @param {Logger} logger The logger instance to use\r\n   * @param {function} logPrefix Function that returns the appropriate log prefix for\r\n   *        each log entry\r\n   * @returns {EventPropagator}\r\n   */\r\n  function EventPropagator(componentList, _ref) {\r\n    var logger = _ref.logger,\r\n        logPrefix = _ref.logPrefix;\r\n\r\n    _classCallCheck(this, EventPropagator);\r\n\r\n    this._componentList = componentList;\r\n    this._previousPropagation = null;\r\n    this.logger = logger;\r\n    this._logPrefix = logPrefix;\r\n\r\n    this._reset();\r\n  }\r\n\r\n  _createClass(EventPropagator, [{\r\n    key: \"_reset\",\r\n    value: function _reset() {\r\n      /**\r\n       * Position of the component that the event last propagated through\r\n       * @type {number}\r\n       */\r\n      this._previousPosition = -1;\r\n      /**\r\n       * Position of the current component the event is propagating through\r\n       * @type {number}\r\n       */\r\n\r\n      this._position = -1;\r\n      /**\r\n       * Flag to record whether the keyboard event matches an action whose handler\r\n       * has already been called\r\n       * @type {boolean}\r\n       */\r\n\r\n      this._actionHandled = false;\r\n      /**\r\n       * Flag to record whether the keyboard event should be ignored\r\n       * @type {boolean}\r\n       */\r\n\r\n      this._ignoreEvent = false;\r\n      /**\r\n       * Flag to record whether the keyboard event current being handled should be\r\n       * observed, even if matches the ignoreEventCondition\r\n       * @type {boolean}\r\n       */\r\n\r\n      this._observeIgnoredEvents = false;\r\n      /**\r\n       * Flag to record whether the event is being stopped from further propagation\r\n       * @type {boolean}\r\n       */\r\n\r\n      this._stopping = false;\r\n      /**\r\n       * The id of the component the event is current propagating through\r\n       * @type {ComponentId}\r\n       */\r\n\r\n      this._componentId = null;\r\n      /**\r\n       * The name of the key the propagating event relates to\r\n       * @type {ReactKeyName}\r\n       */\r\n\r\n      this._key = null;\r\n      /**\r\n       * The type of keyboard event that is propagating\r\n       * @type {KeyEventType}\r\n       */\r\n\r\n      this._type = null;\r\n    }\r\n    /********************************************************************************\r\n     * New event propagation\r\n     *********************************************************************************/\r\n\r\n    /**\r\n     * Whether the current propagation step is the first one\r\n     * @returns {boolean} true if this is the first propagation step\r\n     */\r\n\r\n  }, {\r\n    key: \"isFirstPropagationStep\",\r\n    value: function isFirstPropagationStep() {\r\n      var previousPosition = this.getPreviousPosition();\r\n      return previousPosition === -1 || previousPosition >= this._position;\r\n    }\r\n    /**\r\n     * Whether the propagation is for a particular key\r\n     * @param {ReactKeyName} keyName The name of the key to query\r\n     * @returns {boolean} true if the event propagation is for the key\r\n     */\r\n\r\n  }, {\r\n    key: \"isForKey\",\r\n    value: function isForKey(keyName) {\r\n      return this._key === keyName;\r\n    }\r\n    /**\r\n     * The type of keyboard event that is propagating\r\n     * @param {KeyEventType} keyEventType The type of keyboard event to query\r\n     * @returns {boolean} true if the keyboard event propagating is that type\r\n     */\r\n\r\n  }, {\r\n    key: \"isForEventType\",\r\n    value: function isForEventType(keyEventType) {\r\n      return this._type === keyEventType;\r\n    }\r\n    /********************************************************************************\r\n     * Propagation steps\r\n     *********************************************************************************/\r\n\r\n    /**\r\n     * Begin a new propagation step, called as a before callback. i.e. the first thing\r\n     * after an event has propagated to a new hot keys component\r\n     * @param {ComponentId} componentId The id of the component that has just had the\r\n     *        event propagate up to it\r\n     * @param {KeyboardEvent} event The actual KeyboardEvent that is propagating\r\n     * @param {ReactKeyName} key The name of the key the event relates to\r\n     * @param {KeyEventType} type The type of keyboard event\r\n     * @returns {boolean} true if the event should be observed, otherwise false if it\r\n     *        should be ignored.\r\n     */\r\n\r\n  }, {\r\n    key: \"startNewPropagationStep\",\r\n    value: function startNewPropagationStep(componentId, event, key, type) {\r\n      this._position = this._componentList.getIndexById(componentId);\r\n      this._componentId = componentId;\r\n\r\n      if (this.isFirstPropagationStep()) {\r\n        KeyEventCounter.incrementId();\r\n        this._key = event.key;\r\n        this._type = type;\r\n      }\r\n\r\n      if (event.repeat && Configuration.option('ignoreRepeatedEventsWhenKeyHeldDown')) {\r\n        this.logger.debug(this._logPrefix(componentId), \"Ignored repeated \".concat(describeKeyEvent(event, key, KeyEventType.keydown), \" event.\"));\r\n        this.ignoreEvent(event);\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    }\r\n    /**\r\n     * Ends handling of a propagation step and performs cleanup. Called as a after callback.\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: \"finishPropagationStep\",\r\n    value: function finishPropagationStep() {\r\n      if (this.isStopped() || this._componentList.isRoot(this._componentId)) {\r\n        this._previousPropagation = this._clone();\r\n\r\n        this._reset();\r\n      } else {\r\n        this._previousPosition = this._position;\r\n      }\r\n    }\r\n    /********************************************************************************\r\n     * Previous propagation\r\n     *********************************************************************************/\r\n\r\n    /**\r\n     * The previous event propagation, either for an earlier event type of the same key\r\n     * or a different key's event propagation\r\n     * @returns {EventPropagator} The propagator for the previous event propagation\r\n     */\r\n\r\n  }, {\r\n    key: \"getPreviousPropagation\",\r\n    value: function getPreviousPropagation() {\r\n      if (!this._previousPropagation) {\r\n        this._previousPropagation = this._clone({\r\n          copyState: false\r\n        });\r\n      }\r\n\r\n      return this._previousPropagation;\r\n    }\r\n    /**\r\n     * The position of the component that last had the current propagating event\r\n     * propagate through it\r\n     * @returns {number}\r\n     */\r\n\r\n  }, {\r\n    key: \"getPreviousPosition\",\r\n    value: function getPreviousPosition() {\r\n      return this._previousPosition;\r\n    }\r\n    /********************************************************************************\r\n     * Ignoring events\r\n     *********************************************************************************/\r\n\r\n    /**\r\n     * Set the observeIgnoredEvents flag, to observe (not ignore) keyboard events that\r\n     * match the ignored events filter\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: \"observeIgnoredEvents\",\r\n    value: function observeIgnoredEvents() {\r\n      this._observeIgnoredEvents = true;\r\n    }\r\n    /**\r\n     * Record that an event is being ignored for the rest of its propagation and, if\r\n     * enabled, stop it from further propagation entirely.\r\n     * @param {KeyboardEvent} event Event to ignore\r\n     * @returns {boolean} true if the event was stopped from further propagation,\r\n     *          otherwise false.\r\n     */\r\n\r\n  }, {\r\n    key: \"ignoreEvent\",\r\n    value: function ignoreEvent(event) {\r\n      this.setIgnoreEvent(true);\r\n\r\n      if (this.isIgnoringEvent() && Configuration.option('stopEventPropagationAfterIgnoring')) {\r\n        this.logger.debug(this._logPrefix(this._componentId), 'Stopping further event propagation.');\r\n        this.stop(event);\r\n        this.finishPropagationStep();\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n    /**\r\n     * Set the ignore event flag, to ignore the current event for the rest of its\r\n     * propagation\r\n     * @param {boolean} ignore true to ignore the event, or false to not ignore it\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: \"setIgnoreEvent\",\r\n    value: function setIgnoreEvent(ignore) {\r\n      this._ignoreEvent = ignore;\r\n    }\r\n    /**\r\n     * Whether to ignore the currently propagating event or not\r\n     * @returns {boolean} true if the event is being ignored for the current propagation\r\n     */\r\n\r\n  }, {\r\n    key: \"isIgnoringEvent\",\r\n    value: function isIgnoringEvent() {\r\n      return !this._observeIgnoredEvents && this._ignoreEvent;\r\n    }\r\n    /********************************************************************************\r\n     * Stopping propagation\r\n     *********************************************************************************/\r\n\r\n    /**\r\n     * Whether the event has been stopped from further propagation\r\n     * @returns {boolean} true if the event is being stopped\r\n     */\r\n\r\n  }, {\r\n    key: \"isStopped\",\r\n    value: function isStopped() {\r\n      return this._stopping;\r\n    }\r\n    /**\r\n     * Stop an event from further propagation\r\n     * @param {KeyboardEvent} event Event to call stopPropagation() on\r\n     * @returns {boolean} true if the event was stopped and false if it was already\r\n     *          stopped\r\n     */\r\n\r\n  }, {\r\n    key: \"stop\",\r\n    value: function stop(event) {\r\n      if (!this.isStopped()) {\r\n        this._stopping = true; // noinspection JSUnresolvedVariable\r\n\r\n        if (!event.simulated) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n    /**\r\n     * Whether the keyboard event has yet propagated to the root hot keys component\r\n     * @returns {boolean} true if it still has hotkeys components to propagate to\r\n     *          before being complete.\r\n     */\r\n\r\n  }, {\r\n    key: \"isPendingPropagation\",\r\n    value: function isPendingPropagation() {\r\n      var previousPosition = this.getPreviousPosition();\r\n      return previousPosition !== -1 && previousPosition + 1 < this._position;\r\n    }\r\n    /**\r\n     * If the action has already been handled\r\n     * @returns {boolean} true if the action has already been handled\r\n     */\r\n\r\n  }, {\r\n    key: \"isHandled\",\r\n    value: function isHandled() {\r\n      return this._actionHandled;\r\n    }\r\n    /**\r\n     * Record that the current propagating event matched and action and its handler\r\n     * has been called.\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: \"setHandled\",\r\n    value: function setHandled() {\r\n      this._actionHandled = true;\r\n    }\r\n    /********************************************************************************\r\n     * Private methods\r\n     ********************************************************************************/\r\n\r\n  }, {\r\n    key: \"_clone\",\r\n    value: function _clone() {\r\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\r\n          _ref2$copyState = _ref2.copyState,\r\n          copyState = _ref2$copyState === void 0 ? true : _ref2$copyState;\r\n\r\n      var cloned = new EventPropagator(this._componentList, {\r\n        logger: this.logger,\r\n        logPrefix: this._logPrefix\r\n      });\r\n\r\n      if (copyState) {\r\n        Object.assign(cloned, this);\r\n      }\r\n\r\n      return cloned;\r\n    }\r\n  }]);\r\n\r\n  return EventPropagator;\r\n}();\r\n\r\nexport default EventPropagator;"]},"metadata":{},"sourceType":"module"}