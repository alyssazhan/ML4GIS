{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * Generic registry for storing and retrieving items\n * @class @abstract\n */\n\n\nvar Registry = /*#__PURE__*/function () {\n  /**\n   * Create a new Registry instance\n   * @returns {Registry}\n   */\n  function Registry() {\n    _classCallCheck(this, Registry);\n\n    this._registry = {};\n  }\n  /**\n   * Returns the registry item stored with against an id\n   * @param {*} id The key item was registered with\n   * @returns {*} Item stored in registry\n   */\n\n\n  _createClass(Registry, [{\n    key: \"get\",\n    value: function get(id) {\n      return this._registry[id];\n    }\n    /**\n     * Add an item to the registry\n     * @param {*} id Key to store the item against\n     * @param {*} item Item to store in the registry\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(id, item) {\n      this._registry[id] = item;\n    }\n    /**\n     * Remove an item from the registry\n     * @param {*} id Key of the item to remove from the registry\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(id) {\n      delete this._registry[id];\n    }\n    /**\n     * A plain JavaScript representation of the registry, useful for serialization or\n     * debugging\n     * @returns {Object.<*,*>} Serialized representation of the registry\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this._registry;\n    }\n  }]);\n\n  return Registry;\n}();\n\nexport default Registry;","map":{"version":3,"sources":["/Users/yan/Documents/proj/ML4GIS/client/node_modules/react-hotkeys/es/lib/shared/Registry.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","Registry","_registry","value","get","id","set","item","remove","toJSON"],"mappings":"AAAA,SAASA,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;AAAE,MAAI,EAAED,QAAQ,YAAYC,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,KAAnC,EAA0C;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAAE,QAAIE,UAAU,GAAGH,KAAK,CAACC,CAAD,CAAtB;AAA2BE,IAAAA,UAAU,CAACC,UAAX,GAAwBD,UAAU,CAACC,UAAX,IAAyB,KAAjD;AAAwDD,IAAAA,UAAU,CAACE,YAAX,GAA0B,IAA1B;AAAgC,QAAI,WAAWF,UAAf,EAA2BA,UAAU,CAACG,QAAX,GAAsB,IAAtB;AAA4BC,IAAAA,MAAM,CAACC,cAAP,CAAsBT,MAAtB,EAA8BI,UAAU,CAACM,GAAzC,EAA8CN,UAA9C;AAA4D;AAAE;;AAE7T,SAASO,YAAT,CAAsBd,WAAtB,EAAmCe,UAAnC,EAA+CC,WAA/C,EAA4D;AAAE,MAAID,UAAJ,EAAgBb,iBAAiB,CAACF,WAAW,CAACiB,SAAb,EAAwBF,UAAxB,CAAjB;AAAsD,MAAIC,WAAJ,EAAiBd,iBAAiB,CAACF,WAAD,EAAcgB,WAAd,CAAjB;AAA6C,SAAOhB,WAAP;AAAqB;AAEvN;AACA;AACA;AACA;;;AACA,IAAIkB,QAAQ,GACZ,aACA,YAAY;AACV;AACF;AACA;AACA;AACE,WAASA,QAAT,GAAoB;AAClBpB,IAAAA,eAAe,CAAC,IAAD,EAAOoB,QAAP,CAAf;;AAEA,SAAKC,SAAL,GAAiB,EAAjB;AACD;AACD;AACF;AACA;AACA;AACA;;;AAGEL,EAAAA,YAAY,CAACI,QAAD,EAAW,CAAC;AACtBL,IAAAA,GAAG,EAAE,KADiB;AAEtBO,IAAAA,KAAK,EAAE,SAASC,GAAT,CAAaC,EAAb,EAAiB;AACtB,aAAO,KAAKH,SAAL,CAAeG,EAAf,CAAP;AACD;AACD;AACJ;AACA;AACA;AACA;;AAT0B,GAAD,EAWpB;AACDT,IAAAA,GAAG,EAAE,KADJ;AAEDO,IAAAA,KAAK,EAAE,SAASG,GAAT,CAAaD,EAAb,EAAiBE,IAAjB,EAAuB;AAC5B,WAAKL,SAAL,CAAeG,EAAf,IAAqBE,IAArB;AACD;AACD;AACJ;AACA;AACA;;AARK,GAXoB,EAqBpB;AACDX,IAAAA,GAAG,EAAE,QADJ;AAEDO,IAAAA,KAAK,EAAE,SAASK,MAAT,CAAgBH,EAAhB,EAAoB;AACzB,aAAO,KAAKH,SAAL,CAAeG,EAAf,CAAP;AACD;AACD;AACJ;AACA;AACA;AACA;;AATK,GArBoB,EAgCpB;AACDT,IAAAA,GAAG,EAAE,QADJ;AAEDO,IAAAA,KAAK,EAAE,SAASM,MAAT,GAAkB;AACvB,aAAO,KAAKP,SAAZ;AACD;AAJA,GAhCoB,CAAX,CAAZ;;AAuCA,SAAOD,QAAP;AACD,CAzDD,EAFA;;AA6DA,eAAeA,QAAf","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * Generic registry for storing and retrieving items\n * @class @abstract\n */\nvar Registry =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create a new Registry instance\n   * @returns {Registry}\n   */\n  function Registry() {\n    _classCallCheck(this, Registry);\n\n    this._registry = {};\n  }\n  /**\n   * Returns the registry item stored with against an id\n   * @param {*} id The key item was registered with\n   * @returns {*} Item stored in registry\n   */\n\n\n  _createClass(Registry, [{\n    key: \"get\",\n    value: function get(id) {\n      return this._registry[id];\n    }\n    /**\n     * Add an item to the registry\n     * @param {*} id Key to store the item against\n     * @param {*} item Item to store in the registry\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(id, item) {\n      this._registry[id] = item;\n    }\n    /**\n     * Remove an item from the registry\n     * @param {*} id Key of the item to remove from the registry\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(id) {\n      delete this._registry[id];\n    }\n    /**\n     * A plain JavaScript representation of the registry, useful for serialization or\n     * debugging\n     * @returns {Object.<*,*>} Serialized representation of the registry\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this._registry;\n    }\n  }]);\n\n  return Registry;\n}();\n\nexport default Registry;"]},"metadata":{},"sourceType":"module"}