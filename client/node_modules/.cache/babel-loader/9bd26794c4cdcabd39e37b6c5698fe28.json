{"ast":null,"code":"import _objectSpread from \"/Users/yan/Documents/proj/ML4GIS/client/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/yan/Documents/proj/ML4GIS/client/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { moveRegion } from \"../../ImageCanvas/region-tools.js\";\nimport { getIn, setIn, updateIn } from \"seamless-immutable\";\nimport moment from \"moment\";\nimport isEqual from \"lodash/isEqual\";\nimport getActiveImage from \"./get-active-image\";\nimport { saveToHistory } from \"./history-handler.js\";\nimport colors from \"../../../colors\";\nimport fixTwisted from \"./fix-twisted\";\nimport convertExpandingLineToPolygon from \"./convert-expanding-line-to-polygon\";\nimport clamp from \"clamp\";\nimport getLandmarksWithTransform from \"../../utils/get-landmarks-with-transform\";\nimport setInLocalStorage from \"../../utils/set-in-local-storage\";\n\nconst getRandomId = () => Math.random().toString().split(\".\")[1];\n\nexport default ((state, action) => {\n  // if (\n  //   state.allowedArea &&\n  //   state.selectedTool !== \"modify-allowed-area\" &&\n  //   [\"MOUSE_DOWN\", \"MOUSE_UP\", \"MOUSE_MOVE\"].includes(action.type)\n  // ) {\n  //   const aa = state.allowedArea\n  //   action.x = clamp(action.x, aa.x, aa.x + aa.w)\n  //   action.y = clamp(action.y, aa.y, aa.y + aa.h)\n  // }\n  // if (action.type === \"ON_CLS_ADDED\" && action.cls && action.cls !== \"\") {\n  //   const oldRegionClsList = state.regionClsList\n  //   const newState = {\n  //     ...state,\n  //      regionClsList: oldRegionClsList.concat(action.cls),\n  //   }\n  //   return newState\n  // }\n  // Throttle certain actions\n  if (action.type === \"MOUSE_MOVE\") {\n    if (Date.now() - (state.lastMouseMoveCall || 0) < 16) return state;\n    state = setIn(state, [\"lastMouseMoveCall\"], Date.now());\n  }\n\n  if (!action.type.includes(\"MOUSE\")) {\n    state = setIn(state, [\"lastAction\"], action);\n  }\n\n  const _getActiveImage = getActiveImage(state),\n        currentImageIndex = _getActiveImage.currentImageIndex,\n        pathToActiveImage = _getActiveImage.pathToActiveImage,\n        activeImage = _getActiveImage.activeImage;\n\n  const getRegionIndex = region => {\n    const regionId = typeof region === \"string\" || typeof region === \"number\" ? region : region.id;\n    if (!activeImage) return null;\n    const regionIndex = (activeImage.regions || []).findIndex(r => r.id === regionId);\n    return regionIndex === -1 ? null : regionIndex;\n  };\n\n  const getRegion = regionId => {\n    if (!activeImage) return null;\n    const regionIndex = getRegionIndex(regionId);\n    if (regionIndex === null) return [null, null];\n    const region = activeImage.regions[regionIndex];\n    return [region, regionIndex];\n  };\n\n  const modifyRegion = (regionId, obj) => {\n    const _getRegion = getRegion(regionId),\n          _getRegion2 = _slicedToArray(_getRegion, 2),\n          region = _getRegion2[0],\n          regionIndex = _getRegion2[1];\n\n    if (!region) return state;\n\n    if (obj !== null) {\n      return setIn(state, [...pathToActiveImage, \"regions\", regionIndex], _objectSpread(_objectSpread({}, region), obj));\n    } else {\n      // delete region\n      const regions = activeImage.regions;\n      return setIn(state, [...pathToActiveImage, \"regions\"], (regions || []).filter(r => r.id !== region.id));\n    }\n  };\n\n  const unselectRegions = state => {\n    if (!activeImage) return state;\n    return setIn(state, [...pathToActiveImage, \"regions\"], (activeImage.regions || []).map(r => _objectSpread(_objectSpread({}, r), {}, {\n      highlighted: false\n    })));\n  };\n\n  const closeEditors = state => {\n    if (currentImageIndex === null) return state;\n    return setIn(state, [...pathToActiveImage, \"regions\"], (activeImage.regions || []).map(r => _objectSpread(_objectSpread({}, r), {}, {\n      editingLabels: false\n    })));\n  };\n\n  const setNewImage = (img, index) => {\n    let _ref = typeof img === \"object\" ? img : {\n      src: img\n    },\n        src = _ref.src,\n        frameTime = _ref.frameTime;\n\n    return setIn(setIn(state, [\"selectedImage\"], index), [\"selectedImageFrameTime\"], frameTime);\n  };\n\n  switch (action.type) {\n    case \"@@INIT\":\n      {\n        return state;\n      }\n\n    case \"SELECT_IMAGE\":\n      {\n        return setNewImage(action.image, action.imageIndex);\n      }\n\n    case \"CHANGE_REGION\":\n      {\n        const regionIndex = getRegionIndex(action.region);\n        if (regionIndex === null) return state;\n        const oldRegion = activeImage.regions[regionIndex];\n\n        if (oldRegion.cls !== action.region.cls) {\n          state = saveToHistory(state, \"Change Region Classification\");\n          const clsIndex = state.regionClsList.indexOf(action.region.cls);\n\n          if (clsIndex !== -1) {\n            action.region.color = colors[clsIndex % colors.length];\n          }\n        }\n\n        if (!isEqual(oldRegion.tags, action.region.tags)) {\n          state = saveToHistory(state, \"Change Region Tags\");\n        }\n\n        if (!isEqual(oldRegion.comment, action.region.comment)) {\n          state = saveToHistory(state, \"Change Region Comment\");\n        }\n\n        return setIn(state, [...pathToActiveImage, \"regions\", regionIndex], action.region);\n      }\n\n    case \"CHANGE_IMAGE\":\n      {\n        if (!activeImage) return state;\n        const delta = action.delta;\n\n        for (var _i = 0, _Object$keys = Object.keys(delta); _i < _Object$keys.length; _i++) {\n          const key = _Object$keys[_i];\n          if (key === \"cls\") saveToHistory(state, \"Change Image Class\");\n          if (key === \"tags\") saveToHistory(state, \"Change Image Tags\");\n          state = setIn(state, [...pathToActiveImage, key], delta[key]);\n        }\n\n        return state;\n      }\n\n    case \"SELECT_REGION\":\n      {\n        const region = action.region;\n        const regionIndex = getRegionIndex(action.region);\n        if (regionIndex === null) return state;\n        const regions = [...(activeImage.regions || [])].map(r => _objectSpread(_objectSpread({}, r), {}, {\n          highlighted: r.id === region.id,\n          editingLabels: r.id === region.id\n        }));\n        return setIn(state, [...pathToActiveImage, \"regions\"], regions);\n      }\n\n    case \"BEGIN_MOVE_POINT\":\n      {\n        state = closeEditors(state);\n        return setIn(state, [\"mode\"], {\n          mode: \"MOVE_REGION\",\n          regionId: action.point.id\n        });\n      }\n\n    case \"BEGIN_BOX_TRANSFORM\":\n      {\n        const rectangle = action.rectangle,\n              directions = action.directions;\n        state = closeEditors(state);\n\n        if (directions[0] === 0 && directions[1] === 0) {\n          return setIn(state, [\"mode\"], {\n            mode: \"MOVE_REGION\",\n            regionId: rectangle.id\n          });\n        } else {\n          return setIn(state, [\"mode\"], {\n            mode: \"RESIZE_BOX\",\n            regionId: rectangle.id,\n            freedom: directions,\n            original: {\n              x: rectangle.x,\n              y: rectangle.y,\n              w: rectangle.w,\n              h: rectangle.h\n            }\n          });\n        }\n      }\n\n    case \"BEGIN_MOVE_POLYGON_POINT\":\n      {\n        const polygon = action.polygon,\n              pointIndex = action.pointIndex;\n        state = closeEditors(state);\n\n        if (state.mode && state.mode.mode === \"DRAW_POLYGON\" && pointIndex === 0) {\n          return setIn(modifyRegion(polygon, {\n            points: polygon.points.slice(0, -1),\n            open: false\n          }), [\"mode\"], null);\n        } else {\n          state = saveToHistory(state, \"Move Polygon Point\");\n        }\n\n        return setIn(state, [\"mode\"], {\n          mode: \"MOVE_POLYGON_POINT\",\n          regionId: polygon.id,\n          pointIndex\n        });\n      }\n    // case \"BEGIN_MOVE_KEYPOINT\": {\n    //   const { region, keypointId } = action\n    //   state = closeEditors(state)\n    //   state = saveToHistory(state, \"Move Keypoint\")\n    //   return setIn(state, [\"mode\"], {\n    //     mode: \"MOVE_KEYPOINT\",\n    //     regionId: region.id,\n    //     keypointId,\n    //   })\n    // }\n\n    case \"ADD_POLYGON_POINT\":\n      {\n        const polygon = action.polygon,\n              point = action.point,\n              pointIndex = action.pointIndex;\n        const regionIndex = getRegionIndex(polygon);\n        if (regionIndex === null) return state;\n        const points = [...polygon.points];\n        points.splice(pointIndex, 0, point);\n        return setIn(state, [...pathToActiveImage, \"regions\", regionIndex], _objectSpread(_objectSpread({}, polygon), {}, {\n          points\n        }));\n      }\n\n    case \"MOUSE_MOVE\":\n      {\n        const x = action.x,\n              y = action.y;\n        if (!state.mode) return state;\n        if (!activeImage) return state;\n        const _state = state,\n              mouseDownAt = _state.mouseDownAt;\n\n        switch (state.mode.mode) {\n          case \"MOVE_POLYGON_POINT\":\n            {\n              const _state$mode = state.mode,\n                    pointIndex = _state$mode.pointIndex,\n                    regionId = _state$mode.regionId;\n              const regionIndex = getRegionIndex(regionId);\n              if (regionIndex === null) return state;\n              return setIn(state, [...pathToActiveImage, \"regions\", regionIndex, \"points\", pointIndex], [x, y]);\n            }\n          // case \"MOVE_KEYPOINT\": {\n          //   const { keypointId, regionId } = state.mode\n          //   const [region, regionIndex] = getRegion(regionId)\n          //   if (regionIndex === null) return state\n          //   return setIn(\n          //     state,\n          //     [\n          //       ...pathToActiveImage,\n          //       \"regions\",\n          //       regionIndex,\n          //       \"points\",\n          //       keypointId,\n          //     ],\n          //     { ...(region: any).points[keypointId], x, y }\n          //   )\n          // }\n\n          case \"MOVE_REGION\":\n            {\n              const regionId = state.mode.regionId;\n\n              if (regionId === \"$$allowed_area\") {\n                const _state2 = state,\n                      _state2$allowedArea = _state2.allowedArea,\n                      w = _state2$allowedArea.w,\n                      h = _state2$allowedArea.h;\n                return setIn(state, [\"allowedArea\"], {\n                  x: x - w / 2,\n                  y: y - h / 2,\n                  w,\n                  h\n                });\n              }\n\n              const regionIndex = getRegionIndex(regionId);\n              if (regionIndex === null) return state;\n              return setIn(state, [...pathToActiveImage, \"regions\", regionIndex], moveRegion(activeImage.regions[regionIndex], x, y));\n            }\n\n          case \"RESIZE_BOX\":\n            {\n              const _state$mode2 = state.mode,\n                    regionId = _state$mode2.regionId,\n                    _state$mode2$freedom = _slicedToArray(_state$mode2.freedom, 2),\n                    xFree = _state$mode2$freedom[0],\n                    yFree = _state$mode2$freedom[1],\n                    _state$mode2$original = _state$mode2.original,\n                    ox = _state$mode2$original.x,\n                    oy = _state$mode2$original.y,\n                    ow = _state$mode2$original.w,\n                    oh = _state$mode2$original.h;\n\n              const dx = xFree === 0 ? ox : xFree === -1 ? Math.min(ox + ow, x) : ox;\n              const dw = xFree === 0 ? ow : xFree === -1 ? ow + (ox - dx) : Math.max(0, ow + (x - ox - ow));\n              const dy = yFree === 0 ? oy : yFree === -1 ? Math.min(oy + oh, y) : oy;\n              const dh = yFree === 0 ? oh : yFree === -1 ? oh + (oy - dy) : Math.max(0, oh + (y - oy - oh)); // determine if we should switch the freedom\n\n              if (dw <= 0.001) {\n                state = setIn(state, [\"mode\", \"freedom\"], [xFree * -1, yFree]);\n              }\n\n              if (dh <= 0.001) {\n                state = setIn(state, [\"mode\", \"freedom\"], [xFree, yFree * -1]);\n              }\n\n              if (regionId === \"$$allowed_area\") {\n                return setIn(state, [\"allowedArea\"], {\n                  x: dx,\n                  w: dw,\n                  y: dy,\n                  h: dh\n                });\n              }\n\n              const regionIndex = getRegionIndex(regionId);\n              if (regionIndex === null) return state;\n              const rectangle = activeImage.regions[regionIndex];\n              return setIn(state, [...pathToActiveImage, \"regions\", regionIndex], _objectSpread(_objectSpread({}, rectangle), {}, {\n                x: dx,\n                w: dw,\n                y: dy,\n                h: dh\n              }));\n            }\n          // case \"RESIZE_KEYPOINTS\": {\n          //   const { regionId, landmarks, centerX, centerY } = state.mode\n          //   const distFromCenter = Math.sqrt(\n          //     (centerX - x) ** 2 + (centerY - y) ** 2\n          //   )\n          //   const scale = distFromCenter / 0.15\n          //   return modifyRegion(regionId, {\n          //     points: getLandmarksWithTransform({\n          //       landmarks,\n          //       center: { x: centerX, y: centerY },\n          //       scale,\n          //     }),\n          //   })\n          // }\n\n          case \"DRAW_POLYGON\":\n            {\n              const regionId = state.mode.regionId;\n\n              const _getRegion3 = getRegion(regionId),\n                    _getRegion4 = _slicedToArray(_getRegion3, 2),\n                    region = _getRegion4[0],\n                    regionIndex = _getRegion4[1];\n\n              if (!region) return setIn(state, [\"mode\"], null);\n              return setIn(state, [...pathToActiveImage, \"regions\", regionIndex, \"points\", region.points.length - 1], [x, y]);\n            }\n\n          default:\n            return state;\n        }\n      }\n\n    case \"MOUSE_DOWN\":\n      {\n        if (!activeImage) return state;\n        const x = action.x,\n              y = action.y;\n        state = setIn(state, [\"mouseDownAt\"], {\n          x,\n          y\n        });\n\n        if (state.mode) {\n          switch (state.mode.mode) {\n            case \"DRAW_POLYGON\":\n              {\n                const _getRegion5 = getRegion(state.mode.regionId),\n                      _getRegion6 = _slicedToArray(_getRegion5, 2),\n                      polygon = _getRegion6[0],\n                      regionIndex = _getRegion6[1];\n\n                if (!polygon) break;\n                return setIn(state, [...pathToActiveImage, \"regions\", regionIndex], _objectSpread(_objectSpread({}, polygon), {}, {\n                  points: polygon.points.concat([[x, y]])\n                }));\n              }\n\n            default:\n              break;\n          }\n        }\n\n        let newRegion;\n        let defaultRegionCls = undefined,\n            defaultRegionColor = \"#ff0000\";\n\n        if (activeImage && (activeImage.regions || []).length > 0) {\n          defaultRegionCls = activeImage.regions.slice(-1)[0].cls;\n          const clsIndex = (state.regionClsList || []).indexOf(defaultRegionCls);\n\n          if (clsIndex !== -1) {\n            defaultRegionColor = colors[clsIndex % colors.length];\n          }\n        }\n\n        switch (state.selectedTool) {\n          case \"create-point\":\n            {\n              state = saveToHistory(state, \"Create Point\");\n              newRegion = {\n                type: \"point\",\n                x,\n                y,\n                highlighted: true,\n                editingLabels: true,\n                color: defaultRegionColor,\n                id: getRandomId(),\n                cls: defaultRegionCls\n              };\n              break;\n            }\n\n          case \"create-rectangle\":\n            {\n              state = saveToHistory(state, \"Create Rectangle\");\n              newRegion = {\n                type: \"rectangle\",\n                x: x,\n                y: y,\n                w: 0,\n                h: 0,\n                highlighted: true,\n                editingLabels: false,\n                color: defaultRegionColor,\n                cls: defaultRegionCls,\n                id: getRandomId()\n              };\n              state = setIn(state, [\"mode\"], {\n                mode: \"RESIZE_BOX\",\n                editLabelEditorAfter: true,\n                regionId: newRegion.id,\n                freedom: [1, 1],\n                original: {\n                  x,\n                  y,\n                  w: newRegion.w,\n                  h: newRegion.h\n                },\n                isNew: true\n              });\n              break;\n            }\n\n          case \"create-polygon\":\n            {\n              if (state.mode && state.mode.mode === \"DRAW_POLYGON\") break;\n              state = saveToHistory(state, \"Create Polygon\");\n              newRegion = {\n                type: \"polygon\",\n                points: [[x, y], [x, y]],\n                open: true,\n                highlighted: true,\n                color: defaultRegionColor,\n                cls: defaultRegionCls,\n                id: getRandomId()\n              };\n              state = setIn(state, [\"mode\"], {\n                mode: \"DRAW_POLYGON\",\n                regionId: newRegion.id\n              });\n              break;\n            }\n\n          default:\n            break;\n        }\n\n        const regions = [...(getIn(state, pathToActiveImage).regions || [])].map(r => setIn(r, [\"editingLabels\"], false).setIn([\"highlighted\"], false)).concat(newRegion ? [newRegion] : []);\n        return setIn(state, [...pathToActiveImage, \"regions\"], regions);\n      }\n\n    case \"MOUSE_UP\":\n      {\n        const x = action.x,\n              y = action.y;\n        const _state3 = state,\n              _state3$mouseDownAt = _state3.mouseDownAt,\n              mouseDownAt = _state3$mouseDownAt === void 0 ? {\n          x,\n          y\n        } : _state3$mouseDownAt;\n        if (!state.mode) return state;\n        state = setIn(state, [\"mouseDownAt\"], null);\n\n        switch (state.mode.mode) {\n          case \"RESIZE_BOX\":\n            {\n              if (state.mode.isNew) {\n                if (Math.abs(state.mode.original.x - x) < 0.002 || Math.abs(state.mode.original.y - y) < 0.002) {\n                  return setIn(modifyRegion(state.mode.regionId, null), [\"mode\"], null);\n                }\n              }\n\n              if (state.mode.editLabelEditorAfter) {\n                return _objectSpread(_objectSpread({}, modifyRegion(state.mode.regionId, {\n                  editingLabels: true\n                })), {}, {\n                  mode: null\n                });\n              }\n            }\n\n          case \"MOVE_REGION\": // case \"RESIZE_KEYPOINTS\":\n\n          case \"MOVE_POLYGON_POINT\":\n            {\n              return _objectSpread(_objectSpread({}, state), {}, {\n                mode: null\n              });\n            }\n          // case \"MOVE_KEYPOINT\": {\n          //   return { ...state, mode: null }\n          // }\n          // case \"CREATE_POINT_LINE\": {\n          //   return state\n          // }\n\n          default:\n            return state;\n        }\n      }\n\n    case \"OPEN_REGION_EDITOR\":\n      {\n        const region = action.region;\n        const regionIndex = getRegionIndex(action.region);\n        if (regionIndex === null) return state;\n        const newRegions = setIn(activeImage.regions.map(r => _objectSpread(_objectSpread({}, r), {}, {\n          highlighted: false,\n          editingLabels: false\n        })), [regionIndex], _objectSpread(_objectSpread({}, (activeImage.regions || [])[regionIndex]), {}, {\n          highlighted: true,\n          editingLabels: true\n        }));\n        return setIn(state, [...pathToActiveImage, \"regions\"], newRegions);\n      }\n\n    case \"CLOSE_REGION_EDITOR\":\n      {\n        const region = action.region;\n        const regionIndex = getRegionIndex(action.region);\n        if (regionIndex === null) return state;\n        return setIn(state, [...pathToActiveImage, \"regions\", regionIndex], _objectSpread(_objectSpread({}, (activeImage.regions || [])[regionIndex]), {}, {\n          editingLabels: false\n        }));\n      }\n\n    case \"DELETE_REGION\":\n      {\n        const regionIndex = getRegionIndex(action.region);\n        if (regionIndex === null) return state;\n        return setIn(state, [...pathToActiveImage, \"regions\"], (activeImage.regions || []).filter(r => r.id !== action.region.id));\n      }\n\n    case \"DELETE_SELECTED_REGION\":\n      {\n        return setIn(state, [...pathToActiveImage, \"regions\"], (activeImage.regions || []).filter(r => !r.highlighted));\n      }\n\n    case \"HEADER_BUTTON_CLICKED\":\n      {\n        const buttonName = action.buttonName.toLowerCase();\n\n        switch (buttonName) {\n          case \"prev\":\n            {\n              if (currentImageIndex === null) return state;\n              if (currentImageIndex === 0) return state;\n              return setNewImage(state.images[currentImageIndex - 1], currentImageIndex - 1);\n            }\n\n          case \"next\":\n            {\n              if (currentImageIndex === null) return state;\n              if (currentImageIndex === state.images.length - 1) return state;\n              return setNewImage(state.images[currentImageIndex + 1], currentImageIndex + 1);\n            }\n\n          case \"clone\":\n            {\n              if (currentImageIndex === null) return state;\n              if (currentImageIndex === state.images.length - 1) return state;\n              return setIn(setNewImage(state.images[currentImageIndex + 1], currentImageIndex + 1), [\"images\", currentImageIndex + 1, \"regions\"], activeImage.regions);\n            }\n          // case \"settings\": {\n          //   return setIn(state, [\"settingsOpen\"], !state.settingsOpen)\n          // }\n\n          case \"help\":\n            {\n              return state;\n            }\n          // case \"fullscreen\": {\n          //   return setIn(state, [\"fullScreen\"], true)\n          // }\n          // case \"exit fullscreen\":\n          // case \"window\": {\n          //   return setIn(state, [\"fullScreen\"], false)\n          // }\n\n          case \"hotkeys\":\n            {\n              return state;\n            }\n\n          case \"exit\":\n          case \"done\":\n            {\n              return state;\n            }\n\n          default:\n            return state;\n        }\n      }\n\n    case \"SELECT_TOOL\":\n      {\n        // if (action.selectedTool === \"show-tags\") {\n        //   setInLocalStorage(\"showTags\", !state.showTags)\n        //   return setIn(state, [\"showTags\"], !state.showTags)\n        // } else if (action.selectedTool === \"show-mask\") {\n        //   return setIn(state, [\"showMask\"], !state.showMask)\n        // }\n        // if (action.selectedTool === \"modify-allowed-area\" && !state.allowedArea) {\n        //   state = setIn(state, [\"allowedArea\"], { x: 0, y: 0, w: 1, h: 1 })\n        // }\n        state = setIn(state, [\"mode\"], null);\n        return setIn(state, [\"selectedTool\"], action.selectedTool);\n      }\n\n    case \"CANCEL\":\n      {\n        const _state4 = state,\n              mode = _state4.mode;\n\n        if (mode) {\n          switch (mode.mode) {\n            // case \"SET_EXPANDING_LINE_WIDTH\":\n            case \"DRAW_POLYGON\":\n              {\n                const regionId = mode.regionId;\n                return modifyRegion(regionId, null);\n              }\n\n            case \"MOVE_POLYGON_POINT\":\n            case \"RESIZE_BOX\":\n            case \"MOVE_REGION\":\n              {\n                return setIn(state, [\"mode\"], null);\n              }\n\n            default:\n              return state;\n          }\n        } // Close any open boxes\n\n\n        const regions = activeImage.regions;\n\n        if (regions && regions.some(r => r.editingLabels)) {\n          return setIn(state, [...pathToActiveImage, \"regions\"], regions.map(r => _objectSpread(_objectSpread({}, r), {}, {\n            editingLabels: false\n          })));\n        } else if (regions) {\n          return setIn(state, [...pathToActiveImage, \"regions\"], regions.map(r => _objectSpread(_objectSpread({}, r), {}, {\n            highlighted: false\n          })));\n        }\n\n        break;\n      }\n\n    default:\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["/Users/yan/Documents/proj/ML4GIS/client/src/annotateComponents/Annotator/reducers/general-reducer.js"],"names":["moveRegion","getIn","setIn","updateIn","moment","isEqual","getActiveImage","saveToHistory","colors","fixTwisted","convertExpandingLineToPolygon","clamp","getLandmarksWithTransform","setInLocalStorage","getRandomId","Math","random","toString","split","state","action","type","Date","now","lastMouseMoveCall","includes","currentImageIndex","pathToActiveImage","activeImage","getRegionIndex","region","regionId","id","regionIndex","regions","findIndex","r","getRegion","modifyRegion","obj","filter","unselectRegions","map","highlighted","closeEditors","editingLabels","setNewImage","img","index","src","frameTime","image","imageIndex","oldRegion","cls","clsIndex","regionClsList","indexOf","color","length","tags","comment","delta","Object","keys","key","mode","point","rectangle","directions","freedom","original","x","y","w","h","polygon","pointIndex","points","slice","open","splice","mouseDownAt","allowedArea","xFree","yFree","ox","oy","ow","oh","dx","min","dw","max","dy","dh","concat","newRegion","defaultRegionCls","undefined","defaultRegionColor","selectedTool","editLabelEditorAfter","isNew","abs","newRegions","buttonName","toLowerCase","images","some"],"mappings":"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","sourcesContent":["// @flow\nimport type { MainLayoutState, Action } from \"../../MainLayout/types\"\nimport { moveRegion } from \"../../ImageCanvas/region-tools.js\"\nimport { getIn, setIn, updateIn } from \"seamless-immutable\"\nimport moment from \"moment\"\nimport isEqual from \"lodash/isEqual\"\nimport getActiveImage from \"./get-active-image\"\nimport { saveToHistory } from \"./history-handler.js\"\nimport colors from \"../../../colors\"\nimport fixTwisted from \"./fix-twisted\"\nimport convertExpandingLineToPolygon from \"./convert-expanding-line-to-polygon\"\nimport clamp from \"clamp\"\nimport getLandmarksWithTransform from \"../../utils/get-landmarks-with-transform\"\nimport setInLocalStorage from \"../../utils/set-in-local-storage\"\n\nconst getRandomId = () => Math.random().toString().split(\".\")[1]\n\nexport default (state: MainLayoutState, action: Action) => {\n  // if (\n  //   state.allowedArea &&\n  //   state.selectedTool !== \"modify-allowed-area\" &&\n  //   [\"MOUSE_DOWN\", \"MOUSE_UP\", \"MOUSE_MOVE\"].includes(action.type)\n  // ) {\n  //   const aa = state.allowedArea\n  //   action.x = clamp(action.x, aa.x, aa.x + aa.w)\n  //   action.y = clamp(action.y, aa.y, aa.y + aa.h)\n  // }\n\n  // if (action.type === \"ON_CLS_ADDED\" && action.cls && action.cls !== \"\") {\n  //   const oldRegionClsList = state.regionClsList\n  //   const newState = {\n  //     ...state,\n  //      regionClsList: oldRegionClsList.concat(action.cls),\n  //   }\n  //   return newState\n  // }\n\n  // Throttle certain actions\n  if (action.type === \"MOUSE_MOVE\") {\n    if (Date.now() - ((state: any).lastMouseMoveCall || 0) < 16) return state\n    state = setIn(state, [\"lastMouseMoveCall\"], Date.now())\n  }\n  if (!action.type.includes(\"MOUSE\")) {\n    state = setIn(state, [\"lastAction\"], action)\n  }\n\n  const { currentImageIndex, pathToActiveImage, activeImage } = getActiveImage(\n    state\n  )\n\n  const getRegionIndex = (region) => {\n    const regionId =\n      typeof region === \"string\" || typeof region === \"number\"\n        ? region\n        : region.id\n    if (!activeImage) return null\n    const regionIndex = (activeImage.regions || []).findIndex(\n      (r) => r.id === regionId\n    )\n    return regionIndex === -1 ? null : regionIndex\n  }\n  const getRegion = (regionId) => {\n    if (!activeImage) return null\n    const regionIndex = getRegionIndex(regionId)\n    if (regionIndex === null) return [null, null]\n    const region = activeImage.regions[regionIndex]\n    return [region, regionIndex]\n  }\n  const modifyRegion = (regionId, obj) => {\n    const [region, regionIndex] = getRegion(regionId)\n    if (!region) return state\n    if (obj !== null) {\n      return setIn(state, [...pathToActiveImage, \"regions\", regionIndex], {\n        ...region,\n        ...obj,\n      })\n    } else {\n      // delete region\n      const regions = activeImage.regions\n      return setIn(\n        state,\n        [...pathToActiveImage, \"regions\"],\n        (regions || []).filter((r) => r.id !== region.id)\n      )\n    }\n  }\n  const unselectRegions = (state: MainLayoutState) => {\n    if (!activeImage) return state\n    return setIn(\n      state,\n      [...pathToActiveImage, \"regions\"],\n      (activeImage.regions || []).map((r) => ({\n        ...r,\n        highlighted: false,\n      }))\n    )\n  }\n\n  const closeEditors = (state: MainLayoutState) => {\n    if (currentImageIndex === null) return state\n    return setIn(\n      state,\n      [...pathToActiveImage, \"regions\"],\n      (activeImage.regions || []).map((r) => ({\n        ...r,\n        editingLabels: false,\n      }))\n    )\n  }\n\n  const setNewImage = (img: string | Object, index: number) => {\n    let { src, frameTime } = typeof img === \"object\" ? img : { src: img }\n    return setIn(\n      setIn(state, [\"selectedImage\"], index),\n      [\"selectedImageFrameTime\"],\n      frameTime\n    )\n  }\n\n  switch (action.type) {\n    case \"@@INIT\": {\n      return state\n    }\n    case \"SELECT_IMAGE\": {\n      return setNewImage(action.image, action.imageIndex)\n    }\n    case \"CHANGE_REGION\": {\n      const regionIndex = getRegionIndex(action.region)\n      if (regionIndex === null) return state\n      const oldRegion = activeImage.regions[regionIndex]\n      if (oldRegion.cls !== action.region.cls) {\n        state = saveToHistory(state, \"Change Region Classification\")\n        const clsIndex = state.regionClsList.indexOf(action.region.cls)\n        if (clsIndex !== -1) {\n          action.region.color = colors[clsIndex % colors.length]\n        }\n      }\n      if (!isEqual(oldRegion.tags, action.region.tags)) {\n        state = saveToHistory(state, \"Change Region Tags\")\n      }\n      if (!isEqual(oldRegion.comment, action.region.comment)) {\n        state = saveToHistory(state, \"Change Region Comment\")\n      }\n      return setIn(\n        state,\n        [...pathToActiveImage, \"regions\", regionIndex],\n        action.region\n      )\n    }\n    case \"CHANGE_IMAGE\": {\n      if (!activeImage) return state\n      const { delta } = action\n      for (const key of Object.keys(delta)) {\n        if (key === \"cls\") saveToHistory(state, \"Change Image Class\")\n        if (key === \"tags\") saveToHistory(state, \"Change Image Tags\")\n        state = setIn(state, [...pathToActiveImage, key], delta[key])\n      }\n      return state\n    }\n    case \"SELECT_REGION\": {\n      const { region } = action\n      const regionIndex = getRegionIndex(action.region)\n      if (regionIndex === null) return state\n      const regions = [...(activeImage.regions || [])].map((r) => ({\n        ...r,\n        highlighted: r.id === region.id,\n        editingLabels: r.id === region.id,\n      }))\n      return setIn(state, [...pathToActiveImage, \"regions\"], regions)\n    }\n    case \"BEGIN_MOVE_POINT\": {\n      state = closeEditors(state)\n      return setIn(state, [\"mode\"], {\n        mode: \"MOVE_REGION\",\n        regionId: action.point.id,\n      })\n    }\n    case \"BEGIN_BOX_TRANSFORM\": {\n      const { rectangle, directions } = action\n      state = closeEditors(state)\n      if (directions[0] === 0 && directions[1] === 0) {\n        return setIn(state, [\"mode\"], { mode: \"MOVE_REGION\", regionId: rectangle.id })\n      } else {\n        return setIn(state, [\"mode\"], {\n          mode: \"RESIZE_BOX\",\n          regionId: rectangle.id,\n          freedom: directions,\n          original: { x: rectangle.x, y: rectangle.y, w: rectangle.w, h: rectangle.h },\n        })\n      }\n    }\n    case \"BEGIN_MOVE_POLYGON_POINT\": {\n      const { polygon, pointIndex } = action\n      state = closeEditors(state)\n      if (\n        state.mode &&\n        state.mode.mode === \"DRAW_POLYGON\" &&\n        pointIndex === 0\n      ) {\n        return setIn(\n          modifyRegion(polygon, {\n            points: polygon.points.slice(0, -1),\n            open: false,\n          }),\n          [\"mode\"],\n          null\n        )\n      } else {\n        state = saveToHistory(state, \"Move Polygon Point\")\n      }\n      return setIn(state, [\"mode\"], {\n        mode: \"MOVE_POLYGON_POINT\",\n        regionId: polygon.id,\n        pointIndex,\n      })\n    }\n    // case \"BEGIN_MOVE_KEYPOINT\": {\n    //   const { region, keypointId } = action\n    //   state = closeEditors(state)\n    //   state = saveToHistory(state, \"Move Keypoint\")\n    //   return setIn(state, [\"mode\"], {\n    //     mode: \"MOVE_KEYPOINT\",\n    //     regionId: region.id,\n    //     keypointId,\n    //   })\n    // }\n    case \"ADD_POLYGON_POINT\": {\n      const { polygon, point, pointIndex } = action\n      const regionIndex = getRegionIndex(polygon)\n      if (regionIndex === null) return state\n      const points = [...polygon.points]\n      points.splice(pointIndex, 0, point)\n      return setIn(state, [...pathToActiveImage, \"regions\", regionIndex], {\n        ...polygon,\n        points,\n      })\n    }\n    case \"MOUSE_MOVE\": {\n      const { x, y } = action\n\n      if (!state.mode) return state\n      if (!activeImage) return state\n      const { mouseDownAt } = state\n      switch (state.mode.mode) {\n        case \"MOVE_POLYGON_POINT\": {\n          const { pointIndex, regionId } = state.mode\n          const regionIndex = getRegionIndex(regionId)\n          if (regionIndex === null) return state\n          return setIn(\n            state,\n            [\n              ...pathToActiveImage,\n              \"regions\",\n              regionIndex,\n              \"points\",\n              pointIndex,\n            ],\n            [x, y]\n          )\n        }\n        // case \"MOVE_KEYPOINT\": {\n        //   const { keypointId, regionId } = state.mode\n        //   const [region, regionIndex] = getRegion(regionId)\n        //   if (regionIndex === null) return state\n        //   return setIn(\n        //     state,\n        //     [\n        //       ...pathToActiveImage,\n        //       \"regions\",\n        //       regionIndex,\n        //       \"points\",\n        //       keypointId,\n        //     ],\n        //     { ...(region: any).points[keypointId], x, y }\n        //   )\n        // }\n        case \"MOVE_REGION\": {\n          const { regionId } = state.mode\n          if (regionId === \"$$allowed_area\") {\n            const {\n              allowedArea: { w, h },\n            } = state\n            return setIn(state, [\"allowedArea\"], {\n              x: x - w / 2,\n              y: y - h / 2,\n              w,\n              h,\n            })\n          }\n          const regionIndex = getRegionIndex(regionId)\n          if (regionIndex === null) return state\n          return setIn(\n            state,\n            [...pathToActiveImage, \"regions\", regionIndex],\n            moveRegion(activeImage.regions[regionIndex], x, y)\n          )\n        }\n        case \"RESIZE_BOX\": {\n          const {\n            regionId,\n            freedom: [xFree, yFree],\n            original: { x: ox, y: oy, w: ow, h: oh },\n          } = state.mode\n\n          const dx = xFree === 0 ? ox : xFree === -1 ? Math.min(ox + ow, x) : ox\n          const dw =\n            xFree === 0\n              ? ow\n              : xFree === -1\n              ? ow + (ox - dx)\n              : Math.max(0, ow + (x - ox - ow))\n          const dy = yFree === 0 ? oy : yFree === -1 ? Math.min(oy + oh, y) : oy\n          const dh =\n            yFree === 0\n              ? oh\n              : yFree === -1\n              ? oh + (oy - dy)\n              : Math.max(0, oh + (y - oy - oh))\n\n          // determine if we should switch the freedom\n          if (dw <= 0.001) {\n            state = setIn(state, [\"mode\", \"freedom\"], [xFree * -1, yFree])\n          }\n          if (dh <= 0.001) {\n            state = setIn(state, [\"mode\", \"freedom\"], [xFree, yFree * -1])\n          }\n\n          if (regionId === \"$$allowed_area\") {\n            return setIn(state, [\"allowedArea\"], {\n              x: dx,\n              w: dw,\n              y: dy,\n              h: dh,\n            })\n          }\n\n          const regionIndex = getRegionIndex(regionId)\n          if (regionIndex === null) return state\n          const rectangle= activeImage.regions[regionIndex]\n\n          return setIn(state, [...pathToActiveImage, \"regions\", regionIndex], {\n            ...rectangle,\n            x: dx,\n            w: dw,\n            y: dy,\n            h: dh,\n          })\n        }\n        // case \"RESIZE_KEYPOINTS\": {\n        //   const { regionId, landmarks, centerX, centerY } = state.mode\n        //   const distFromCenter = Math.sqrt(\n        //     (centerX - x) ** 2 + (centerY - y) ** 2\n        //   )\n        //   const scale = distFromCenter / 0.15\n        //   return modifyRegion(regionId, {\n        //     points: getLandmarksWithTransform({\n        //       landmarks,\n        //       center: { x: centerX, y: centerY },\n        //       scale,\n        //     }),\n        //   })\n        // }\n        case \"DRAW_POLYGON\": {\n          const { regionId } = state.mode\n          const [region, regionIndex] = getRegion(regionId)\n          if (!region) return setIn(state, [\"mode\"], null)\n          return setIn(\n            state,\n            [\n              ...pathToActiveImage,\n              \"regions\",\n              regionIndex,\n              \"points\",\n              (region: any).points.length - 1,\n            ],\n            [x, y]\n          )\n        }\n        default:\n          return state\n      }\n    }\n    case \"MOUSE_DOWN\": {\n      if (!activeImage) return state\n      const { x, y } = action\n\n      state = setIn(state, [\"mouseDownAt\"], { x, y })\n\n      if (state.mode) {\n        switch (state.mode.mode) {\n          case \"DRAW_POLYGON\": {\n            const [polygon, regionIndex] = getRegion(state.mode.regionId)\n            if (!polygon) break\n            return setIn(\n              state,\n              [...pathToActiveImage, \"regions\", regionIndex],\n              { ...polygon, points: polygon.points.concat([[x, y]]) }\n            )\n          }\n          default:\n            break\n        }\n      }\n\n      let newRegion\n      let defaultRegionCls = undefined,\n        defaultRegionColor = \"#ff0000\"\n      if (activeImage && (activeImage.regions || []).length > 0) {\n        defaultRegionCls = activeImage.regions.slice(-1)[0].cls\n        const clsIndex = (state.regionClsList || []).indexOf(defaultRegionCls)\n        if (clsIndex !== -1) {\n          defaultRegionColor = colors[clsIndex % colors.length]\n        }\n      }\n\n      switch (state.selectedTool) {\n        case \"create-point\": {\n          state = saveToHistory(state, \"Create Point\")\n          newRegion = {\n            type: \"point\",\n            x,\n            y,\n            highlighted: true,\n            editingLabels: true,\n            color: defaultRegionColor,\n            id: getRandomId(),\n            cls: defaultRegionCls,\n          }\n          break\n        }\n        case \"create-rectangle\": {\n          state = saveToHistory(state, \"Create Rectangle\")\n          newRegion = {\n            type: \"rectangle\",\n            x: x,\n            y: y,\n            w: 0,\n            h: 0,\n            highlighted: true,\n            editingLabels: false,\n            color: defaultRegionColor,\n            cls: defaultRegionCls,\n            id: getRandomId(),\n          }\n          state = setIn(state, [\"mode\"], {\n            mode: \"RESIZE_BOX\",\n            editLabelEditorAfter: true,\n            regionId: newRegion.id,\n            freedom: [1, 1],\n            original: { x, y, w: newRegion.w, h: newRegion.h },\n            isNew: true,\n          })\n          break\n        }\n        case \"create-polygon\": {\n          if (state.mode && state.mode.mode === \"DRAW_POLYGON\") break\n          state = saveToHistory(state, \"Create Polygon\")\n          newRegion = {\n            type: \"polygon\",\n            points: [\n              [x, y],\n              [x, y],\n            ],\n            open: true,\n            highlighted: true,\n            color: defaultRegionColor,\n            cls: defaultRegionCls,\n            id: getRandomId(),\n          }\n          state = setIn(state, [\"mode\"], {\n            mode: \"DRAW_POLYGON\",\n            regionId: newRegion.id,\n          })\n          break\n        }\n        default:\n          break\n      }\n\n      const regions = [...(getIn(state, pathToActiveImage).regions || [])]\n        .map((r) =>\n          setIn(r, [\"editingLabels\"], false).setIn([\"highlighted\"], false)\n        )\n        .concat(newRegion ? [newRegion] : [])\n\n      return setIn(state, [...pathToActiveImage, \"regions\"], regions)\n    }\n    case \"MOUSE_UP\": {\n      const { x, y } = action\n\n      const { mouseDownAt = { x, y } } = state\n      if (!state.mode) return state\n      state = setIn(state, [\"mouseDownAt\"], null)\n      switch (state.mode.mode) {\n        case \"RESIZE_BOX\": {\n          if (state.mode.isNew) {\n            if (\n              Math.abs(state.mode.original.x - x) < 0.002 ||\n              Math.abs(state.mode.original.y - y) < 0.002\n            ) {\n              return setIn(\n                modifyRegion(state.mode.regionId, null),\n                [\"mode\"],\n                null\n              )\n            }\n          }\n          if (state.mode.editLabelEditorAfter) {\n            return {\n              ...modifyRegion(state.mode.regionId, { editingLabels: true }),\n              mode: null,\n            }\n          }\n        }\n        case \"MOVE_REGION\":\n        // case \"RESIZE_KEYPOINTS\":\n        case \"MOVE_POLYGON_POINT\": {\n          return { ...state, mode: null }\n        }\n        // case \"MOVE_KEYPOINT\": {\n        //   return { ...state, mode: null }\n        // }\n        // case \"CREATE_POINT_LINE\": {\n        //   return state\n        // }\n        default:\n          return state\n      }\n    }\n    case \"OPEN_REGION_EDITOR\": {\n      const { region } = action\n      const regionIndex = getRegionIndex(action.region)\n      if (regionIndex === null) return state\n      const newRegions = setIn(\n        activeImage.regions.map((r) => ({\n          ...r,\n          highlighted: false,\n          editingLabels: false,\n        })),\n        [regionIndex],\n        {\n          ...(activeImage.regions || [])[regionIndex],\n          highlighted: true,\n          editingLabels: true,\n        }\n      )\n      return setIn(state, [...pathToActiveImage, \"regions\"], newRegions)\n    }\n    case \"CLOSE_REGION_EDITOR\": {\n      const { region } = action\n      const regionIndex = getRegionIndex(action.region)\n      if (regionIndex === null) return state\n      return setIn(state, [...pathToActiveImage, \"regions\", regionIndex], {\n        ...(activeImage.regions || [])[regionIndex],\n        editingLabels: false,\n      })\n    }\n    case \"DELETE_REGION\": {\n      const regionIndex = getRegionIndex(action.region)\n      if (regionIndex === null) return state\n      return setIn(\n        state,\n        [...pathToActiveImage, \"regions\"],\n        (activeImage.regions || []).filter((r) => r.id !== action.region.id)\n      )\n    }\n    case \"DELETE_SELECTED_REGION\": {\n      return setIn(\n        state,\n        [...pathToActiveImage, \"regions\"],\n        (activeImage.regions || []).filter((r) => !r.highlighted)\n      )\n    }\n    case \"HEADER_BUTTON_CLICKED\": {\n      const buttonName = action.buttonName.toLowerCase()\n      switch (buttonName) {\n        case \"prev\": {\n          if (currentImageIndex === null) return state\n          if (currentImageIndex === 0) return state\n          return setNewImage(\n            state.images[currentImageIndex - 1],\n            currentImageIndex - 1\n          )\n        }\n        case \"next\": {\n          if (currentImageIndex === null) return state\n          if (currentImageIndex === state.images.length - 1) return state\n          return setNewImage(\n            state.images[currentImageIndex + 1],\n            currentImageIndex + 1\n          )\n        }\n        case \"clone\": {\n          if (currentImageIndex === null) return state\n          if (currentImageIndex === state.images.length - 1) return state\n          return setIn(\n            setNewImage(\n              state.images[currentImageIndex + 1],\n              currentImageIndex + 1\n            ),\n            [\"images\", currentImageIndex + 1, \"regions\"],\n            activeImage.regions\n          )\n        }\n        // case \"settings\": {\n        //   return setIn(state, [\"settingsOpen\"], !state.settingsOpen)\n        // }\n        case \"help\": {\n          return state\n        }\n        // case \"fullscreen\": {\n        //   return setIn(state, [\"fullScreen\"], true)\n        // }\n        // case \"exit fullscreen\":\n        // case \"window\": {\n        //   return setIn(state, [\"fullScreen\"], false)\n        // }\n        case \"hotkeys\": {\n          return state\n        }\n        case \"exit\":\n        case \"done\": {\n          return state\n        }\n        default:\n          return state\n      }\n    }\n    case \"SELECT_TOOL\": {\n      // if (action.selectedTool === \"show-tags\") {\n      //   setInLocalStorage(\"showTags\", !state.showTags)\n      //   return setIn(state, [\"showTags\"], !state.showTags)\n      // } else if (action.selectedTool === \"show-mask\") {\n      //   return setIn(state, [\"showMask\"], !state.showMask)\n      // }\n      // if (action.selectedTool === \"modify-allowed-area\" && !state.allowedArea) {\n      //   state = setIn(state, [\"allowedArea\"], { x: 0, y: 0, w: 1, h: 1 })\n      // }\n      state = setIn(state, [\"mode\"], null)\n      return setIn(state, [\"selectedTool\"], action.selectedTool)\n    }\n    case \"CANCEL\": {\n      const { mode } = state\n      if (mode) {\n        switch (mode.mode) {\n          // case \"SET_EXPANDING_LINE_WIDTH\":\n          case \"DRAW_POLYGON\": {\n            const { regionId } = mode\n            return modifyRegion(regionId, null)\n          }\n          case \"MOVE_POLYGON_POINT\":\n          case \"RESIZE_BOX\":\n          case \"MOVE_REGION\": {\n            return setIn(state, [\"mode\"], null)\n          }\n          default:\n            return state\n        }\n      }\n      // Close any open boxes\n      const regions: any = activeImage.regions\n      if (regions && regions.some((r) => r.editingLabels)) {\n        return setIn(\n          state,\n          [...pathToActiveImage, \"regions\"],\n          regions.map((r) => ({\n            ...r,\n            editingLabels: false,\n          }))\n        )\n      } else if (regions) {\n        return setIn(\n          state,\n          [...pathToActiveImage, \"regions\"],\n          regions.map((r) => ({\n            ...r,\n            highlighted: false,\n          }))\n        )\n      }\n      break\n    }\n    default:\n      break\n  }\n  return state\n}\n"]},"metadata":{},"sourceType":"module"}