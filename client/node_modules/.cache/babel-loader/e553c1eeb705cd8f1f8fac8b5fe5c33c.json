{"ast":null,"code":"import _objectSpread from \"/Users/yan/Documents/proj/ML4GIS/client/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// export type PixelRegion =\n//   | {|\n//       ...$Exact<BaseRegion>,\n//       type: \"pixel\",\n//       sx: number,\n//       sy: number,\n//       w: number,\n//       h: number,\n//       src: string,\n//     |}\n//   | {|\n//       ...$Exact<BaseRegion>,\n//       type: \"pixel\",\n//       points: Array<[number, number]>,\n//     |}\n// export type ExpandingLine = {|\n//   ...$Exact<BaseRegion>,\n//   type: \"expanding-line\",\n//   points: Array<{ x: number, y: number, angle: number, width: number }>,\n// |}\n// export type KeypointDefinition = {|\n//   label: string,\n//   color: string,\n//   defaultPosition: [number, number],\n// |}\n// export type KeypointId = string\n// export type KeypointsDefinition = {|\n//   [id: string]: {\n//     connections: Array<[KeypointId, KeypointId]>,\n//     landmarks: {\n//       [KeypointId]: KeypointDefinition,\n//     },\n//   },\n// |}\n//\n// export type Keypoints = {|\n//   ...$Exact<BaseRegion>,\n//   type: \"keypoints\",\n//   keypointsDefinitionId: string,\n//   points: {\n//     [string]: { x: number, y: number },\n//   },\n// |}\n// | Keypoints\nexport const getEnclosingBox = region => {\n  switch (region.type) {\n    case \"polygon\":\n      {\n        const rectangle = {\n          x: Math.min(...region.points.map(([x, y]) => x)),\n          y: Math.min(...region.points.map(([x, y]) => y)),\n          w: 0,\n          h: 0\n        };\n        rectangle.w = Math.max(...region.points.map(([x, y]) => x)) - rectangle.x;\n        rectangle.h = Math.max(...region.points.map(([x, y]) => y)) - rectangle.y;\n        return rectangle;\n      }\n    // case \"keypoints\": {\n    //   const minX = Math.min(\n    //     ...Object.values(region.points).map(({ x, y }) => x)\n    //   )\n    //   const minY = Math.min(\n    //     ...Object.values(region.points).map(({ x, y }) => y)\n    //   )\n    //   const maxX = Math.max(\n    //     ...Object.values(region.points).map(({ x, y }) => x)\n    //   )\n    //   const maxY = Math.max(\n    //     ...Object.values(region.points).map(({ x, y }) => y)\n    //   )\n    //   return {\n    //     x: minX,\n    //     y: minY,\n    //     w: maxX - minX,\n    //     h: maxY - minY,\n    //   }\n    // }\n\n    case \"rectangle\":\n      {\n        return {\n          x: region.x,\n          y: region.y,\n          w: region.w,\n          h: region.h\n        };\n      }\n\n    case \"point\":\n      {\n        return {\n          x: region.x,\n          y: region.y,\n          w: 0,\n          h: 0\n        };\n      }\n\n    default:\n      {\n        return {\n          x: 0,\n          y: 0,\n          w: 0,\n          h: 0\n        };\n      }\n  }\n\n  throw new Error(\"unknown region\");\n};\nexport const moveRegion = (region, x, y) => {\n  switch (region.type) {\n    case \"point\":\n      {\n        return _objectSpread(_objectSpread({}, region), {}, {\n          x,\n          y\n        });\n      }\n\n    case \"rectangle\":\n      {\n        return _objectSpread(_objectSpread({}, region), {}, {\n          x: x - region.w / 2,\n          y: y - region.h / 2\n        });\n      }\n  }\n\n  return region;\n};","map":{"version":3,"sources":["/Users/yan/Documents/proj/ML4GIS/client/src/annotateComponents/ImageCanvas/region-tools.js"],"names":["getEnclosingBox","region","type","rectangle","x","Math","min","points","map","y","w","h","max","Error","moveRegion"],"mappings":"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","sourcesContent":["// @flow\n\nexport type BaseRegion = {\n  id: string | number,\n  cls?: string,\n  locked?: boolean,\n  visible?: boolean,\n  color: string,\n  // editingLabels?: boolean,\n  highlighted?: boolean,\n  tags?: Array<string>,\n}\n\nexport type Point = {|\n  ...$Exact<BaseRegion>,\n  type: \"point\",\n  x: number,\n  y: number,\n|}\n\n// export type PixelRegion =\n//   | {|\n//       ...$Exact<BaseRegion>,\n//       type: \"pixel\",\n//       sx: number,\n//       sy: number,\n//       w: number,\n//       h: number,\n//       src: string,\n//     |}\n//   | {|\n//       ...$Exact<BaseRegion>,\n//       type: \"pixel\",\n//       points: Array<[number, number]>,\n//     |}\nexport type Rectangle = {|\n  ...$Exact<BaseRegion>,\n  type: \"rectangle\",\n  x: number,\n  y: number,\n  w: number,\n  h: number,\n|}\n\nexport type Polygon = {|\n  ...$Exact<BaseRegion>,\n  type: \"polygon\",\n  open?: boolean,\n  points: Array<[number, number]>,\n|}\n// export type ExpandingLine = {|\n//   ...$Exact<BaseRegion>,\n//   type: \"expanding-line\",\n//   points: Array<{ x: number, y: number, angle: number, width: number }>,\n// |}\n\n// export type KeypointDefinition = {|\n//   label: string,\n//   color: string,\n//   defaultPosition: [number, number],\n// |}\n\n// export type KeypointId = string\n\n// export type KeypointsDefinition = {|\n//   [id: string]: {\n//     connections: Array<[KeypointId, KeypointId]>,\n//     landmarks: {\n//       [KeypointId]: KeypointDefinition,\n//     },\n//   },\n// |}\n//\n// export type Keypoints = {|\n//   ...$Exact<BaseRegion>,\n//   type: \"keypoints\",\n//   keypointsDefinitionId: string,\n//   points: {\n//     [string]: { x: number, y: number },\n//   },\n// |}\n\nexport type Region =\n  | Point\n  // | PixelRegion\n  | Rectangle\n  | Polygon\n  // | Keypoints\n\nexport const getEnclosingBox = (region: Region) => {\n  switch (region.type) {\n    case \"polygon\": {\n      const rectangle = {\n        x: Math.min(...region.points.map(([x, y]) => x)),\n        y: Math.min(...region.points.map(([x, y]) => y)),\n        w: 0,\n        h: 0,\n      }\n      rectangle.w = Math.max(...region.points.map(([x, y]) => x)) - rectangle.x\n      rectangle.h = Math.max(...region.points.map(([x, y]) => y)) - rectangle.y\n      return rectangle\n    }\n    // case \"keypoints\": {\n    //   const minX = Math.min(\n    //     ...Object.values(region.points).map(({ x, y }) => x)\n    //   )\n    //   const minY = Math.min(\n    //     ...Object.values(region.points).map(({ x, y }) => y)\n    //   )\n    //   const maxX = Math.max(\n    //     ...Object.values(region.points).map(({ x, y }) => x)\n    //   )\n    //   const maxY = Math.max(\n    //     ...Object.values(region.points).map(({ x, y }) => y)\n    //   )\n    //   return {\n    //     x: minX,\n    //     y: minY,\n    //     w: maxX - minX,\n    //     h: maxY - minY,\n    //   }\n    // }\n\n    case \"rectangle\": {\n      return { x: region.x, y: region.y, w: region.w, h: region.h }\n    }\n    case \"point\": {\n      return { x: region.x, y: region.y, w: 0, h: 0 }\n    }\n    default: {\n      return { x: 0, y: 0, w: 0, h: 0 }\n    }\n  }\n  throw new Error(\"unknown region\")\n}\n\nexport const moveRegion = (region: Region, x: number, y: number) => {\n  switch (region.type) {\n    case \"point\": {\n      return { ...region, x, y }\n    }\n    case \"rectangle\": {\n      return { ...region, x: x - region.w / 2, y: y - region.h / 2 }\n    }\n  }\n  return region\n}\n"]},"metadata":{},"sourceType":"module"}