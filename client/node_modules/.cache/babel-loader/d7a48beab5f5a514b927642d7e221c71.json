{"ast":null,"code":"import React from 'react';\n/**\n * Modifies in-place and returns a React Component class such that it correctly uses\n * the React context API appropriate for the version of React being used.\n *\n * @see https://reactjs.org/docs/context.html\n *\n * @param {React.Component} Component React component to modify to use the correct\n *        context API\n * @param {Object} options Hash of options that define the shape and default values\n *        of the context to use with descendant components.\n * @param {Object} options.deprecatedAPI Hash of options that satisfy the legacy\n *        or deprecated pre React 16.* API\n * @param {Object} options.deprecatedAPI.contextTypes Context types describing the\n *        shape and type of the context that Component consumes, expressed as React\n *        prop types\n * @param {Object} options.deprecatedAPI.childContextTypes Context types describing the\n *        shape and type of the context that Component makes available to its descendants\n *        to consume, expressed as React prop types\n * @param {Object} options.newAPI Hash of options that satisfy the new context API,\n *        available from React 16.* onwards\n * @param {Object} options.newAPI.contextType Object describing the shape and default\n *        values of the context instance used provide context to descendant components\n * @returns {React.Component} Component that has now had the specified context applied\n */\n\nfunction backwardsCompatibleContext(Component, _ref) {\n  var _ref$deprecatedAPI = _ref.deprecatedAPI,\n      contextTypes = _ref$deprecatedAPI.contextTypes,\n      childContextTypes = _ref$deprecatedAPI.childContextTypes,\n      contextType = _ref.newAPI.contextType;\n  /**\n   * React v16.* introduces a new context API and deprecates the previous, experimental one\n   */\n\n  if (typeof React.createContext === 'undefined') {\n    /**\n     * We apply the deprecated context if the new createContext method is not defined.\n     * @note this uses the new context API for React v16.*, even though it is still\n     * available until React v17.*\n     */\n\n    /**\n     * The contextTypes and childContextTypes are the same as each react hotkeys component\n     * that uses context, both consumes its most direct ancestor's context and modifies\n     * the context of its descendants in order to recursively pass down the guid of the\n     * most direct ancestor\n     */\n    Component.contextTypes = contextTypes;\n    Component.childContextTypes = childContextTypes;\n\n    Component.prototype.getChildContext = function () {\n      return this._childContext;\n    };\n  } else {\n    var context = React.createContext(contextType);\n    Component.contextType = context;\n    Component.prototype._originalRender = Component.prototype.render;\n    /**\n     * We unfortunately have to wrap the original render method of the Component to\n     * dynamically add the context Provider component.\n     *\n     * No ill-effects have been discovered during testing, but if strange occurrences\n     * or edge cases start to appear - this may be a great place to start looking.\n     */\n\n    Component.prototype.render = function () {\n      var result = this._originalRender();\n\n      if (result) {\n        return React.createElement(context.Provider, {\n          value: this._childContext\n        }, result);\n      } else {\n        return null;\n      }\n    };\n  }\n\n  return Component;\n}\n\nexport default backwardsCompatibleContext;","map":{"version":3,"sources":["/Users/yan/Documents/proj/ML4GIS/client/node_modules/react-hotkeys/es/utils/backwardsCompatibleContext.js"],"names":["React","backwardsCompatibleContext","Component","_ref","_ref$deprecatedAPI","deprecatedAPI","contextTypes","childContextTypes","contextType","newAPI","createContext","prototype","getChildContext","_childContext","context","_originalRender","render","result","createElement","Provider","value"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,0BAAT,CAAoCC,SAApC,EAA+CC,IAA/C,EAAqD;AACnD,MAAIC,kBAAkB,GAAGD,IAAI,CAACE,aAA9B;AAAA,MACIC,YAAY,GAAGF,kBAAkB,CAACE,YADtC;AAAA,MAEIC,iBAAiB,GAAGH,kBAAkB,CAACG,iBAF3C;AAAA,MAGIC,WAAW,GAAGL,IAAI,CAACM,MAAL,CAAYD,WAH9B;AAKA;AACF;AACA;;AACE,MAAI,OAAOR,KAAK,CAACU,aAAb,KAA+B,WAAnC,EAAgD;AAC9C;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACIR,IAAAA,SAAS,CAACI,YAAV,GAAyBA,YAAzB;AACAJ,IAAAA,SAAS,CAACK,iBAAV,GAA8BA,iBAA9B;;AAEAL,IAAAA,SAAS,CAACS,SAAV,CAAoBC,eAApB,GAAsC,YAAY;AAChD,aAAO,KAAKC,aAAZ;AACD,KAFD;AAGD,GAnBD,MAmBO;AACL,QAAIC,OAAO,GAAGd,KAAK,CAACU,aAAN,CAAoBF,WAApB,CAAd;AACAN,IAAAA,SAAS,CAACM,WAAV,GAAwBM,OAAxB;AACAZ,IAAAA,SAAS,CAACS,SAAV,CAAoBI,eAApB,GAAsCb,SAAS,CAACS,SAAV,CAAoBK,MAA1D;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEId,IAAAA,SAAS,CAACS,SAAV,CAAoBK,MAApB,GAA6B,YAAY;AACvC,UAAIC,MAAM,GAAG,KAAKF,eAAL,EAAb;;AAEA,UAAIE,MAAJ,EAAY;AACV,eAAOjB,KAAK,CAACkB,aAAN,CAAoBJ,OAAO,CAACK,QAA5B,EAAsC;AAC3CC,UAAAA,KAAK,EAAE,KAAKP;AAD+B,SAAtC,EAEJI,MAFI,CAAP;AAGD,OAJD,MAIO;AACL,eAAO,IAAP;AACD;AACF,KAVD;AAWD;;AAED,SAAOf,SAAP;AACD;;AAED,eAAeD,0BAAf","sourcesContent":["import React from 'react';\n/**\n * Modifies in-place and returns a React Component class such that it correctly uses\n * the React context API appropriate for the version of React being used.\n *\n * @see https://reactjs.org/docs/context.html\n *\n * @param {React.Component} Component React component to modify to use the correct\n *        context API\n * @param {Object} options Hash of options that define the shape and default values\n *        of the context to use with descendant components.\n * @param {Object} options.deprecatedAPI Hash of options that satisfy the legacy\n *        or deprecated pre React 16.* API\n * @param {Object} options.deprecatedAPI.contextTypes Context types describing the\n *        shape and type of the context that Component consumes, expressed as React\n *        prop types\n * @param {Object} options.deprecatedAPI.childContextTypes Context types describing the\n *        shape and type of the context that Component makes available to its descendants\n *        to consume, expressed as React prop types\n * @param {Object} options.newAPI Hash of options that satisfy the new context API,\n *        available from React 16.* onwards\n * @param {Object} options.newAPI.contextType Object describing the shape and default\n *        values of the context instance used provide context to descendant components\n * @returns {React.Component} Component that has now had the specified context applied\n */\n\nfunction backwardsCompatibleContext(Component, _ref) {\n  var _ref$deprecatedAPI = _ref.deprecatedAPI,\n      contextTypes = _ref$deprecatedAPI.contextTypes,\n      childContextTypes = _ref$deprecatedAPI.childContextTypes,\n      contextType = _ref.newAPI.contextType;\n\n  /**\n   * React v16.* introduces a new context API and deprecates the previous, experimental one\n   */\n  if (typeof React.createContext === 'undefined') {\n    /**\n     * We apply the deprecated context if the new createContext method is not defined.\n     * @note this uses the new context API for React v16.*, even though it is still\n     * available until React v17.*\n     */\n\n    /**\n     * The contextTypes and childContextTypes are the same as each react hotkeys component\n     * that uses context, both consumes its most direct ancestor's context and modifies\n     * the context of its descendants in order to recursively pass down the guid of the\n     * most direct ancestor\n     */\n    Component.contextTypes = contextTypes;\n    Component.childContextTypes = childContextTypes;\n\n    Component.prototype.getChildContext = function () {\n      return this._childContext;\n    };\n  } else {\n    var context = React.createContext(contextType);\n    Component.contextType = context;\n    Component.prototype._originalRender = Component.prototype.render;\n    /**\n     * We unfortunately have to wrap the original render method of the Component to\n     * dynamically add the context Provider component.\n     *\n     * No ill-effects have been discovered during testing, but if strange occurrences\n     * or edge cases start to appear - this may be a great place to start looking.\n     */\n\n    Component.prototype.render = function () {\n      var result = this._originalRender();\n\n      if (result) {\n        return React.createElement(context.Provider, {\n          value: this._childContext\n        }, result);\n      } else {\n        return null;\n      }\n    };\n  }\n\n  return Component;\n}\n\nexport default backwardsCompatibleContext;"]},"metadata":{},"sourceType":"module"}