{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * @typedef {KeyEventState[]} KeyEvent A record indicating which of the key events\n * have been registered to a particular key. The first bit is for the keydown event,\n * the second keypress and the third is for keyup.\n *\n * @example: A record for an key that has seen the keydown and keypress event, but not\n * the keyup event\n *\n * [1,1,0]\n */\n\n\nimport isUndefined from '../../utils/isUndefined';\nimport KeyEventState from '../../const/KeyEventState';\n/**\n * Creates and modifies KeyEvents\n * @class\n */\n\nvar KeyEventStateArrayManager = /*#__PURE__*/function () {\n  function KeyEventStateArrayManager() {\n    _classCallCheck(this, KeyEventStateArrayManager);\n  }\n\n  _createClass(KeyEventStateArrayManager, null, [{\n    key: \"newRecord\",\n\n    /**\n     * Makes a new KeyEvent with one of the bits set to true\n     * @param {KeyEventType=} keyEventType Index of bit to set to true\n     * @param {KeyEventState} keyEventState The state to set the key event to\n     * @returns {KeyEvent} New key event record with bit set to true\n     */\n    value: function newRecord(keyEventType, keyEventState) {\n      var record = [KeyEventState.unseen, KeyEventState.unseen, KeyEventState.unseen];\n\n      if (!isUndefined(keyEventType)) {\n        for (var i = 0; i <= keyEventType; i++) {\n          record[i] = keyEventState;\n        }\n      }\n\n      return record;\n    }\n    /**\n     * Sets a bit in the map to true\n     * @param {KeyEvent} record Map to set a bit to true\n     * @param {KeyEventType} index Index of bit to set\n     * @param {KeyEventState} keyEventState The state to set the key event to\n     */\n\n  }, {\n    key: \"setBit\",\n    value: function setBit(record, index, keyEventState) {\n      record[index] = keyEventState;\n      return record;\n    }\n    /**\n     * Returns a new record with the same values as the one passed to it\n     * @param {KeyEvent} original Record to copy\n     * @returns {KeyEvent} Record with the same values as the original\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone(original) {\n      var record = this.newRecord();\n\n      for (var i = 0; i < original.length; i++) {\n        record[i] = original[i];\n      }\n\n      return record;\n    }\n  }]);\n\n  return KeyEventStateArrayManager;\n}();\n\nexport default KeyEventStateArrayManager;","map":{"version":3,"sources":["C:/Users/pccis/Desktop/ML4GIS-develop/ML4GIS-develop/client/node_modules/react-hotkeys/es/lib/shared/KeyEventStateArrayManager.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","isUndefined","KeyEventState","KeyEventStateArrayManager","value","newRecord","keyEventType","keyEventState","record","unseen","setBit","index","clone","original"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @typedef {KeyEventState[]} KeyEvent A record indicating which of the key events\n * have been registered to a particular key. The first bit is for the keydown event,\n * the second keypress and the third is for keyup.\n *\n * @example: A record for an key that has seen the keydown and keypress event, but not\n * the keyup event\n *\n * [1,1,0]\n */\nimport isUndefined from '../../utils/isUndefined';\nimport KeyEventState from '../../const/KeyEventState';\n/**\n * Creates and modifies KeyEvents\n * @class\n */\n\nvar KeyEventStateArrayManager =\n/*#__PURE__*/\nfunction () {\n  function KeyEventStateArrayManager() {\n    _classCallCheck(this, KeyEventStateArrayManager);\n  }\n\n  _createClass(KeyEventStateArrayManager, null, [{\n    key: \"newRecord\",\n\n    /**\n     * Makes a new KeyEvent with one of the bits set to true\n     * @param {KeyEventType=} keyEventType Index of bit to set to true\n     * @param {KeyEventState} keyEventState The state to set the key event to\n     * @returns {KeyEvent} New key event record with bit set to true\n     */\n    value: function newRecord(keyEventType, keyEventState) {\n      var record = [KeyEventState.unseen, KeyEventState.unseen, KeyEventState.unseen];\n\n      if (!isUndefined(keyEventType)) {\n        for (var i = 0; i <= keyEventType; i++) {\n          record[i] = keyEventState;\n        }\n      }\n\n      return record;\n    }\n    /**\n     * Sets a bit in the map to true\n     * @param {KeyEvent} record Map to set a bit to true\n     * @param {KeyEventType} index Index of bit to set\n     * @param {KeyEventState} keyEventState The state to set the key event to\n     */\n\n  }, {\n    key: \"setBit\",\n    value: function setBit(record, index, keyEventState) {\n      record[index] = keyEventState;\n      return record;\n    }\n    /**\n     * Returns a new record with the same values as the one passed to it\n     * @param {KeyEvent} original Record to copy\n     * @returns {KeyEvent} Record with the same values as the original\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone(original) {\n      var record = this.newRecord();\n\n      for (var i = 0; i < original.length; i++) {\n        record[i] = original[i];\n      }\n\n      return record;\n    }\n  }]);\n\n  return KeyEventStateArrayManager;\n}();\n\nexport default KeyEventStateArrayManager;"]},"metadata":{},"sourceType":"module"}