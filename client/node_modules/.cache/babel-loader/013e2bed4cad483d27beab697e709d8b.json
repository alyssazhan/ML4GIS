{"ast":null,"code":"import useHoverDirty from './useHoverDirty';\nimport useMouse from './useMouse';\nvar nullRef = {\n  current: null\n};\n\nvar useMouseHovered = function useMouseHovered(ref, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var whenHovered = !!options.whenHovered;\n  var bound = !!options.bound;\n  var isHovered = useHoverDirty(ref, whenHovered);\n  var state = useMouse(whenHovered && !isHovered ? nullRef : ref);\n\n  if (bound) {\n    state.elX = Math.max(0, Math.min(state.elX, state.elW));\n    state.elY = Math.max(0, Math.min(state.elY, state.elH));\n  }\n\n  return state;\n};\n\nexport default useMouseHovered;","map":{"version":3,"sources":["D:/GitHub/ML4GIS/client/node_modules/react-use/esm/useMouseHovered.js"],"names":["useHoverDirty","useMouse","nullRef","current","useMouseHovered","ref","options","whenHovered","bound","isHovered","state","elX","Math","max","min","elW","elY","elH"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,IAAIC,OAAO,GAAG;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAAd;;AACA,IAAIC,eAAe,GAAG,SAAlBA,eAAkB,CAAUC,GAAV,EAAeC,OAAf,EAAwB;AAC1C,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,MAAIC,WAAW,GAAG,CAAC,CAACD,OAAO,CAACC,WAA5B;AACA,MAAIC,KAAK,GAAG,CAAC,CAACF,OAAO,CAACE,KAAtB;AACA,MAAIC,SAAS,GAAGT,aAAa,CAACK,GAAD,EAAME,WAAN,CAA7B;AACA,MAAIG,KAAK,GAAGT,QAAQ,CAACM,WAAW,IAAI,CAACE,SAAhB,GAA4BP,OAA5B,GAAsCG,GAAvC,CAApB;;AACA,MAAIG,KAAJ,EAAW;AACPE,IAAAA,KAAK,CAACC,GAAN,GAAYC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,GAAL,CAASJ,KAAK,CAACC,GAAf,EAAoBD,KAAK,CAACK,GAA1B,CAAZ,CAAZ;AACAL,IAAAA,KAAK,CAACM,GAAN,GAAYJ,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,GAAL,CAASJ,KAAK,CAACM,GAAf,EAAoBN,KAAK,CAACO,GAA1B,CAAZ,CAAZ;AACH;;AACD,SAAOP,KAAP;AACH,CAXD;;AAYA,eAAeN,eAAf","sourcesContent":["import useHoverDirty from './useHoverDirty';\r\nimport useMouse from './useMouse';\r\nvar nullRef = { current: null };\r\nvar useMouseHovered = function (ref, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var whenHovered = !!options.whenHovered;\r\n    var bound = !!options.bound;\r\n    var isHovered = useHoverDirty(ref, whenHovered);\r\n    var state = useMouse(whenHovered && !isHovered ? nullRef : ref);\r\n    if (bound) {\r\n        state.elX = Math.max(0, Math.min(state.elX, state.elW));\r\n        state.elY = Math.max(0, Math.min(state.elY, state.elH));\r\n    }\r\n    return state;\r\n};\r\nexport default useMouseHovered;\r\n"]},"metadata":{},"sourceType":"module"}