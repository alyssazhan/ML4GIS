{"ast":null,"code":"import _objectSpread from \"D:\\\\GitHub\\\\ML4GIS\\\\client\\\\node_modules\\\\react-scripts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"D:\\\\GitHub\\\\ML4GIS\\\\client\\\\node_modules\\\\react-scripts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"D:\\\\GitHub\\\\ML4GIS\\\\client\\\\node_modules\\\\react-scripts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nexport var getEnclosingBox = function getEnclosingBox(region) {\n  switch (region.type) {\n    case \"polygon\":\n      {\n        var rectangle = {\n          x: Math.min.apply(Math, _toConsumableArray(region.points.map(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                x = _ref2[0],\n                y = _ref2[1];\n\n            return x;\n          }))),\n          y: Math.min.apply(Math, _toConsumableArray(region.points.map(function (_ref3) {\n            var _ref4 = _slicedToArray(_ref3, 2),\n                x = _ref4[0],\n                y = _ref4[1];\n\n            return y;\n          }))),\n          w: 0,\n          h: 0\n        };\n        rectangle.w = Math.max.apply(Math, _toConsumableArray(region.points.map(function (_ref5) {\n          var _ref6 = _slicedToArray(_ref5, 2),\n              x = _ref6[0],\n              y = _ref6[1];\n\n          return x;\n        }))) - rectangle.x;\n        rectangle.h = Math.max.apply(Math, _toConsumableArray(region.points.map(function (_ref7) {\n          var _ref8 = _slicedToArray(_ref7, 2),\n              x = _ref8[0],\n              y = _ref8[1];\n\n          return y;\n        }))) - rectangle.y;\n        return rectangle;\n      }\n\n    case \"polygon1\":\n      {\n        var _rectangle = {\n          x: Math.min.apply(Math, _toConsumableArray(region.points.map(function (_ref9) {\n            var _ref10 = _slicedToArray(_ref9, 2),\n                x = _ref10[0],\n                y = _ref10[1];\n\n            return x;\n          }))),\n          y: Math.min.apply(Math, _toConsumableArray(region.points.map(function (_ref11) {\n            var _ref12 = _slicedToArray(_ref11, 2),\n                x = _ref12[0],\n                y = _ref12[1];\n\n            return y;\n          }))),\n          w: 0,\n          h: 0\n        };\n        _rectangle.w = Math.max.apply(Math, _toConsumableArray(region.points.map(function (_ref13) {\n          var _ref14 = _slicedToArray(_ref13, 2),\n              x = _ref14[0],\n              y = _ref14[1];\n\n          return x;\n        }))) - _rectangle.x;\n        _rectangle.h = Math.max.apply(Math, _toConsumableArray(region.points.map(function (_ref15) {\n          var _ref16 = _slicedToArray(_ref15, 2),\n              x = _ref16[0],\n              y = _ref16[1];\n\n          return y;\n        }))) - _rectangle.y;\n        return _rectangle;\n      }\n\n    case \"circle\":\n      {\n        return {\n          x: region.x - region.xr,\n          y: region.y - region.yr,\n          w: region.xr * 2,\n          h: region.yr * 2\n        };\n      }\n\n    case \"rectangle\":\n      {\n        return {\n          x: region.x,\n          y: region.y,\n          w: region.w,\n          h: region.h\n        };\n      }\n\n    case \"point\":\n      {\n        return {\n          x: region.x,\n          y: region.y,\n          w: 0,\n          h: 0\n        };\n      }\n\n    default:\n      {\n        return {\n          x: 0,\n          y: 0,\n          w: 0,\n          h: 0\n        };\n      }\n  }\n\n  throw new Error(\"unknown region\");\n};\nexport var moveRegion = function moveRegion(region, x, y) {\n  switch (region.type) {\n    case \"point\":\n      {\n        return _objectSpread(_objectSpread({}, region), {}, {\n          x: x,\n          y: y\n        });\n      }\n\n    case \"rectangle\":\n      {\n        return _objectSpread(_objectSpread({}, region), {}, {\n          x: x - region.w / 2,\n          y: y - region.h / 2\n        });\n      }\n\n    case \"circle\":\n      {\n        return _objectSpread(_objectSpread({}, region), {}, {\n          x: x,\n          y: y\n        });\n      }\n  }\n\n  return region;\n};","map":{"version":3,"sources":["D:/GitHub/ML4GIS/client/src/pages/Home/annotateComponents/ImageCanvas/regionTools.js"],"names":["getEnclosingBox","region","type","rectangle","x","Math","min","points","map","y","w","h","max","xr","yr","Error","moveRegion"],"mappings":"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","sourcesContent":["\r\nexport type BaseRegion = {\r\n  id: string | number,\r\n  cls?: string,\r\n  locked?: boolean,\r\n  visible?: boolean,\r\n  color: string,\r\n  editingLabels?: boolean,\r\n  highlighted?: boolean,\r\n  tags?: Array<string>,\r\n}\r\n\r\nexport type Point = {|\r\n  ...$Exact<BaseRegion>,\r\n  type: \"point\",\r\n  x: number,\r\n  y: number,\r\n|}\r\n\r\nexport type Rectangle = {|\r\n  ...$Exact<BaseRegion>,\r\n  type: \"rectangle\",\r\n  x: number,\r\n  y: number,\r\n  w: number,\r\n  h: number,\r\n|}\r\n\r\nexport type Polygon = {|\r\n  ...$Exact<BaseRegion>,\r\n  type: \"polygon\",\r\n  open?: boolean,\r\n  points: Array<[number, number]>,\r\n|}\r\n\r\nexport type Polygon1 = {|\r\n...$Exact<BaseRegion>,\r\n    type:\r\n\"polygon1\",\r\n    points:Array<[number, number]>,\r\n    holes: Array<[number, number]>,\r\n    open?: boolean,\r\n    creatingHole?:  boolean,\r\n|}\r\nexport type Circle = {|\r\n...$Exact<BaseRegion>,\r\n    type: \"circle\",\r\n    // x and y indicate the coordinates of the centre of the circle\r\n    x: number,\r\n    y: number,\r\n    // x and y radius (technically, Circles are capable of representing Ovals)\r\n    xr: number,\r\n    xr: number\r\n|}\r\nexport type Region =\r\n  | Point\r\n  | Rectangle\r\n  | Polygon\r\n  | Polygon1\r\n  |Circle\r\n\r\nexport const getEnclosingBox = (region: Region) => {\r\n  switch (region.type) {\r\n    case \"polygon\": {\r\n      const rectangle = {\r\n        x: Math.min(...region.points.map(([x, y]) => x)),\r\n        y: Math.min(...region.points.map(([x, y]) => y)),\r\n        w: 0,\r\n        h: 0,\r\n      }\r\n      rectangle.w = Math.max(...region.points.map(([x, y]) => x)) - rectangle.x\r\n      rectangle.h = Math.max(...region.points.map(([x, y]) => y)) - rectangle.y\r\n      return rectangle\r\n    }\r\n    case \"polygon1\": {\r\n      const rectangle = {\r\n        x: Math.min(...region.points.map(([x, y]) => x)),\r\n        y: Math.min(...region.points.map(([x, y]) => y)),\r\n        w: 0,\r\n        h: 0,\r\n      }\r\n      rectangle.w = Math.max(...region.points.map(([x, y]) => x)) - rectangle.x\r\n      rectangle.h = Math.max(...region.points.map(([x, y]) => y)) - rectangle.y\r\n      return rectangle\r\n    }\r\n    case \"circle\": {\r\n      return {\r\n        x: region.x - region.xr,\r\n        y: region.y - region.yr,\r\n        w: region.xr * 2,\r\n        h: region.yr * 2\r\n      }\r\n    }\r\n    case \"rectangle\": {\r\n      return { x: region.x, y: region.y, w: region.w, h: region.h }\r\n    }\r\n    case \"point\": {\r\n      return { x: region.x, y: region.y, w: 0, h: 0 }\r\n    }\r\n    default: {\r\n      return { x: 0, y: 0, w: 0, h: 0 }\r\n    }\r\n  }\r\n  throw new Error(\"unknown region\")\r\n}\r\n\r\nexport const moveRegion = (region: Region, x: number, y: number) => {\r\n  switch (region.type) {\r\n    case \"point\": {\r\n      return { ...region, x, y }\r\n    }\r\n    case \"rectangle\": {\r\n      return { ...region, x: x - region.w / 2, y: y - region.h / 2 }\r\n    }\r\n    case \"circle\": {\r\n      return {\r\n        ...region,\r\n        x,\r\n        y\r\n      }\r\n    }\r\n  }\r\n  return region\r\n}\r\n"]},"metadata":{},"sourceType":"module"}