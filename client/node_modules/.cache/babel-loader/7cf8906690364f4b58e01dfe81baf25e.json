{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Encapsulates all logging behaviour and provides the ability to specify the level\n * of logging desired.\n * @class\n */\n\n\nvar Logger = /*#__PURE__*/function () {\n  _createClass(Logger, [{\n    key: \"noop\",\n\n    /**\n     * Icons prefixed to the start of logging statements that cycled through each\n     * time a focus tree changes, making it easier to quickly spot events related\n     * to the same focus tree.\n     */\n\n    /**\n     * Icons prefixed to the start of logging statements that cycled through each\n     * time a component ID changes, making it easier to quickly spot events related\n     * to the same component.\n     */\n\n    /**\n     * Icons prefixed to the start of logging statements that cycled through each\n     * time an event ID changes, making it easier to quickly trace the path of KeyEvent\n     * objects as they propagate through multiple components.\n     */\n\n    /**\n     * The level of logging to perform\n     * @typedef {'none'|'error'|'warn'|'info'|'debug'|'verbose'} LogLevel\n     */\n\n    /**\n     * Levels of log severity - the higher the log level, the greater the amount (and\n     * lesser the importance) of information logged to the console about React HotKey's\n     * behaviour\n     * @enum {number} LogLevel\n     */\n    value: function noop() {}\n    /**\n     * By default, calls to all log severities are a no-operation. It's only when the\n     * user specifies a log level, are they replaced with logging statements\n     * @type {Logger.noop}\n     */\n\n  }]);\n\n  function Logger() {\n    var _this = this;\n\n    var logLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'warn';\n\n    _classCallCheck(this, Logger);\n\n    _defineProperty(this, \"verbose\", this.noop);\n\n    _defineProperty(this, \"debug\", this.noop);\n\n    _defineProperty(this, \"info\", this.noop);\n\n    _defineProperty(this, \"warn\", this.noop);\n\n    _defineProperty(this, \"error\", this.noop);\n\n    this.logLevel = this.constructor.levels[logLevel];\n\n    if (this.logLevel >= this.constructor.levels.error) {\n      this.error = console.error;\n    } else {\n      return;\n    }\n\n    if (this.logLevel >= this.constructor.levels.warn) {\n      this.warn = console.warn;\n    } else {\n      return;\n    }\n\n    ['info', 'debug', 'verbose'].some(function (logLevel) {\n      if (_this.logLevel >= _this.constructor.levels[logLevel]) {\n        _this[logLevel] = console.log;\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  return Logger;\n}();\n\n_defineProperty(Logger, \"logIcons\", ['üìï', 'üìó', 'üìò', 'üìô']);\n\n_defineProperty(Logger, \"componentIcons\", ['üî∫', '‚≠êÔ∏è', 'üî∑', 'üî∂', '‚¨õÔ∏è']);\n\n_defineProperty(Logger, \"eventIcons\", ['‚ù§Ô∏è', 'üíö', 'üíô', 'üíõ', 'üíú', 'üß°']);\n\n_defineProperty(Logger, \"levels\", {\n  none: 0,\n  error: 1,\n  warn: 2,\n  info: 3,\n  debug: 4,\n  verbose: 5\n});\n\nexport default Logger;","map":{"version":3,"sources":["C:/Users/pccis/Desktop/ML4GIS-develop/client/node_modules/react-hotkeys/es/lib/logging/Logger.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_defineProperty","obj","value","Logger","noop","_this","logLevel","arguments","undefined","constructor","levels","error","console","warn","some","log","none","info","debug","verbose"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Encapsulates all logging behaviour and provides the ability to specify the level\n * of logging desired.\n * @class\n */\nvar Logger =\n/*#__PURE__*/\nfunction () {\n  _createClass(Logger, [{\n    key: \"noop\",\n\n    /**\n     * Icons prefixed to the start of logging statements that cycled through each\n     * time a focus tree changes, making it easier to quickly spot events related\n     * to the same focus tree.\n     */\n\n    /**\n     * Icons prefixed to the start of logging statements that cycled through each\n     * time a component ID changes, making it easier to quickly spot events related\n     * to the same component.\n     */\n\n    /**\n     * Icons prefixed to the start of logging statements that cycled through each\n     * time an event ID changes, making it easier to quickly trace the path of KeyEvent\n     * objects as they propagate through multiple components.\n     */\n\n    /**\n     * The level of logging to perform\n     * @typedef {'none'|'error'|'warn'|'info'|'debug'|'verbose'} LogLevel\n     */\n\n    /**\n     * Levels of log severity - the higher the log level, the greater the amount (and\n     * lesser the importance) of information logged to the console about React HotKey's\n     * behaviour\n     * @enum {number} LogLevel\n     */\n    value: function noop() {}\n    /**\n     * By default, calls to all log severities are a no-operation. It's only when the\n     * user specifies a log level, are they replaced with logging statements\n     * @type {Logger.noop}\n     */\n\n  }]);\n\n  function Logger() {\n    var _this = this;\n\n    var logLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'warn';\n\n    _classCallCheck(this, Logger);\n\n    _defineProperty(this, \"verbose\", this.noop);\n\n    _defineProperty(this, \"debug\", this.noop);\n\n    _defineProperty(this, \"info\", this.noop);\n\n    _defineProperty(this, \"warn\", this.noop);\n\n    _defineProperty(this, \"error\", this.noop);\n\n    this.logLevel = this.constructor.levels[logLevel];\n\n    if (this.logLevel >= this.constructor.levels.error) {\n      this.error = console.error;\n    } else {\n      return;\n    }\n\n    if (this.logLevel >= this.constructor.levels.warn) {\n      this.warn = console.warn;\n    } else {\n      return;\n    }\n\n    ['info', 'debug', 'verbose'].some(function (logLevel) {\n      if (_this.logLevel >= _this.constructor.levels[logLevel]) {\n        _this[logLevel] = console.log;\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  return Logger;\n}();\n\n_defineProperty(Logger, \"logIcons\", ['üìï', 'üìó', 'üìò', 'üìô']);\n\n_defineProperty(Logger, \"componentIcons\", ['üî∫', '‚≠êÔ∏è', 'üî∑', 'üî∂', '‚¨õÔ∏è']);\n\n_defineProperty(Logger, \"eventIcons\", ['‚ù§Ô∏è', 'üíö', 'üíô', 'üíõ', 'üíú', 'üß°']);\n\n_defineProperty(Logger, \"levels\", {\n  none: 0,\n  error: 1,\n  warn: 2,\n  info: 3,\n  debug: 4,\n  verbose: 5\n});\n\nexport default Logger;"]},"metadata":{},"sourceType":"module"}