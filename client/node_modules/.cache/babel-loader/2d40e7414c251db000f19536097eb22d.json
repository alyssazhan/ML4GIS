{"ast":null,"code":"var _jsxFileName = \"/Users/yan/Documents/GItHub/ML4GIS/client/src/pages/Home/annotateComponents/RegionShapes/main_RegionShapes.js\";\nimport React, { memo } from \"react\";\nimport colorAlpha from \"color-alpha\";\n\nfunction clamp(num, min, max) {\n  return num <= min ? min : num >= max ? max : num;\n}\n\nconst RegionComponents = {\n  point: memo(({\n    region,\n    iw,\n    ih\n  }) => /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(\".concat(region.x * iw, \" \").concat(region.y * ih, \")\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 8L8 0L0 -8L-8 0Z\",\n    strokeWidth: 2,\n    stroke: region.color,\n    fill: \"transparent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }))),\n  rectangle: memo(({\n    region,\n    iw,\n    ih\n  }) => /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(\".concat(region.x * iw, \" \").concat(region.y * ih, \")\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    strokeWidth: 2,\n    x: 0,\n    y: 0,\n    width: Math.max(region.w * iw, 0),\n    height: Math.max(region.h * ih, 0),\n    stroke: colorAlpha(region.color, 0.75),\n    fill: colorAlpha(region.color, 0.25),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }))),\n  circle: memo(({\n    region,\n    iw,\n    ih\n  }) => /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(\".concat(region.x * iw, \" \").concat(region.y * ih, \")\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"ellipse\", {\n    strokeWidth: 2,\n    rx: region.xr * iw,\n    ry: region.yr * ih // rx={10}\n    // ry={20}\n    ,\n    cx: region.x + region.xr * iw,\n    cy: region.y + region.yr * ih // cx={region.x}\n    // cy={region.y}\n    // r={Math.max(region.r * iw, 0)}\n    ,\n    stroke: colorAlpha(region.color, 0.75),\n    fill: colorAlpha(region.color, 0.25),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }))),\n  polygon1: memo(({\n    region,\n    iw,\n    ih,\n    fullSegmentationMode\n  }) => {\n    const Component = region.open ? \"polyline\" : \"polygon\"; // const Hole=region.creatingHole ? \"polyline\" : \"polygon\"\n\n    return /*#__PURE__*/React.createElement(Component // paths={[region.points,region.holes]}\n    , {\n      points: region.points.map(([x, y]) => [x * iw, y * ih]).map(a => a.join(\" \")).join(\" \") // holes={region.holes\n      //     .map(([x, y]) => [x * iw, y * ih])\n      //     .map((a) => a.join(\" \"))\n      //     .join(\" \")}\n      ,\n      strokeWidth: 2,\n      stroke: colorAlpha(region.color, 0.75),\n      fill: colorAlpha(region.color, 0.25),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    });\n  }),\n  polygon: memo(({\n    region,\n    iw,\n    ih,\n    fullSegmentationMode\n  }) => {\n    const Component = region.open ? \"polyline\" : \"polygon\";\n    return /*#__PURE__*/React.createElement(Component, {\n      points: region.points.map(([x, y]) => [x * iw, y * ih]).map(a => a.join(\" \")).join(\" \"),\n      strokeWidth: 2,\n      stroke: colorAlpha(region.color, 0.75),\n      fill: colorAlpha(region.color, 0.25),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    });\n  }),\n  pixel: () => null\n};\nexport const WrappedRegionList = memo(({\n  regions,\n  keypointDefinitions,\n  iw,\n  ih,\n  fullSegmentationMode\n}) => {\n  return regions.filter(r => r.visible !== false).map(r => {\n    const Component = RegionComponents[r.type];\n    return /*#__PURE__*/React.createElement(Component, {\n      key: r.regionId,\n      region: r,\n      iw: iw,\n      ih: ih,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    });\n  });\n}, (n, p) => n.regions === p.regions && n.iw === p.iw && n.ih === p.ih);\nexport const RegionShapes = ({\n  mat,\n  imagePosition,\n  regions = []\n}) => {\n  const iw = imagePosition.bottomRight.x - imagePosition.topLeft.x;\n  const ih = imagePosition.bottomRight.y - imagePosition.topLeft.y;\n  if (isNaN(iw) || isNaN(ih)) return null;\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    width: iw,\n    height: ih,\n    style: {\n      position: \"absolute\",\n      zIndex: 2,\n      left: imagePosition.topLeft.x,\n      top: imagePosition.topLeft.y,\n      pointerEvents: \"none\",\n      width: iw,\n      height: ih\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(WrappedRegionList, {\n    key: \"wrapped-region-list\",\n    regions: regions,\n    iw: iw,\n    ih: ih,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }));\n};\nexport default RegionShapes;","map":{"version":3,"sources":["/Users/yan/Documents/GItHub/ML4GIS/client/src/pages/Home/annotateComponents/RegionShapes/main_RegionShapes.js"],"names":["React","memo","colorAlpha","clamp","num","min","max","RegionComponents","point","region","iw","ih","x","y","color","rectangle","Math","w","h","circle","xr","yr","polygon1","fullSegmentationMode","Component","open","points","map","a","join","polygon","pixel","WrappedRegionList","regions","keypointDefinitions","filter","r","visible","type","regionId","n","p","RegionShapes","mat","imagePosition","bottomRight","topLeft","isNaN","position","zIndex","left","top","pointerEvents","width","height"],"mappings":"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","sourcesContent":["\nimport React, { memo } from \"react\"\nimport colorAlpha from \"color-alpha\"\n\nfunction clamp(num, min, max) {\n  return num <= min ? min : num >= max ? max : num\n}\n\nconst RegionComponents = {\n  point: memo(({ region, iw, ih }) => (\n    <g transform={`translate(${region.x * iw} ${region.y * ih})`}>\n      <path\n        d={\"M0 8L8 0L0 -8L-8 0Z\"}\n        strokeWidth={2}\n        stroke={region.color}\n        fill=\"transparent\"\n      />\n    </g>\n  )),\n    rectangle: memo(({ region, iw, ih }) => (\n    <g transform={`translate(${region.x * iw} ${region.y * ih})`}>\n      <rect\n        strokeWidth={2}\n        x={0}\n        y={0}\n        width={Math.max(region.w * iw, 0)}\n        height={Math.max(region.h * ih, 0)}\n        stroke={colorAlpha(region.color, 0.75)}\n        fill={colorAlpha(region.color, 0.25)}\n      />\n    </g>\n  )),\n    circle: memo(({ region, iw, ih }) => (\n        <g transform={`translate(${region.x * iw} ${region.y * ih})`}>\n            <ellipse\n                strokeWidth={2}\n                rx={region.xr*iw}\n                ry={region.yr*ih}\n                // rx={10}\n                // ry={20}\n                cx={region.x + region.xr*iw}\n                cy={region.y + region.yr*ih}\n                // cx={region.x}\n                // cy={region.y}\n                // r={Math.max(region.r * iw, 0)}\n                stroke={colorAlpha(region.color, 0.75)}\n                fill={colorAlpha(region.color, 0.25)}\n            />\n        </g>\n    )),\n  polygon1: memo(({ region, iw, ih, fullSegmentationMode }) => {\n    const Component = region.open? \"polyline\" : \"polygon\"\n\n      // const Hole=region.creatingHole ? \"polyline\" : \"polygon\"\n    return (\n      <Component\n          // paths={[region.points,region.holes]}\n        points={region.points\n          .map(([x, y]) => [x * iw, y * ih])\n          .map((a) => a.join(\" \"))\n          .join(\" \")}\n        // holes={region.holes\n        //     .map(([x, y]) => [x * iw, y * ih])\n        //     .map((a) => a.join(\" \"))\n        //     .join(\" \")}\n        strokeWidth={2}\n        stroke={colorAlpha(region.color, 0.75)}\n        fill={colorAlpha(region.color, 0.25)}>\n\n         </Component>\n\n\n    )\n  }),\n    polygon: memo(({ region, iw, ih, fullSegmentationMode }) => {\n        const Component = region.open ? \"polyline\" : \"polygon\"\n        return (\n            <Component\n                points={region.points\n                    .map(([x, y]) => [x * iw, y * ih])\n                    .map((a) => a.join(\" \"))\n                    .join(\" \")}\n                strokeWidth={2}\n                stroke={colorAlpha(region.color, 0.75)}\n                fill={colorAlpha(region.color, 0.25)}\n            />\n        )\n    }),\n  pixel: () => null,\n}\n\n\nexport const WrappedRegionList = memo(\n  ({ regions, keypointDefinitions, iw, ih, fullSegmentationMode }) => {\n    return regions\n      .filter((r) => r.visible !== false)\n      .map((r) => {\n        const Component = RegionComponents[r.type]\n        return (\n          <Component\n            key={r.regionId}\n            region={r}\n            iw={iw}\n            ih={ih}\n          />\n        )\n      })\n  },\n  (n, p) => n.regions === p.regions && n.iw === p.iw && n.ih === p.ih\n)\n\nexport const RegionShapes = ({\n  mat,\n  imagePosition,\n  regions = [],\n}) => {\n  const iw = imagePosition.bottomRight.x - imagePosition.topLeft.x\n  const ih = imagePosition.bottomRight.y - imagePosition.topLeft.y\n  if (isNaN(iw) || isNaN(ih)) return null\n  return (\n    <svg\n      width={iw}\n      height={ih}\n      style={{\n        position: \"absolute\",\n        zIndex: 2,\n        left: imagePosition.topLeft.x,\n        top: imagePosition.topLeft.y,\n        pointerEvents: \"none\",\n        width: iw,\n        height: ih,\n      }}\n    >\n      <WrappedRegionList\n        key=\"wrapped-region-list\"\n        regions={regions}\n        iw={iw}\n        ih={ih}\n      />\n    </svg>\n  )\n}\n\nexport default RegionShapes\n"]},"metadata":{},"sourceType":"module"}