{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport dictionaryFrom from '../../utils/object/dictionaryFrom';\n/**\r\n * Default configuration values\r\n * @private\r\n */\n\nvar _defaultConfiguration = {\n  /**\r\n   * The level of logging of its own behaviour React HotKeys should perform.\r\n   * @type {LogLevel}\r\n   */\n  logLevel: 'warn',\n\n  /**\r\n   * Default key event key maps are bound to, if left unspecified\r\n   * @type {KeyEventName}\r\n   */\n  defaultKeyEvent: 'keydown',\n\n  /**\r\n   * The default component type to wrap HotKey components' children in, to provide\r\n   * the required focus and keyboard event listening for HotKeys to function\r\n   */\n  defaultComponent: 'div',\n\n  /**\r\n   * The default tabIndex value passed to the wrapping component used to contain\r\n   * HotKey components' children. -1 skips focusing the element when tabbing through\r\n   * the DOM, but allows focusing programmatically.\r\n   */\n  defaultTabIndex: '-1',\n\n  /**\r\n   * The HTML tags that React HotKeys should ignore key events from. This only works\r\n   * if you are using the default ignoreEventsCondition function.\r\n   * @type {String[]}\r\n   */\n  ignoreTags: ['input', 'select', 'textarea'],\n\n  /**\r\n   * Whether to allow hard sequences, or the binding of handlers to actions that have\r\n   * names that are valid key sequences, which implicitly define actions that are\r\n   * triggered by that key sequence\r\n   */\n  enableHardSequences: false,\n\n  /**\r\n   * Whether to ignore changes to keyMap and handlers props by default (this reduces\r\n   * a significant amount of unnecessarily resetting internal state)\r\n   *\r\n   * @type {boolean}\r\n   */\n  ignoreKeymapAndHandlerChangesByDefault: true,\n\n  /**\r\n   * The function used to determine whether a key event should be ignored by React\r\n   * Hotkeys. By default, keyboard events originating elements with a tag name in\r\n   * ignoreTags, or a isContentEditable property of true, are ignored.\r\n   *\r\n   * @type {Function<KeyboardEvent>}\r\n   */\n  ignoreEventsCondition: function ignoreEventsCondition(event) {\n    var target = event.target;\n\n    if (target && target.tagName) {\n      var tagName = target.tagName.toLowerCase();\n      return Configuration.option('_ignoreTagsDict')[tagName] || target.isContentEditable;\n    } else {\n      return false;\n    }\n  },\n\n  /**\r\n   * Whether to ignore repeated keyboard events when a key is being held down\r\n   * @type {boolean}\r\n   */\n  ignoreRepeatedEventsWhenKeyHeldDown: true,\n\n  /**\r\n   * Whether React HotKeys should simulate keypress events for the keys that do not\r\n   * natively emit them.\r\n   * @type {boolean}\r\n   */\n  simulateMissingKeyPressEvents: true,\n\n  /**\r\n   * Whether to call stopPropagation() on events after they are handled (preventing\r\n   * the event from bubbling up any further, both within React Hotkeys and any other\r\n   * event listeners bound in React).\r\n   *\r\n   * This does not affect the behaviour of React Hotkeys, but rather what happens to\r\n   * the event once React Hotkeys is done with it (whether it's allowed to propagate\r\n   * any further through the Render tree).\r\n   * @type {boolean}\r\n   */\n  stopEventPropagationAfterHandling: true,\n\n  /**\r\n   * Whether to call stopPropagation() on events after they are ignored (preventing\r\n   * the event from bubbling up any further, both within React Hotkeys and any other\r\n   * event listeners bound in React).\r\n   *\r\n   * This does not affect the behaviour of React Hotkeys, but rather what happens to\r\n   * the event once React Hotkeys is done with it (whether it's allowed to propagate\r\n   * any further through the Render tree).\r\n   * @type {boolean}\r\n   */\n  stopEventPropagationAfterIgnoring: true,\n\n  /**\r\n   * Whether to allow combination submatches - e.g. if there is an action bound to\r\n   * cmd, pressing shift+cmd will *not* trigger that action when\r\n   * allowCombinationSubmatches is false.\r\n   *\r\n   * @note This option is ignored for combinations involving command (Meta) and\r\n   *      submatches are <i>always</i> allowed because Meta hides keyup events\r\n   *      of other keys, so until Command is released, it's impossible to know\r\n   *      if one of the keys that has also been pressed has been released.\r\n   *      @see https://github.com/greena13/react-hotkeys/pull/207\r\n   * @type {boolean}\r\n   */\n  allowCombinationSubmatches: false,\n\n  /**\r\n   * A mapping of custom key codes to key names that you can then use in your\r\n   * key sequences\r\n   * @type {Object.<Number, KeyName>}\r\n   */\n  customKeyCodes: {}\n};\n\nvar _configuration = _objectSpread({}, _defaultConfiguration);\n/**\r\n * Turn our array of tags to ignore into a dictionary, for faster lookup\r\n */\n\n\n_configuration._ignoreTagsDict = dictionaryFrom(_configuration.ignoreTags, true);\n/**\r\n * Handles getting and setting global configuration values, that affect how\r\n * React Hotkeys behaves\r\n * @class\r\n */\n\nvar Configuration = /*#__PURE__*/function () {\n  function Configuration() {\n    _classCallCheck(this, Configuration);\n  }\n\n  _createClass(Configuration, null, [{\n    key: \"init\",\n\n    /**\r\n     * Merges the specified configuration options with the current values.\r\n     * @see _configuration\r\n     */\n    value: function init(configuration) {\n      var _this = this;\n\n      var ignoreTags = configuration.ignoreTags,\n          customKeyCodes = configuration.customKeyCodes;\n\n      if (ignoreTags) {\n        configuration._ignoreTagsDict = dictionaryFrom(configuration.ignoreTags);\n      }\n\n      if (customKeyCodes) {\n        configuration._customKeyNamesDict = dictionaryFrom(Object.values(configuration.customKeyCodes));\n      }\n\n      if (false) {\n        if (['verbose', 'debug', 'info'].indexOf(configuration.logLevel) !== -1) {\n          console.warn(\"React HotKeys: You have requested log level '\".concat(configuration.logLevel, \"' but for performance reasons, logging below severity level 'warning' is disabled in production. Please use the development build for complete logs.\"));\n        }\n      }\n\n      Object.keys(configuration).forEach(function (key) {\n        _this.set(key, configuration[key]);\n      });\n    }\n    /**\r\n     * Sets a single configuration value by name\r\n     * @param {string} key - Name of the configuration value to set\r\n     * @param {*} value - New value to set\r\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      _configuration[key] = value;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(key) {\n      _configuration[key] = _defaultConfiguration[key];\n    }\n    /**\r\n     * Gets a single configuration value by name\r\n     * @param {string} key - Name of the configuration value\r\n     * @returns {*} Configuration value\r\n     */\n\n  }, {\n    key: \"option\",\n    value: function option(key) {\n      return _configuration[key];\n    }\n  }]);\n\n  return Configuration;\n}();\n\nexport default Configuration;","map":{"version":3,"sources":["D:/GitHub/ML4GIS/client/node_modules/react-hotkeys/es/lib/config/Configuration.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_objectSpread","arguments","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","forEach","_defineProperty","obj","value","dictionaryFrom","_defaultConfiguration","logLevel","defaultKeyEvent","defaultComponent","defaultTabIndex","ignoreTags","enableHardSequences","ignoreKeymapAndHandlerChangesByDefault","ignoreEventsCondition","event","tagName","toLowerCase","Configuration","option","isContentEditable","ignoreRepeatedEventsWhenKeyHeldDown","simulateMissingKeyPressEvents","stopEventPropagationAfterHandling","stopEventPropagationAfterIgnoring","allowCombinationSubmatches","customKeyCodes","_configuration","_ignoreTagsDict","init","configuration","_this","_customKeyNamesDict","values","indexOf","console","warn","set","reset"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\r\n\r\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\r\n\r\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\r\n\r\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\n\r\nimport dictionaryFrom from '../../utils/object/dictionaryFrom';\r\n/**\r\n * Default configuration values\r\n * @private\r\n */\r\n\r\nvar _defaultConfiguration = {\r\n  /**\r\n   * The level of logging of its own behaviour React HotKeys should perform.\r\n   * @type {LogLevel}\r\n   */\r\n  logLevel: 'warn',\r\n\r\n  /**\r\n   * Default key event key maps are bound to, if left unspecified\r\n   * @type {KeyEventName}\r\n   */\r\n  defaultKeyEvent: 'keydown',\r\n\r\n  /**\r\n   * The default component type to wrap HotKey components' children in, to provide\r\n   * the required focus and keyboard event listening for HotKeys to function\r\n   */\r\n  defaultComponent: 'div',\r\n\r\n  /**\r\n   * The default tabIndex value passed to the wrapping component used to contain\r\n   * HotKey components' children. -1 skips focusing the element when tabbing through\r\n   * the DOM, but allows focusing programmatically.\r\n   */\r\n  defaultTabIndex: '-1',\r\n\r\n  /**\r\n   * The HTML tags that React HotKeys should ignore key events from. This only works\r\n   * if you are using the default ignoreEventsCondition function.\r\n   * @type {String[]}\r\n   */\r\n  ignoreTags: ['input', 'select', 'textarea'],\r\n\r\n  /**\r\n   * Whether to allow hard sequences, or the binding of handlers to actions that have\r\n   * names that are valid key sequences, which implicitly define actions that are\r\n   * triggered by that key sequence\r\n   */\r\n  enableHardSequences: false,\r\n\r\n  /**\r\n   * Whether to ignore changes to keyMap and handlers props by default (this reduces\r\n   * a significant amount of unnecessarily resetting internal state)\r\n   *\r\n   * @type {boolean}\r\n   */\r\n  ignoreKeymapAndHandlerChangesByDefault: true,\r\n\r\n  /**\r\n   * The function used to determine whether a key event should be ignored by React\r\n   * Hotkeys. By default, keyboard events originating elements with a tag name in\r\n   * ignoreTags, or a isContentEditable property of true, are ignored.\r\n   *\r\n   * @type {Function<KeyboardEvent>}\r\n   */\r\n  ignoreEventsCondition: function ignoreEventsCondition(event) {\r\n    var target = event.target;\r\n\r\n    if (target && target.tagName) {\r\n      var tagName = target.tagName.toLowerCase();\r\n      return Configuration.option('_ignoreTagsDict')[tagName] || target.isContentEditable;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Whether to ignore repeated keyboard events when a key is being held down\r\n   * @type {boolean}\r\n   */\r\n  ignoreRepeatedEventsWhenKeyHeldDown: true,\r\n\r\n  /**\r\n   * Whether React HotKeys should simulate keypress events for the keys that do not\r\n   * natively emit them.\r\n   * @type {boolean}\r\n   */\r\n  simulateMissingKeyPressEvents: true,\r\n\r\n  /**\r\n   * Whether to call stopPropagation() on events after they are handled (preventing\r\n   * the event from bubbling up any further, both within React Hotkeys and any other\r\n   * event listeners bound in React).\r\n   *\r\n   * This does not affect the behaviour of React Hotkeys, but rather what happens to\r\n   * the event once React Hotkeys is done with it (whether it's allowed to propagate\r\n   * any further through the Render tree).\r\n   * @type {boolean}\r\n   */\r\n  stopEventPropagationAfterHandling: true,\r\n\r\n  /**\r\n   * Whether to call stopPropagation() on events after they are ignored (preventing\r\n   * the event from bubbling up any further, both within React Hotkeys and any other\r\n   * event listeners bound in React).\r\n   *\r\n   * This does not affect the behaviour of React Hotkeys, but rather what happens to\r\n   * the event once React Hotkeys is done with it (whether it's allowed to propagate\r\n   * any further through the Render tree).\r\n   * @type {boolean}\r\n   */\r\n  stopEventPropagationAfterIgnoring: true,\r\n\r\n  /**\r\n   * Whether to allow combination submatches - e.g. if there is an action bound to\r\n   * cmd, pressing shift+cmd will *not* trigger that action when\r\n   * allowCombinationSubmatches is false.\r\n   *\r\n   * @note This option is ignored for combinations involving command (Meta) and\r\n   *      submatches are <i>always</i> allowed because Meta hides keyup events\r\n   *      of other keys, so until Command is released, it's impossible to know\r\n   *      if one of the keys that has also been pressed has been released.\r\n   *      @see https://github.com/greena13/react-hotkeys/pull/207\r\n   * @type {boolean}\r\n   */\r\n  allowCombinationSubmatches: false,\r\n\r\n  /**\r\n   * A mapping of custom key codes to key names that you can then use in your\r\n   * key sequences\r\n   * @type {Object.<Number, KeyName>}\r\n   */\r\n  customKeyCodes: {}\r\n};\r\n\r\nvar _configuration = _objectSpread({}, _defaultConfiguration);\r\n/**\r\n * Turn our array of tags to ignore into a dictionary, for faster lookup\r\n */\r\n\r\n\r\n_configuration._ignoreTagsDict = dictionaryFrom(_configuration.ignoreTags, true);\r\n/**\r\n * Handles getting and setting global configuration values, that affect how\r\n * React Hotkeys behaves\r\n * @class\r\n */\r\n\r\nvar Configuration =\r\n/*#__PURE__*/\r\nfunction () {\r\n  function Configuration() {\r\n    _classCallCheck(this, Configuration);\r\n  }\r\n\r\n  _createClass(Configuration, null, [{\r\n    key: \"init\",\r\n\r\n    /**\r\n     * Merges the specified configuration options with the current values.\r\n     * @see _configuration\r\n     */\r\n    value: function init(configuration) {\r\n      var _this = this;\r\n\r\n      var ignoreTags = configuration.ignoreTags,\r\n          customKeyCodes = configuration.customKeyCodes;\r\n\r\n      if (ignoreTags) {\r\n        configuration._ignoreTagsDict = dictionaryFrom(configuration.ignoreTags);\r\n      }\r\n\r\n      if (customKeyCodes) {\r\n        configuration._customKeyNamesDict = dictionaryFrom(Object.values(configuration.customKeyCodes));\r\n      }\r\n\r\n      if (false) {\r\n        if (['verbose', 'debug', 'info'].indexOf(configuration.logLevel) !== -1) {\r\n          console.warn(\"React HotKeys: You have requested log level '\".concat(configuration.logLevel, \"' but for performance reasons, logging below severity level 'warning' is disabled in production. Please use the development build for complete logs.\"));\r\n        }\r\n      }\r\n\r\n      Object.keys(configuration).forEach(function (key) {\r\n        _this.set(key, configuration[key]);\r\n      });\r\n    }\r\n    /**\r\n     * Sets a single configuration value by name\r\n     * @param {string} key - Name of the configuration value to set\r\n     * @param {*} value - New value to set\r\n     */\r\n\r\n  }, {\r\n    key: \"set\",\r\n    value: function set(key, value) {\r\n      _configuration[key] = value;\r\n    }\r\n  }, {\r\n    key: \"reset\",\r\n    value: function reset(key) {\r\n      _configuration[key] = _defaultConfiguration[key];\r\n    }\r\n    /**\r\n     * Gets a single configuration value by name\r\n     * @param {string} key - Name of the configuration value\r\n     * @returns {*} Configuration value\r\n     */\r\n\r\n  }, {\r\n    key: \"option\",\r\n    value: function option(key) {\r\n      return _configuration[key];\r\n    }\r\n  }]);\r\n\r\n  return Configuration;\r\n}();\r\n\r\nexport default Configuration;"]},"metadata":{},"sourceType":"module"}