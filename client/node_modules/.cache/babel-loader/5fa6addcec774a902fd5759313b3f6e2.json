{"ast":null,"code":"/* eslint-disable */\nimport { useMemo } from 'react';\nimport useGetSet from './useGetSet';\nimport { resolveHookState } from './util/resolveHookState';\nexport default function useCounter(initialValue, max, min) {\n  if (initialValue === void 0) {\n    initialValue = 0;\n  }\n\n  if (max === void 0) {\n    max = null;\n  }\n\n  if (min === void 0) {\n    min = null;\n  }\n\n  var init = resolveHookState(initialValue);\n  typeof init !== 'number' && console.error('initialValue has to be a number, got ' + typeof initialValue);\n\n  if (typeof min === 'number') {\n    init = Math.max(init, min);\n  } else if (min !== null) {\n    console.error('min has to be a number, got ' + typeof min);\n  }\n\n  if (typeof max === 'number') {\n    init = Math.min(init, max);\n  } else if (max !== null) {\n    console.error('max has to be a number, got ' + typeof max);\n  }\n\n  var _a = useGetSet(init),\n      get = _a[0],\n      setInternal = _a[1];\n\n  return [get(), useMemo(function () {\n    var set = function set(newState) {\n      var prevState = get();\n      var rState = resolveHookState(newState, prevState);\n\n      if (prevState !== rState) {\n        if (typeof min === 'number') {\n          rState = Math.max(rState, min);\n        }\n\n        if (typeof max === 'number') {\n          rState = Math.min(rState, max);\n        }\n\n        prevState !== rState && setInternal(rState);\n      }\n    };\n\n    return {\n      get: get,\n      set: set,\n      inc: function inc(delta) {\n        if (delta === void 0) {\n          delta = 1;\n        }\n\n        var rDelta = resolveHookState(delta, get());\n\n        if (typeof rDelta !== 'number') {\n          console.error('delta has to be a number or function returning a number, got ' + typeof rDelta);\n        }\n\n        set(function (num) {\n          return num + rDelta;\n        });\n      },\n      dec: function dec(delta) {\n        if (delta === void 0) {\n          delta = 1;\n        }\n\n        var rDelta = resolveHookState(delta, get());\n\n        if (typeof rDelta !== 'number') {\n          console.error('delta has to be a number or function returning a number, got ' + typeof rDelta);\n        }\n\n        set(function (num) {\n          return num - rDelta;\n        });\n      },\n      reset: function reset(value) {\n        if (value === void 0) {\n          value = init;\n        }\n\n        var rValue = resolveHookState(value, get());\n\n        if (typeof rValue !== 'number') {\n          console.error('value has to be a number or function returning a number, got ' + typeof rValue);\n        }\n\n        init = rValue;\n        set(rValue);\n      }\n    };\n  }, [init, min, max])];\n}","map":{"version":3,"sources":["D:/GitHub/ML4GIS/client/node_modules/react-use/esm/useCounter.js"],"names":["useMemo","useGetSet","resolveHookState","useCounter","initialValue","max","min","init","console","error","Math","_a","get","setInternal","set","newState","prevState","rState","inc","delta","rDelta","num","dec","reset","value","rValue"],"mappings":"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","sourcesContent":["/* eslint-disable */\r\nimport { useMemo } from 'react';\r\nimport useGetSet from './useGetSet';\r\nimport { resolveHookState } from './util/resolveHookState';\r\nexport default function useCounter(initialValue, max, min) {\r\n    if (initialValue === void 0) { initialValue = 0; }\r\n    if (max === void 0) { max = null; }\r\n    if (min === void 0) { min = null; }\r\n    var init = resolveHookState(initialValue);\r\n    typeof init !== 'number' && console.error('initialValue has to be a number, got ' + typeof initialValue);\r\n    if (typeof min === 'number') {\r\n        init = Math.max(init, min);\r\n    }\r\n    else if (min !== null) {\r\n        console.error('min has to be a number, got ' + typeof min);\r\n    }\r\n    if (typeof max === 'number') {\r\n        init = Math.min(init, max);\r\n    }\r\n    else if (max !== null) {\r\n        console.error('max has to be a number, got ' + typeof max);\r\n    }\r\n    var _a = useGetSet(init), get = _a[0], setInternal = _a[1];\r\n    return [\r\n        get(),\r\n        useMemo(function () {\r\n            var set = function (newState) {\r\n                var prevState = get();\r\n                var rState = resolveHookState(newState, prevState);\r\n                if (prevState !== rState) {\r\n                    if (typeof min === 'number') {\r\n                        rState = Math.max(rState, min);\r\n                    }\r\n                    if (typeof max === 'number') {\r\n                        rState = Math.min(rState, max);\r\n                    }\r\n                    prevState !== rState && setInternal(rState);\r\n                }\r\n            };\r\n            return {\r\n                get: get,\r\n                set: set,\r\n                inc: function (delta) {\r\n                    if (delta === void 0) { delta = 1; }\r\n                    var rDelta = resolveHookState(delta, get());\r\n                    if (typeof rDelta !== 'number') {\r\n                        console.error('delta has to be a number or function returning a number, got ' + typeof rDelta);\r\n                    }\r\n                    set(function (num) { return num + rDelta; });\r\n                },\r\n                dec: function (delta) {\r\n                    if (delta === void 0) { delta = 1; }\r\n                    var rDelta = resolveHookState(delta, get());\r\n                    if (typeof rDelta !== 'number') {\r\n                        console.error('delta has to be a number or function returning a number, got ' + typeof rDelta);\r\n                    }\r\n                    set(function (num) { return num - rDelta; });\r\n                },\r\n                reset: function (value) {\r\n                    if (value === void 0) { value = init; }\r\n                    var rValue = resolveHookState(value, get());\r\n                    if (typeof rValue !== 'number') {\r\n                        console.error('value has to be a number or function returning a number, got ' + typeof rValue);\r\n                    }\r\n                    init = rValue;\r\n                    set(rValue);\r\n                },\r\n            };\r\n        }, [init, min, max]),\r\n    ];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}