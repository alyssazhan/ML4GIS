{"ast":null,"code":"import _slicedToArray from \"D:\\\\GitHub\\\\ML4GIS\\\\client\\\\node_modules\\\\react-scripts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\GitHub\\\\ML4GIS\\\\client\\\\src\\\\pages\\\\Home\\\\annotateComponents\\\\RegionShapes\\\\main_RegionShapes.js\";\n\nimport React, { memo } from \"react\";\nimport colorAlpha from \"color-alpha\";\n\nfunction clamp(num, min, max) {\n  return num <= min ? min : num >= max ? max : num;\n}\n\nvar RegionComponents = {\n  point: memo(function (_ref) {\n    var region = _ref.region,\n        iw = _ref.iw,\n        ih = _ref.ih;\n    return /*#__PURE__*/React.createElement(\"g\", {\n      transform: \"translate(\".concat(region.x * iw, \" \").concat(region.y * ih, \")\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"path\", {\n      d: \"M0 8L8 0L0 -8L-8 0Z\",\n      strokeWidth: 2,\n      stroke: region.color,\n      fill: \"transparent\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 7\n      }\n    }));\n  }),\n  rectangle: memo(function (_ref2) {\n    var region = _ref2.region,\n        iw = _ref2.iw,\n        ih = _ref2.ih;\n    return /*#__PURE__*/React.createElement(\"g\", {\n      transform: \"translate(\".concat(region.x * iw, \" \").concat(region.y * ih, \")\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"rect\", {\n      strokeWidth: 2,\n      x: 0,\n      y: 0,\n      width: Math.max(region.w * iw, 0),\n      height: Math.max(region.h * ih, 0),\n      stroke: colorAlpha(region.color, 0.75),\n      fill: colorAlpha(region.color, 0.25),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    }));\n  }),\n  circle: memo(function (_ref3) {\n    var region = _ref3.region,\n        iw = _ref3.iw,\n        ih = _ref3.ih;\n    return /*#__PURE__*/React.createElement(\"g\", {\n      transform: \"translate(\".concat(region.x * iw, \" \").concat(region.y * ih, \")\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"ellipse\", {\n      strokeWidth: 2,\n      rx: Math.max(region.xr * iw, 0),\n      ry: Math.max(region.yr * ih, 0),\n      cx: region.x,\n      cy: region.y,\n      stroke: colorAlpha(region.color, 0.75),\n      fill: colorAlpha(region.color, 0.25),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }\n    }));\n  }),\n  polygon1: memo(function (_ref4) {\n    var region = _ref4.region,\n        iw = _ref4.iw,\n        ih = _ref4.ih,\n        fullSegmentationMode = _ref4.fullSegmentationMode;\n    var Component = region.open ? \"polyline\" : \"polygon\"; // const Hole=region.creatingHole ? \"polyline\" : \"polygon\"\n\n    return /*#__PURE__*/React.createElement(Component // paths={[region.points,region.holes]}\n    , {\n      points: region.points.map(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            x = _ref6[0],\n            y = _ref6[1];\n\n        return [x * iw, y * ih];\n      }).map(function (a) {\n        return a.join(\" \");\n      }).join(\" \") // holes={region.holes\n      //     .map(([x, y]) => [x * iw, y * ih])\n      //     .map((a) => a.join(\" \"))\n      //     .join(\" \")}\n      ,\n      strokeWidth: 2,\n      stroke: colorAlpha(region.color, 0.75),\n      fill: colorAlpha(region.color, 0.25),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    });\n  }),\n  polygon: memo(function (_ref7) {\n    var region = _ref7.region,\n        iw = _ref7.iw,\n        ih = _ref7.ih,\n        fullSegmentationMode = _ref7.fullSegmentationMode;\n    var Component = region.open ? \"polyline\" : \"polygon\";\n    return /*#__PURE__*/React.createElement(Component, {\n      points: region.points.map(function (_ref8) {\n        var _ref9 = _slicedToArray(_ref8, 2),\n            x = _ref9[0],\n            y = _ref9[1];\n\n        return [x * iw, y * ih];\n      }).map(function (a) {\n        return a.join(\" \");\n      }).join(\" \"),\n      strokeWidth: 2,\n      stroke: colorAlpha(region.color, 0.75),\n      fill: colorAlpha(region.color, 0.25),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    });\n  }),\n  pixel: function pixel() {\n    return null;\n  }\n};\nexport var WrappedRegionList = memo(function (_ref10) {\n  var regions = _ref10.regions,\n      keypointDefinitions = _ref10.keypointDefinitions,\n      iw = _ref10.iw,\n      ih = _ref10.ih,\n      fullSegmentationMode = _ref10.fullSegmentationMode;\n  return regions.filter(function (r) {\n    return r.visible !== false;\n  }).map(function (r) {\n    var Component = RegionComponents[r.type];\n    return /*#__PURE__*/React.createElement(Component, {\n      key: r.regionId,\n      region: r,\n      iw: iw,\n      ih: ih,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    });\n  });\n}, function (n, p) {\n  return n.regions === p.regions && n.iw === p.iw && n.ih === p.ih;\n});\nexport var RegionShapes = function RegionShapes(_ref11) {\n  var mat = _ref11.mat,\n      imagePosition = _ref11.imagePosition,\n      _ref11$regions = _ref11.regions,\n      regions = _ref11$regions === void 0 ? [] : _ref11$regions;\n  var iw = imagePosition.bottomRight.x - imagePosition.topLeft.x;\n  var ih = imagePosition.bottomRight.y - imagePosition.topLeft.y;\n  if (isNaN(iw) || isNaN(ih)) return null;\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    width: iw,\n    height: ih,\n    style: {\n      position: \"absolute\",\n      zIndex: 2,\n      left: imagePosition.topLeft.x,\n      top: imagePosition.topLeft.y,\n      pointerEvents: \"none\",\n      width: iw,\n      height: ih\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(WrappedRegionList, {\n    key: \"wrapped-region-list\",\n    regions: regions,\n    iw: iw,\n    ih: ih,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }));\n};\nexport default RegionShapes;","map":{"version":3,"sources":["D:/GitHub/ML4GIS/client/src/pages/Home/annotateComponents/RegionShapes/main_RegionShapes.js"],"names":["React","memo","colorAlpha","clamp","num","min","max","RegionComponents","point","region","iw","ih","x","y","color","rectangle","Math","w","h","circle","xr","yr","polygon1","fullSegmentationMode","Component","open","points","map","a","join","polygon","pixel","WrappedRegionList","regions","keypointDefinitions","filter","r","visible","type","regionId","n","p","RegionShapes","mat","imagePosition","bottomRight","topLeft","isNaN","position","zIndex","left","top","pointerEvents","width","height"],"mappings":"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","sourcesContent":["\r\nimport React, { memo } from \"react\"\r\nimport colorAlpha from \"color-alpha\"\r\n\r\nfunction clamp(num, min, max) {\r\n  return num <= min ? min : num >= max ? max : num\r\n}\r\n\r\nconst RegionComponents = {\r\n  point: memo(({ region, iw, ih }) => (\r\n    <g transform={`translate(${region.x * iw} ${region.y * ih})`}>\r\n      <path\r\n        d={\"M0 8L8 0L0 -8L-8 0Z\"}\r\n        strokeWidth={2}\r\n        stroke={region.color}\r\n        fill=\"transparent\"\r\n      />\r\n    </g>\r\n  )),\r\n    rectangle: memo(({ region, iw, ih }) => (\r\n    <g transform={`translate(${region.x * iw} ${region.y * ih})`}>\r\n      <rect\r\n        strokeWidth={2}\r\n        x={0}\r\n        y={0}\r\n        width={Math.max(region.w * iw, 0)}\r\n        height={Math.max(region.h * ih, 0)}\r\n        stroke={colorAlpha(region.color, 0.75)}\r\n        fill={colorAlpha(region.color, 0.25)}\r\n      />\r\n    </g>\r\n  )),\r\n    circle: memo(({ region, iw, ih }) => (\r\n        <g transform={`translate(${region.x * iw} ${region.y * ih})`}>\r\n            <ellipse\r\n                strokeWidth={2}\r\n                rx={Math.max(region.xr*iw,0)}\r\n                ry={Math.max(region.yr*ih,0)}\r\n                cx={region.x}\r\n                cy={region.y}\r\n                stroke={colorAlpha(region.color, 0.75)}\r\n                fill={colorAlpha(region.color, 0.25)}\r\n            />\r\n        </g>\r\n    )),\r\n  polygon1: memo(({ region, iw, ih, fullSegmentationMode }) => {\r\n    const Component = region.open? \"polyline\" : \"polygon\"\r\n\r\n      // const Hole=region.creatingHole ? \"polyline\" : \"polygon\"\r\n    return (\r\n      <Component\r\n          // paths={[region.points,region.holes]}\r\n        points={region.points\r\n          .map(([x, y]) => [x * iw, y * ih])\r\n          .map((a) => a.join(\" \"))\r\n          .join(\" \")}\r\n        // holes={region.holes\r\n        //     .map(([x, y]) => [x * iw, y * ih])\r\n        //     .map((a) => a.join(\" \"))\r\n        //     .join(\" \")}\r\n        strokeWidth={2}\r\n        stroke={colorAlpha(region.color, 0.75)}\r\n        fill={colorAlpha(region.color, 0.25)}>\r\n\r\n         </Component>\r\n\r\n\r\n    )\r\n  }),\r\n    polygon: memo(({ region, iw, ih, fullSegmentationMode }) => {\r\n        const Component = region.open ? \"polyline\" : \"polygon\"\r\n        return (\r\n            <Component\r\n                points={region.points\r\n                    .map(([x, y]) => [x * iw, y * ih])\r\n                    .map((a) => a.join(\" \"))\r\n                    .join(\" \")}\r\n                strokeWidth={2}\r\n                stroke={colorAlpha(region.color, 0.75)}\r\n                fill={colorAlpha(region.color, 0.25)}\r\n            />\r\n        )\r\n    }),\r\n  pixel: () => null,\r\n}\r\n\r\n\r\nexport const WrappedRegionList = memo(\r\n  ({ regions, keypointDefinitions, iw, ih, fullSegmentationMode }) => {\r\n    return regions\r\n      .filter((r) => r.visible !== false)\r\n      .map((r) => {\r\n        const Component = RegionComponents[r.type]\r\n        return (\r\n          <Component\r\n            key={r.regionId}\r\n            region={r}\r\n            iw={iw}\r\n            ih={ih}\r\n          />\r\n        )\r\n      })\r\n  },\r\n  (n, p) => n.regions === p.regions && n.iw === p.iw && n.ih === p.ih\r\n)\r\n\r\nexport const RegionShapes = ({\r\n  mat,\r\n  imagePosition,\r\n  regions = [],\r\n}) => {\r\n  const iw = imagePosition.bottomRight.x - imagePosition.topLeft.x\r\n  const ih = imagePosition.bottomRight.y - imagePosition.topLeft.y\r\n  if (isNaN(iw) || isNaN(ih)) return null\r\n  return (\r\n    <svg\r\n      width={iw}\r\n      height={ih}\r\n      style={{\r\n        position: \"absolute\",\r\n        zIndex: 2,\r\n        left: imagePosition.topLeft.x,\r\n        top: imagePosition.topLeft.y,\r\n        pointerEvents: \"none\",\r\n        width: iw,\r\n        height: ih,\r\n      }}\r\n    >\r\n      <WrappedRegionList\r\n        key=\"wrapped-region-list\"\r\n        regions={regions}\r\n        iw={iw}\r\n        ih={ih}\r\n      />\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default RegionShapes\r\n"]},"metadata":{},"sourceType":"module"}