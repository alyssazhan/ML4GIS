{"ast":null,"code":"import _objectSpread from \"D:\\\\GitHub\\\\ML4GIS\\\\client\\\\node_modules\\\\react-scripts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"D:\\\\GitHub\\\\ML4GIS\\\\client\\\\node_modules\\\\react-scripts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"D:\\\\GitHub\\\\ML4GIS\\\\client\\\\node_modules\\\\react-scripts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { moveRegion } from \"../ImageCanvas/regionTools.js\";\nimport { getIn, setIn, updateIn } from \"seamless-immutable\";\nimport isEqual from \"lodash/isEqual\";\nimport getActiveImage from \"./getActiveImage\";\nimport { saveToHistory } from \"./historyHandler.js\";\nimport colors from \"../ImageCanvas/colors\";\n\nvar getRandomId = function getRandomId() {\n  return Math.random().toString().split(\".\")[1];\n};\n\nexport default (function (state, action) {\n  // Throttle certain actions\n  if (action.type === \"MOUSE_MOVE\") {\n    if (Date.now() - (state.lastMouseMoveCall || 0) < 16) return state;\n    state = setIn(state, [\"lastMouseMoveCall\"], Date.now());\n  }\n\n  if (!action.type.includes(\"MOUSE\")) {\n    state = setIn(state, [\"lastAction\"], action);\n  }\n\n  var _getActiveImage = getActiveImage(state),\n      currentImageIndex = _getActiveImage.currentImageIndex,\n      pathToActiveImage = _getActiveImage.pathToActiveImage,\n      activeImage = _getActiveImage.activeImage;\n\n  var getRegionIndex = function getRegionIndex(region) {\n    var regionId = typeof region === \"string\" || typeof region === \"number\" ? region : region.id;\n    if (!activeImage) return null;\n    var regionIndex = (activeImage.regions || []).findIndex(function (r) {\n      return r.id === regionId;\n    });\n    return regionIndex === -1 ? null : regionIndex;\n  };\n\n  var getRegion = function getRegion(regionId) {\n    if (!activeImage) return null;\n    var regionIndex = getRegionIndex(regionId);\n    if (regionIndex === null) return [null, null];\n    var region = activeImage.regions[regionIndex];\n    return [region, regionIndex];\n  };\n\n  var modifyRegion = function modifyRegion(regionId, obj) {\n    var _getRegion = getRegion(regionId),\n        _getRegion2 = _slicedToArray(_getRegion, 2),\n        region = _getRegion2[0],\n        regionIndex = _getRegion2[1];\n\n    if (!region) return state;\n\n    if (obj !== null) {\n      return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\", regionIndex]), _objectSpread(_objectSpread({}, region), obj));\n    } else {\n      // delete region\n      var regions = activeImage.regions;\n      return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\"]), (regions || []).filter(function (r) {\n        return r.id !== region.id;\n      }));\n    }\n  };\n\n  var closeEditors = function closeEditors(state) {\n    if (currentImageIndex === null) return state;\n    return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\"]), (activeImage.regions || []).map(function (r) {\n      return _objectSpread(_objectSpread({}, r), {}, {\n        editingLabels: false\n      });\n    }));\n  };\n\n  var setNewImage = function setNewImage(img, index) {\n    var _ref = typeof img === \"object\" ? img : {\n      src: img\n    },\n        src = _ref.src;\n\n    return setIn(setIn(state, [\"selectedImage\"], index), [\"selectedImageFrameTime\"]);\n  };\n\n  switch (action.type) {\n    case \"@@INIT\":\n      {\n        return state;\n      }\n\n    case \"SELECT_IMAGE\":\n      {\n        return setNewImage(action.image, action.imageIndex);\n      }\n\n    case \"CHANGE_REGION\":\n      {\n        var regionIndex = getRegionIndex(action.region);\n        if (regionIndex === null) return state;\n        var oldRegion = activeImage.regions[regionIndex];\n\n        if (oldRegion.cls !== action.region.cls) {\n          state = saveToHistory(state, \"Change Region Classification\");\n          var clsIndex = state.regionClsList.indexOf(action.region.cls);\n\n          if (clsIndex !== -1) {\n            action.region.color = colors[clsIndex % colors.length];\n          }\n        }\n\n        if (!isEqual(oldRegion.tags, action.region.tags)) {\n          state = saveToHistory(state, \"Change Region Tags\");\n        }\n\n        if (!isEqual(oldRegion.comment, action.region.comment)) {\n          state = saveToHistory(state, \"Change Region Comment\");\n        }\n\n        return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\", regionIndex]), action.region);\n      }\n\n    case \"CHANGE_IMAGE\":\n      {\n        if (!activeImage) return state;\n        var delta = action.delta;\n\n        for (var _i = 0, _Object$keys = Object.keys(delta); _i < _Object$keys.length; _i++) {\n          var key = _Object$keys[_i];\n          if (key === \"cls\") saveToHistory(state, \"Change Image Class\");\n          if (key === \"tags\") saveToHistory(state, \"Change Image Tags\");\n          state = setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [key]), delta[key]);\n        }\n\n        return state;\n      }\n\n    case \"SELECT_REGION\":\n      {\n        var region = action.region;\n\n        var _regionIndex = getRegionIndex(action.region);\n\n        if (_regionIndex === null) return state;\n\n        var regions = _toConsumableArray(activeImage.regions || []).map(function (r) {\n          return _objectSpread(_objectSpread({}, r), {}, {\n            highlighted: r.id === region.id,\n            editingLabels: r.id === region.id\n          });\n        });\n\n        return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\"]), regions);\n      }\n\n    case \"BEGIN_MOVE_POINT\":\n      {\n        state = closeEditors(state);\n        return setIn(state, [\"mode\"], {\n          mode: \"MOVE_REGION\",\n          regionId: action.point.id\n        });\n      }\n\n    case \"BEGIN_BOX_TRANSFORM\":\n      {\n        var rectangle = action.rectangle,\n            directions = action.directions;\n        state = closeEditors(state);\n\n        if (directions[0] === 0 && directions[1] === 0) {\n          return setIn(state, [\"mode\"], {\n            mode: \"MOVE_REGION\",\n            regionId: rectangle.id\n          });\n        } else {\n          return setIn(state, [\"mode\"], {\n            mode: \"RESIZE_BOX\",\n            regionId: rectangle.id,\n            freedom: directions,\n            original: {\n              x: rectangle.x,\n              y: rectangle.y,\n              w: rectangle.w,\n              h: rectangle.h\n            }\n          });\n        }\n      }\n\n    case \"BEGIN_MOVE_POLYGON_POINT\":\n      {\n        var polygon = action.polygon,\n            pointIndex = action.pointIndex;\n        state = closeEditors(state);\n\n        if (state.mode && state.mode.mode === \"DRAW_POLYGON\" && pointIndex === 0) {\n          return setIn(modifyRegion(polygon, {\n            points: polygon.points.slice(0, -1),\n            open: false\n          }), [\"mode\"], null);\n        } else {\n          state = saveToHistory(state, \"Move Polygon Point\");\n        }\n\n        return setIn(state, [\"mode\"], {\n          mode: \"MOVE_POLYGON_POINT\",\n          regionId: polygon.id,\n          pointIndex: pointIndex\n        });\n      }\n\n    case \"ADD_POLYGON_POINT\":\n      {\n        var _polygon = action.polygon,\n            point = action.point,\n            _pointIndex = action.pointIndex;\n\n        var _regionIndex2 = getRegionIndex(_polygon);\n\n        if (_regionIndex2 === null) return state;\n\n        var points = _toConsumableArray(_polygon.points);\n\n        points.splice(_pointIndex, 0, point);\n        return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\", _regionIndex2]), _objectSpread(_objectSpread({}, _polygon), {}, {\n          points: points\n        }));\n      }\n\n    case \"BEGIN_MOVE_POLYGON1_POINT\":\n      {\n        var polygon1 = action.polygon1,\n            point1Index = action.point1Index;\n        state = closeEditors(state);\n\n        if (state.mode && state.mode.mode === \"DRAW_POLYGON1\" && point1Index === 0) {\n          return setIn(modifyRegion(polygon1, {\n            points: polygon1.points.slice(0, -1),\n            open: false\n          }), [\"mode\"], null);\n        } else {\n          state = saveToHistory(state, \"Move Polygon Point\");\n        }\n\n        return setIn(state, [\"mode\"], {\n          mode: \"MOVE_POLYGON_POINT\",\n          regionId: polygon1.id,\n          point1Index: point1Index\n        });\n      }\n\n    case \"ADD_POLYGON1_POINT\":\n      {\n        var _polygon2 = action.polygon1,\n            point1 = action.point1,\n            _point1Index = action.point1Index;\n\n        var _regionIndex3 = getRegionIndex(_polygon2);\n\n        if (_regionIndex3 === null) return state;\n\n        var _points = _toConsumableArray(_polygon2.points);\n\n        var holes = _toConsumableArray(_polygon2.holes);\n\n        var open = _toConsumableArray(_polygon2.open);\n\n        var creatingHole = _toConsumableArray(_polygon2.creatingHole);\n\n        _points.splice(_point1Index, 0, point1);\n\n        if (!open) {\n          creatingHole = true;\n          holes.splice(_point1Index - _points.length, 0, point1);\n        }\n\n        return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\", _regionIndex3]), _objectSpread(_objectSpread({}, _polygon2), {}, {\n          points: _points,\n          holes: holes,\n          creatingHole: creatingHole\n        }));\n      }\n\n    case \"MOUSE_MOVE\":\n      {\n        var x = action.x,\n            y = action.y;\n        if (!state.mode) return state;\n        if (!activeImage) return state;\n        var _state = state,\n            mouseDownAt = _state.mouseDownAt;\n\n        switch (state.mode.mode) {\n          case \"MOVE_POLYGON_POINT\":\n            {\n              var _state$mode = state.mode,\n                  _pointIndex2 = _state$mode.pointIndex,\n                  regionId = _state$mode.regionId;\n\n              var _regionIndex4 = getRegionIndex(regionId);\n\n              if (_regionIndex4 === null) return state;\n              return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\", _regionIndex4, \"points\", _pointIndex2]), [x, y]);\n            }\n\n          case \"MOVE_POLYGON1_POINT\":\n            {\n              var _state$mode2 = state.mode,\n                  _pointIndex3 = _state$mode2.pointIndex,\n                  _regionId = _state$mode2.regionId;\n\n              var _regionIndex5 = getRegionIndex(_regionId);\n\n              if (_regionIndex5 === null) return state;\n              return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\", _regionIndex5, \"points\", \"holes\", _pointIndex3]), [x, y]);\n            }\n\n          case \"MOVE_REGION\":\n            {\n              var _regionId2 = state.mode.regionId;\n\n              if (_regionId2 === \"$$allowed_area\") {\n                var _state2 = state,\n                    _state2$allowedArea = _state2.allowedArea,\n                    w = _state2$allowedArea.w,\n                    h = _state2$allowedArea.h;\n                return setIn(state, [\"allowedArea\"], {\n                  x: x - w / 2,\n                  y: y - h / 2,\n                  w: w,\n                  h: h\n                });\n              }\n\n              var _regionIndex6 = getRegionIndex(_regionId2);\n\n              if (_regionIndex6 === null) return state;\n              return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\", _regionIndex6]), moveRegion(activeImage.regions[_regionIndex6], x, y));\n            }\n\n          case \"RESIZE_BOX\":\n            {\n              var _state$mode3 = state.mode,\n                  _regionId3 = _state$mode3.regionId,\n                  _state$mode3$freedom = _slicedToArray(_state$mode3.freedom, 2),\n                  xFree = _state$mode3$freedom[0],\n                  yFree = _state$mode3$freedom[1],\n                  _state$mode3$original = _state$mode3.original,\n                  ox = _state$mode3$original.x,\n                  oy = _state$mode3$original.y,\n                  ow = _state$mode3$original.w,\n                  oh = _state$mode3$original.h;\n\n              var dx = xFree === 0 ? ox : xFree === -1 ? Math.min(ox + ow, x) : ox;\n              var dw = xFree === 0 ? ow : xFree === -1 ? ow + (ox - dx) : Math.max(0, ow + (x - ox - ow));\n              var dy = yFree === 0 ? oy : yFree === -1 ? Math.min(oy + oh, y) : oy;\n              var dh = yFree === 0 ? oh : yFree === -1 ? oh + (oy - dy) : Math.max(0, oh + (y - oy - oh)); // determine if we should switch the freedom\n\n              if (dw <= 0.001) {\n                state = setIn(state, [\"mode\", \"freedom\"], [xFree * -1, yFree]);\n              }\n\n              if (dh <= 0.001) {\n                state = setIn(state, [\"mode\", \"freedom\"], [xFree, yFree * -1]);\n              }\n\n              if (_regionId3 === \"$$allowed_area\") {\n                return setIn(state, [\"allowedArea\"], {\n                  x: dx,\n                  w: dw,\n                  y: dy,\n                  h: dh\n                });\n              }\n\n              var _regionIndex7 = getRegionIndex(_regionId3);\n\n              if (_regionIndex7 === null) return state;\n              var _rectangle = activeImage.regions[_regionIndex7];\n              return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\", _regionIndex7]), _objectSpread(_objectSpread({}, _rectangle), {}, {\n                x: dx,\n                w: dw,\n                y: dy,\n                h: dh\n              }));\n            }\n\n          case \"DRAW_POLYGON\":\n            {\n              var _regionId4 = state.mode.regionId;\n\n              var _getRegion3 = getRegion(_regionId4),\n                  _getRegion4 = _slicedToArray(_getRegion3, 2),\n                  _region = _getRegion4[0],\n                  _regionIndex8 = _getRegion4[1];\n\n              if (!_region) return setIn(state, [\"mode\"], null);\n              return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\", _regionIndex8, \"points\", _region.points.length - 1]), [x, y]);\n            }\n\n          case \"DRAW_POLYGON1\":\n            {\n              var _regionId5 = state.mode.regionId;\n\n              var _getRegion5 = getRegion(_regionId5),\n                  _getRegion6 = _slicedToArray(_getRegion5, 2),\n                  _region2 = _getRegion6[0],\n                  _regionIndex9 = _getRegion6[1];\n\n              if (!_region2) return setIn(state, [\"mode\"], null);\n              return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\", _regionIndex9, \"points\", \"holes\", \"createHole\", _region2.points.length + _region2.holes.length - 1]), [x, y]);\n            }\n\n          case \"RESIZE_CIRCLE\":\n            {\n              var _regionId6 = state.mode.regionId;\n\n              var _getRegion7 = getRegion(_regionId6),\n                  _getRegion8 = _slicedToArray(_getRegion7, 2),\n                  _region3 = _getRegion8[0],\n                  _regionIndex10 = _getRegion8[1];\n\n              if (!_region3) return setIn(state, [\"mode\"], null);\n              return setIn(state, [\"images\", currentImageIndex, \"regions\", _regionIndex10], _objectSpread(_objectSpread({}, _region3), {}, {\n                xr: Math.abs(_region3.x - x),\n                yr: Math.abs(_region3.y - y)\n              }));\n            }\n\n          default:\n            return state;\n        }\n      }\n\n    case \"MOUSE_DOWN\":\n      {\n        if (!activeImage) return state;\n        var _x = action.x,\n            _y = action.y;\n        state = setIn(state, [\"mouseDownAt\"], {\n          x: _x,\n          y: _y\n        });\n\n        if (state.mode) {\n          switch (state.mode.mode) {\n            case \"DRAW_POLYGON\":\n              {\n                var _getRegion9 = getRegion(state.mode.regionId),\n                    _getRegion10 = _slicedToArray(_getRegion9, 2),\n                    _polygon3 = _getRegion10[0],\n                    _regionIndex11 = _getRegion10[1];\n\n                if (!_polygon3) break;\n                return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\", _regionIndex11]), _objectSpread(_objectSpread({}, _polygon3), {}, {\n                  points: _polygon3.points.concat([[_x, _y]])\n                }));\n              }\n\n            case \"DRAW_POLYGON1\":\n              {\n                var _getRegion11 = getRegion(state.mode.regionId),\n                    _getRegion12 = _slicedToArray(_getRegion11, 2),\n                    _polygon4 = _getRegion12[0],\n                    region1Index = _getRegion12[1];\n\n                if (!_polygon4) break;\n                return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\", region1Index]), _objectSpread(_objectSpread({}, _polygon4), {}, {\n                  points: _polygon4.points.concat([[_x, _y]]),\n                  holes: _polygon4.holes.concat([[_x, _y]])\n                }));\n              }\n\n            case \"DRAW_CIRCLE\":\n              {\n                var _getRegion13 = getRegion(state.mode.regionId),\n                    _getRegion14 = _slicedToArray(_getRegion13, 2),\n                    circle = _getRegion14[0],\n                    _regionIndex12 = _getRegion14[1];\n\n                if (!circle) break;\n                return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\", _regionIndex12]), _objectSpread({}, circle));\n              }\n\n            default:\n              break;\n          }\n        }\n\n        var newRegion;\n        var defaultRegionCls = undefined,\n            defaultRegionColor = \"#ff0000\";\n\n        if (activeImage && (activeImage.regions || []).length > 0) {\n          defaultRegionCls = activeImage.regions.slice(-1)[0].cls;\n\n          var _clsIndex = (state.regionClsList || []).indexOf(defaultRegionCls);\n\n          if (_clsIndex !== -1) {\n            defaultRegionColor = colors[_clsIndex % colors.length];\n          }\n        }\n\n        switch (state.selectedTool) {\n          case \"create-point\":\n            {\n              state = saveToHistory(state, \"Create Point\");\n              newRegion = {\n                type: \"point\",\n                x: _x,\n                y: _y,\n                highlighted: true,\n                editingLabels: true,\n                color: defaultRegionColor,\n                id: getRandomId(),\n                cls: defaultRegionCls\n              };\n              break;\n            }\n\n          case \"create-rectangle\":\n            {\n              state = saveToHistory(state, \"Create Rectangle\");\n              newRegion = {\n                type: \"rectangle\",\n                x: _x,\n                y: _y,\n                w: 0,\n                h: 0,\n                highlighted: true,\n                editingLabels: false,\n                color: defaultRegionColor,\n                cls: defaultRegionCls,\n                id: getRandomId()\n              };\n              state = setIn(state, [\"mode\"], {\n                mode: \"RESIZE_BOX\",\n                editLabelEditorAfter: true,\n                regionId: newRegion.id,\n                freedom: [1, 1],\n                original: {\n                  x: _x,\n                  y: _y,\n                  w: newRegion.w,\n                  h: newRegion.h\n                },\n                isNew: true\n              });\n              break;\n            }\n\n          case \"create-polygon\":\n            {\n              if (state.mode && state.mode.mode === \"DRAW_POLYGON\") break;\n              state = saveToHistory(state, \"Create Polygon\");\n              newRegion = {\n                type: \"polygon\",\n                points: [[_x, _y], [_x, _y]],\n                open: true,\n                highlighted: true,\n                color: defaultRegionColor,\n                cls: defaultRegionCls,\n                id: getRandomId()\n              };\n              state = setIn(state, [\"mode\"], {\n                mode: \"DRAW_POLYGON\",\n                regionId: newRegion.id\n              });\n              break;\n            }\n\n          case \"create-polygon1\":\n            {\n              if (state.mode && state.mode.mode === \"DRAW_POLYGON1\") break;\n              state = saveToHistory(state, \"Create Polygon1\");\n              newRegion = {\n                type: \"polygon1\",\n                points: [[_x, _y], [_x, _y]],\n                holes: [[_x, _y], [_x, _y]],\n                open: true,\n                creatingHole: false,\n                highlighted: true,\n                color: defaultRegionColor,\n                cls: defaultRegionCls,\n                id: getRandomId()\n              };\n              state = setIn(state, [\"mode\"], {\n                mode: \"DRAW_POLYGON1\",\n                regionId: newRegion.id\n              });\n              break;\n            }\n\n          case \"create-circle\":\n            {\n              state = saveToHistory(state, \"Create Circle\");\n              newRegion = {\n                type: \"circle\",\n                x: _x,\n                y: _y,\n                xr: 0.1,\n                yr: 0.1,\n                highlighted: true,\n                editingLabels: false,\n                color: defaultRegionColor,\n                id: getRandomId()\n              }; // state = unselectRegions(state)\n\n              state = setIn(state, [\"mode\"], {\n                mode: \"RESIZE_CIRCLE\",\n                editLabelEditorAfter: true,\n                regionId: newRegion.id,\n                original: {\n                  x: _x,\n                  y: _y,\n                  xr: newRegion.xr,\n                  yr: newRegion.yr\n                }\n              });\n              break;\n            }\n\n          default:\n            break;\n        }\n\n        var _regions = _toConsumableArray(getIn(state, pathToActiveImage).regions || []).map(function (r) {\n          return setIn(r, [\"editingLabels\"], false).setIn([\"highlighted\"], false);\n        }).concat(newRegion ? [newRegion] : []);\n\n        return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\"]), _regions);\n      }\n\n    case \"MOUSE_UP\":\n      {\n        var _x2 = action.x,\n            _y2 = action.y;\n\n        var _state3 = state,\n            _state3$mouseDownAt = _state3.mouseDownAt,\n            _mouseDownAt = _state3$mouseDownAt === void 0 ? {\n          x: _x2,\n          y: _y2\n        } : _state3$mouseDownAt;\n\n        if (!state.mode) return state;\n        state = setIn(state, [\"mouseDownAt\"], null);\n\n        switch (state.mode.mode) {\n          case \"RESIZE_BOX\":\n            {\n              if (state.mode.isNew) {\n                if (Math.abs(state.mode.original.x - _x2) < 0.002 || Math.abs(state.mode.original.y - _y2) < 0.002) {\n                  return setIn(modifyRegion(state.mode.regionId, null), [\"mode\"], null);\n                }\n              }\n\n              if (state.mode.editLabelEditorAfter) {\n                return _objectSpread(_objectSpread({}, modifyRegion(state.mode.regionId, {\n                  editingLabels: true\n                })), {}, {\n                  mode: null\n                });\n              }\n            }\n\n          case \"MOVE_REGION\":\n          case \"RESIZE_CIRCLE\":\n            {\n              if (state.mode.editLabelEditorAfter) {\n                return _objectSpread(_objectSpread({}, modifyRegion(state.mode.regionId, {\n                  editingLabels: true\n                })), {}, {\n                  mode: null\n                });\n              }\n            }\n\n          case \"MOVE_POLYGON_POINT\":\n            {\n              return _objectSpread(_objectSpread({}, state), {}, {\n                mode: null\n              });\n            }\n\n          case \"MOVE_POLYGON1_POINT\":\n            {\n              return _objectSpread(_objectSpread({}, state), {}, {\n                mode: null\n              });\n            }\n\n          default:\n            return state;\n        }\n      }\n\n    case \"OPEN_REGION_EDITOR\":\n      {\n        var _region4 = action.region;\n\n        var _regionIndex13 = getRegionIndex(action.region);\n\n        if (_regionIndex13 === null) return state;\n        var newRegions = setIn(activeImage.regions.map(function (r) {\n          return _objectSpread(_objectSpread({}, r), {}, {\n            highlighted: false,\n            editingLabels: false\n          });\n        }), [_regionIndex13], _objectSpread(_objectSpread({}, (activeImage.regions || [])[_regionIndex13]), {}, {\n          highlighted: true,\n          editingLabels: true\n        }));\n        return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\"]), newRegions);\n      }\n\n    case \"CLOSE_REGION_EDITOR\":\n      {\n        var _regionIndex14 = getRegionIndex(action.region);\n\n        if (_regionIndex14 === null) return state;\n        return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\", _regionIndex14]), _objectSpread(_objectSpread({}, (activeImage.regions || [])[_regionIndex14]), {}, {\n          editingLabels: false\n        }));\n      }\n\n    case \"DELETE_REGION\":\n      {\n        var _regionIndex15 = getRegionIndex(action.region);\n\n        if (_regionIndex15 === null) return state;\n        return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\"]), (activeImage.regions || []).filter(function (r) {\n          return r.id !== action.region.id;\n        }));\n      }\n\n    case \"DELETE_SELECTED_REGION\":\n      {\n        return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\"]), (activeImage.regions || []).filter(function (r) {\n          return !r.highlighted;\n        }));\n      }\n\n    case \"HEADER_BUTTON_CLICKED\":\n      {\n        var buttonName = action.buttonName.toLowerCase();\n\n        switch (buttonName) {\n          case \"prev\":\n            {\n              if (currentImageIndex === null) return state;\n              if (currentImageIndex === 0) return state;\n              return setNewImage(state.images[currentImageIndex - 1], currentImageIndex - 1);\n            }\n\n          case \"next\":\n            {\n              if (currentImageIndex === null) return state;\n              if (currentImageIndex === state.images.length - 1) return state;\n              return setNewImage(state.images[currentImageIndex + 1], currentImageIndex + 1);\n            }\n\n          case \"clone\":\n            {\n              if (currentImageIndex === null) return state;\n              if (currentImageIndex === state.images.length - 1) return state;\n              return setIn(setNewImage(state.images[currentImageIndex + 1], currentImageIndex + 1), [\"images\", currentImageIndex + 1, \"regions\"], activeImage.regions);\n            }\n\n          case \"hotkeys\":\n            {\n              return state;\n            }\n\n          case \"exit\":\n          case \"done\":\n            {\n              return state;\n            }\n\n          default:\n            return state;\n        }\n      }\n\n    case \"SELECT_TOOL\":\n      {\n        state = setIn(state, [\"mode\"], null);\n        return setIn(state, [\"selectedTool\"], action.selectedTool);\n      }\n\n    case \"BEGIN_CIRCLE_TRANSFORM\":\n      {\n        var _circle = action.circle,\n            _directions = action.directions;\n        state = closeEditors(state);\n\n        if (_directions === \"MOVE_REGION\") {\n          return setIn(state, [\"mode\"], {\n            mode: \"MOVE_REGION\",\n            regionId: _circle.id\n          });\n        } else {\n          return setIn(state, [\"mode\"], {\n            mode: \"RESIZE_CIRCLE\",\n            regionId: _circle.id,\n            original: {\n              x: _circle.x,\n              y: _circle.y,\n              rx: _circle.rx,\n              ry: _circle.ry\n            }\n          });\n        }\n      }\n\n    case \"CANCEL\":\n      {\n        var _state4 = state,\n            mode = _state4.mode;\n\n        if (mode) {\n          switch (mode.mode) {\n            case \"DRAW_POLYGON\":\n              {\n                var _regionId7 = mode.regionId;\n                return modifyRegion(_regionId7, null);\n              }\n\n            case \"DRAW_POLYGON1\":\n              {\n                var _regionId8 = mode.regionId;\n                return modifyRegion(_regionId8, null);\n              }\n\n            case \"MOVE_POLYGON_POINT\":\n            case \"MOVE_POLYGON1_POINT\":\n            case \"RESIZE_BOX\":\n            case \"RESIZE_CIRCLE\":\n            case \"MOVE_REGION\":\n              {\n                return setIn(state, [\"mode\"], null);\n              }\n\n            default:\n              return state;\n          }\n        } // Close any open boxes\n\n\n        var _regions2 = activeImage.regions;\n\n        if (_regions2 && _regions2.some(function (r) {\n          return r.editingLabels;\n        })) {\n          return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\"]), _regions2.map(function (r) {\n            return _objectSpread(_objectSpread({}, r), {}, {\n              editingLabels: false\n            });\n          }));\n        } else if (_regions2) {\n          return setIn(state, [].concat(_toConsumableArray(pathToActiveImage), [\"regions\"]), _regions2.map(function (r) {\n            return _objectSpread(_objectSpread({}, r), {}, {\n              highlighted: false\n            });\n          }));\n        }\n\n        break;\n      }\n\n    default:\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["D:/GitHub/ML4GIS/client/src/pages/Home/annotateComponents/reducers/generalReducer.js"],"names":["moveRegion","getIn","setIn","updateIn","isEqual","getActiveImage","saveToHistory","colors","getRandomId","Math","random","toString","split","state","action","type","Date","now","lastMouseMoveCall","includes","currentImageIndex","pathToActiveImage","activeImage","getRegionIndex","region","regionId","id","regionIndex","regions","findIndex","r","getRegion","modifyRegion","obj","filter","closeEditors","map","editingLabels","setNewImage","img","index","src","image","imageIndex","oldRegion","cls","clsIndex","regionClsList","indexOf","color","length","tags","comment","delta","Object","keys","key","highlighted","mode","point","rectangle","directions","freedom","original","x","y","w","h","polygon","pointIndex","points","slice","open","splice","polygon1","point1Index","point1","holes","creatingHole","mouseDownAt","allowedArea","xFree","yFree","ox","oy","ow","oh","dx","min","dw","max","dy","dh","xr","abs","yr","concat","region1Index","circle","newRegion","defaultRegionCls","undefined","defaultRegionColor","selectedTool","editLabelEditorAfter","isNew","newRegions","buttonName","toLowerCase","images","rx","ry","some"],"mappings":"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","sourcesContent":["import type { MainLayoutState, Action } from \"../MainLayout/types\"\r\nimport { moveRegion } from \"../ImageCanvas/regionTools.js\"\r\nimport { getIn, setIn, updateIn } from \"seamless-immutable\"\r\nimport isEqual from \"lodash/isEqual\"\r\nimport getActiveImage from \"./getActiveImage\"\r\nimport { saveToHistory } from \"./historyHandler.js\"\r\nimport colors from \"../ImageCanvas/colors\"\r\n\r\nconst getRandomId = () => Math.random().toString().split(\".\")[1]\r\n\r\nexport default (state: MainLayoutState, action: Action) => {\r\n  // Throttle certain actions\r\n  if (action.type === \"MOUSE_MOVE\") {\r\n    if (Date.now() - ((state: any).lastMouseMoveCall || 0) < 16) return state\r\n    state = setIn(state, [\"lastMouseMoveCall\"], Date.now())\r\n  }\r\n  if (!action.type.includes(\"MOUSE\")) {\r\n    state = setIn(state, [\"lastAction\"], action)\r\n  }\r\n\r\n  const { currentImageIndex, pathToActiveImage, activeImage } = getActiveImage(\r\n    state\r\n  )\r\n\r\n  const getRegionIndex = (region) => {\r\n    const regionId =\r\n      typeof region === \"string\" || typeof region === \"number\"\r\n        ? region\r\n        : region.id\r\n    if (!activeImage) return null\r\n    const regionIndex = (activeImage.regions || []).findIndex(\r\n      (r) => r.id === regionId\r\n    )\r\n    return regionIndex === -1 ? null : regionIndex\r\n  }\r\n  const getRegion = (regionId) => {\r\n    if (!activeImage) return null\r\n    const regionIndex = getRegionIndex(regionId)\r\n    if (regionIndex === null) return [null, null]\r\n    const region = activeImage.regions[regionIndex]\r\n    return [region, regionIndex]\r\n  }\r\n  const modifyRegion = (regionId, obj) => {\r\n    const [region, regionIndex] = getRegion(regionId)\r\n    if (!region) return state\r\n    if (obj !== null) {\r\n      return setIn(state, [...pathToActiveImage, \"regions\", regionIndex], {\r\n        ...region,\r\n        ...obj,\r\n      })\r\n    } else {\r\n      // delete region\r\n      const regions = activeImage.regions\r\n      return setIn(\r\n        state,\r\n        [...pathToActiveImage, \"regions\"],\r\n        (regions || []).filter((r) => r.id !== region.id)\r\n      )\r\n    }\r\n  }\r\n\r\n  const closeEditors = (state: MainLayoutState) => {\r\n    if (currentImageIndex === null) return state\r\n    return setIn(\r\n      state,\r\n      [...pathToActiveImage, \"regions\"],\r\n      (activeImage.regions || []).map((r) => ({\r\n        ...r,\r\n        editingLabels: false,\r\n      }))\r\n    )\r\n  }\r\n\r\n  const setNewImage = (img: string | Object, index: number) => {\r\n    let { src } = typeof img === \"object\" ? img : { src: img }\r\n    return setIn(\r\n      setIn(state, [\"selectedImage\"], index),\r\n      [\"selectedImageFrameTime\"]\r\n    )\r\n  }\r\n\r\n  switch (action.type) {\r\n    case \"@@INIT\": {\r\n      return state\r\n    }\r\n    case \"SELECT_IMAGE\": {\r\n      return setNewImage(action.image, action.imageIndex)\r\n    }\r\n    case \"CHANGE_REGION\": {\r\n      const regionIndex = getRegionIndex(action.region)\r\n      if (regionIndex === null) return state\r\n      const oldRegion = activeImage.regions[regionIndex]\r\n      if (oldRegion.cls !== action.region.cls) {\r\n        state = saveToHistory(state, \"Change Region Classification\")\r\n        const clsIndex = state.regionClsList.indexOf(action.region.cls)\r\n        if (clsIndex !== -1) {\r\n          action.region.color = colors[clsIndex % colors.length]\r\n        }\r\n      }\r\n      if (!isEqual(oldRegion.tags, action.region.tags)) {\r\n        state = saveToHistory(state, \"Change Region Tags\")\r\n      }\r\n      if (!isEqual(oldRegion.comment, action.region.comment)) {\r\n        state = saveToHistory(state, \"Change Region Comment\")\r\n      }\r\n      return setIn(\r\n        state,\r\n        [...pathToActiveImage, \"regions\", regionIndex],\r\n        action.region\r\n      )\r\n    }\r\n    case \"CHANGE_IMAGE\": {\r\n      if (!activeImage) return state\r\n      const { delta } = action\r\n      for (const key of Object.keys(delta)) {\r\n        if (key === \"cls\") saveToHistory(state, \"Change Image Class\")\r\n        if (key === \"tags\") saveToHistory(state, \"Change Image Tags\")\r\n        state = setIn(state, [...pathToActiveImage, key], delta[key])\r\n      }\r\n      return state\r\n    }\r\n    case \"SELECT_REGION\": {\r\n      const { region } = action\r\n      const regionIndex = getRegionIndex(action.region)\r\n      if (regionIndex === null) return state\r\n      const regions = [...(activeImage.regions || [])].map((r) => ({\r\n        ...r,\r\n        highlighted: r.id === region.id,\r\n        editingLabels: r.id === region.id,\r\n      }))\r\n      return setIn(state, [...pathToActiveImage, \"regions\"], regions)\r\n    }\r\n    case \"BEGIN_MOVE_POINT\": {\r\n      state = closeEditors(state)\r\n      return setIn(state, [\"mode\"], {\r\n        mode: \"MOVE_REGION\",\r\n        regionId: action.point.id,\r\n      })\r\n    }\r\n    case \"BEGIN_BOX_TRANSFORM\": {\r\n      const { rectangle, directions } = action\r\n      state = closeEditors(state)\r\n      if (directions[0] === 0 && directions[1] === 0) {\r\n        return setIn(state, [\"mode\"], { mode: \"MOVE_REGION\", regionId: rectangle.id })\r\n      } else {\r\n        return setIn(state, [\"mode\"], {\r\n          mode: \"RESIZE_BOX\",\r\n          regionId: rectangle.id,\r\n          freedom: directions,\r\n          original: { x: rectangle.x, y: rectangle.y, w: rectangle.w, h: rectangle.h },\r\n        })\r\n      }\r\n    }\r\n    case \"BEGIN_MOVE_POLYGON_POINT\": {\r\n      const { polygon, pointIndex } = action\r\n      state = closeEditors(state)\r\n      if (\r\n        state.mode &&\r\n        state.mode.mode === \"DRAW_POLYGON\" &&\r\n        pointIndex === 0\r\n      ) {\r\n        return setIn(\r\n          modifyRegion(polygon, {\r\n            points: polygon.points.slice(0, -1),\r\n            open: false,\r\n          }),\r\n          [\"mode\"],\r\n          null\r\n        )\r\n      } else {\r\n        state = saveToHistory(state, \"Move Polygon Point\")\r\n      }\r\n      return setIn(state, [\"mode\"], {\r\n        mode: \"MOVE_POLYGON_POINT\",\r\n        regionId: polygon.id,\r\n        pointIndex,\r\n      })\r\n    }\r\n    case \"ADD_POLYGON_POINT\": {\r\n      const { polygon, point, pointIndex } = action\r\n      const regionIndex = getRegionIndex(polygon)\r\n      if (regionIndex === null) return state\r\n      const points = [...polygon.points]\r\n      points.splice(pointIndex, 0, point)\r\n      return setIn(state, [...pathToActiveImage, \"regions\", regionIndex], {\r\n        ...polygon,\r\n        points,\r\n      })\r\n    }\r\n    case \"BEGIN_MOVE_POLYGON1_POINT\": {\r\n      const { polygon1, point1Index } = action\r\n      state = closeEditors(state)\r\n      if (\r\n          state.mode &&\r\n          state.mode.mode === \"DRAW_POLYGON1\" &&\r\n          point1Index === 0\r\n      ) {\r\n        return setIn(\r\n            modifyRegion(polygon1, {\r\n              points: polygon1.points.slice(0, -1),\r\n              open: false,\r\n            }),\r\n            [\"mode\"],\r\n            null\r\n        )\r\n      } else {\r\n        state = saveToHistory(state, \"Move Polygon Point\")\r\n      }\r\n      return setIn(state, [\"mode\"], {\r\n        mode: \"MOVE_POLYGON_POINT\",\r\n        regionId: polygon1.id,\r\n        point1Index,\r\n      })\r\n    }\r\n    case \"ADD_POLYGON1_POINT\": {\r\n      const { polygon1, point1, point1Index} = action\r\n      const regionIndex = getRegionIndex(polygon1)\r\n      if (regionIndex === null) return state\r\n      const points = [...polygon1.points]\r\n      const holes = [...polygon1.holes]\r\n      const open=[...polygon1.open]\r\n      let creatingHole=[...polygon1.creatingHole]\r\n\r\n      points.splice(point1Index, 0, point1)\r\n      if(!open){\r\n        creatingHole=true\r\n        holes.splice(point1Index-points.length, 0, point1);\r\n      }\r\n\r\n      return setIn(state, [...pathToActiveImage, \"regions\", regionIndex], {\r\n        ...polygon1,\r\n        points,\r\n        holes,\r\n        creatingHole,\r\n      })\r\n    }\r\n    case \"MOUSE_MOVE\": {\r\n      const { x, y } = action\r\n\r\n      if (!state.mode) return state\r\n      if (!activeImage) return state\r\n      const { mouseDownAt } = state\r\n      switch (state.mode.mode) {\r\n        case \"MOVE_POLYGON_POINT\": {\r\n          const { pointIndex, regionId } = state.mode\r\n          const regionIndex = getRegionIndex(regionId)\r\n          if (regionIndex === null) return state\r\n          return setIn(\r\n            state,\r\n            [\r\n              ...pathToActiveImage,\r\n              \"regions\",\r\n              regionIndex,\r\n              \"points\",\r\n              pointIndex,\r\n            ],\r\n            [x, y]\r\n          )\r\n        }\r\n        case \"MOVE_POLYGON1_POINT\": {\r\n          const { pointIndex, regionId } = state.mode\r\n          const regionIndex = getRegionIndex(regionId)\r\n          if (regionIndex === null) return state\r\n          return setIn(\r\n              state,\r\n              [\r\n                ...pathToActiveImage,\r\n                \"regions\",\r\n                regionIndex,\r\n                \"points\",\r\n                \"holes\",\r\n                pointIndex,\r\n              ],\r\n              [x, y]\r\n          )\r\n        }\r\n        case \"MOVE_REGION\": {\r\n          const { regionId } = state.mode\r\n          if (regionId === \"$$allowed_area\") {\r\n            const {\r\n              allowedArea: { w, h },\r\n            } = state\r\n            return setIn(state, [\"allowedArea\"], {\r\n              x: x - w / 2,\r\n              y: y - h / 2,\r\n              w,\r\n              h,\r\n            })\r\n          }\r\n          const regionIndex = getRegionIndex(regionId)\r\n          if (regionIndex === null) return state\r\n          return setIn(\r\n            state,\r\n            [...pathToActiveImage, \"regions\", regionIndex],\r\n            moveRegion(activeImage.regions[regionIndex], x, y)\r\n          )\r\n        }\r\n        case \"RESIZE_BOX\": {\r\n          const {\r\n            regionId,\r\n            freedom: [xFree, yFree],\r\n            original: { x: ox, y: oy, w: ow, h: oh },\r\n          } = state.mode\r\n\r\n          const dx = xFree === 0 ? ox : xFree === -1 ? Math.min(ox + ow, x) : ox\r\n          const dw =\r\n            xFree === 0\r\n              ? ow\r\n              : xFree === -1\r\n              ? ow + (ox - dx)\r\n              : Math.max(0, ow + (x - ox - ow))\r\n          const dy = yFree === 0 ? oy : yFree === -1 ? Math.min(oy + oh, y) : oy\r\n          const dh =\r\n            yFree === 0\r\n              ? oh\r\n              : yFree === -1\r\n              ? oh + (oy - dy)\r\n              : Math.max(0, oh + (y - oy - oh))\r\n\r\n          // determine if we should switch the freedom\r\n          if (dw <= 0.001) {\r\n            state = setIn(state, [\"mode\", \"freedom\"], [xFree * -1, yFree])\r\n          }\r\n          if (dh <= 0.001) {\r\n            state = setIn(state, [\"mode\", \"freedom\"], [xFree, yFree * -1])\r\n          }\r\n\r\n          if (regionId === \"$$allowed_area\") {\r\n            return setIn(state, [\"allowedArea\"], {\r\n              x: dx,\r\n              w: dw,\r\n              y: dy,\r\n              h: dh,\r\n            })\r\n          }\r\n\r\n          const regionIndex = getRegionIndex(regionId)\r\n          if (regionIndex === null) return state\r\n          const rectangle= activeImage.regions[regionIndex]\r\n\r\n          return setIn(state, [...pathToActiveImage, \"regions\", regionIndex], {\r\n            ...rectangle,\r\n            x: dx,\r\n            w: dw,\r\n            y: dy,\r\n            h: dh,\r\n          })\r\n        }\r\n        case \"DRAW_POLYGON\": {\r\n          const { regionId } = state.mode\r\n          const [region, regionIndex] = getRegion(regionId)\r\n          if (!region) return setIn(state, [\"mode\"], null)\r\n          return setIn(\r\n            state,\r\n            [\r\n              ...pathToActiveImage,\r\n              \"regions\",\r\n              regionIndex,\r\n              \"points\",\r\n              (region: any).points.length - 1,\r\n            ],\r\n            [x, y]\r\n          )\r\n        }\r\n        case \"DRAW_POLYGON1\": {\r\n          const { regionId } = state.mode\r\n          const [region, regionIndex] = getRegion(regionId)\r\n          if (!region) return setIn(state, [\"mode\"], null)\r\n          return setIn(\r\n              state,\r\n              [\r\n                ...pathToActiveImage,\r\n                \"regions\",\r\n                regionIndex,\r\n                \"points\",\r\n                \"holes\",\r\n                \"createHole\",\r\n                (region: any).points.length+(region: any).holes.length - 1,\r\n              ],\r\n              [x, y]\r\n          )\r\n        }\r\n        case \"RESIZE_CIRCLE\": {\r\n          const { regionId } = state.mode\r\n          const [region, regionIndex] = getRegion(regionId)\r\n          if (!region) return setIn(state, [\"mode\"], null)\r\n          return setIn(\r\n              state,\r\n              [\"images\", currentImageIndex, \"regions\", regionIndex],\r\n              {\r\n                ...region,\r\n                xr: Math.abs(region.x - x),\r\n                yr: Math.abs(region.y - y)\r\n              }\r\n          )\r\n        }\r\n        default:\r\n          return state\r\n      }\r\n    }\r\n    case \"MOUSE_DOWN\": {\r\n      if (!activeImage) return state\r\n      const { x, y } = action\r\n\r\n      state = setIn(state, [\"mouseDownAt\"], { x, y })\r\n\r\n      if (state.mode) {\r\n        switch (state.mode.mode) {\r\n          case \"DRAW_POLYGON\": {\r\n            const [polygon, regionIndex] = getRegion(state.mode.regionId)\r\n            if (!polygon) break\r\n            return setIn(\r\n              state,\r\n              [...pathToActiveImage, \"regions\", regionIndex],\r\n              { ...polygon, points: polygon.points.concat([[x, y]]) }\r\n            )\r\n          }\r\n          case \"DRAW_POLYGON1\": {\r\n            const [polygon1, region1Index] = getRegion(state.mode.regionId)\r\n            if (!polygon1) break\r\n            return setIn(\r\n                state,\r\n                [...pathToActiveImage, \"regions\", region1Index],\r\n                { ...polygon1, points: polygon1.points.concat([[x, y]]),holes:polygon1.holes.concat([[x, y]]) }\r\n            )\r\n          }\r\n          case \"DRAW_CIRCLE\": {\r\n            const [circle, regionIndex] = getRegion(state.mode.regionId)\r\n            if (!circle) break\r\n            return setIn(\r\n                state,\r\n                [...pathToActiveImage, \"regions\", regionIndex],\r\n                { ...circle}\r\n            )\r\n          }\r\n          default:\r\n            break\r\n        }\r\n      }\r\n\r\n      let newRegion\r\n      let defaultRegionCls = undefined,\r\n        defaultRegionColor = \"#ff0000\"\r\n      if (activeImage && (activeImage.regions || []).length > 0) {\r\n        defaultRegionCls = activeImage.regions.slice(-1)[0].cls\r\n        const clsIndex = (state.regionClsList || []).indexOf(defaultRegionCls)\r\n        if (clsIndex !== -1) {\r\n          defaultRegionColor = colors[clsIndex % colors.length]\r\n        }\r\n      }\r\n\r\n      switch (state.selectedTool) {\r\n        case \"create-point\": {\r\n          state = saveToHistory(state, \"Create Point\")\r\n          newRegion = {\r\n            type: \"point\",\r\n            x,\r\n            y,\r\n            highlighted: true,\r\n            editingLabels: true,\r\n            color: defaultRegionColor,\r\n            id: getRandomId(),\r\n            cls: defaultRegionCls,\r\n          }\r\n          break\r\n        }\r\n        case \"create-rectangle\": {\r\n          state = saveToHistory(state, \"Create Rectangle\")\r\n          newRegion = {\r\n            type: \"rectangle\",\r\n            x: x,\r\n            y: y,\r\n            w: 0,\r\n            h: 0,\r\n            highlighted: true,\r\n            editingLabels: false,\r\n            color: defaultRegionColor,\r\n            cls: defaultRegionCls,\r\n            id: getRandomId(),\r\n          }\r\n          state = setIn(state, [\"mode\"], {\r\n            mode: \"RESIZE_BOX\",\r\n            editLabelEditorAfter: true,\r\n            regionId: newRegion.id,\r\n            freedom: [1, 1],\r\n            original: { x, y, w: newRegion.w, h: newRegion.h },\r\n            isNew: true,\r\n          })\r\n          break\r\n        }\r\n        case \"create-polygon\": {\r\n          if (state.mode && state.mode.mode === \"DRAW_POLYGON\") break\r\n          state = saveToHistory(state, \"Create Polygon\")\r\n          newRegion = {\r\n            type: \"polygon\",\r\n            points: [\r\n              [x, y],\r\n              [x, y],\r\n            ],\r\n            open: true,\r\n            highlighted: true,\r\n            color: defaultRegionColor,\r\n            cls: defaultRegionCls,\r\n            id: getRandomId(),\r\n          }\r\n          state = setIn(state, [\"mode\"], {\r\n            mode: \"DRAW_POLYGON\",\r\n            regionId: newRegion.id,\r\n          })\r\n          break\r\n        }\r\n        case \"create-polygon1\": {\r\n          if (state.mode && state.mode.mode === \"DRAW_POLYGON1\") break\r\n          state = saveToHistory(state, \"Create Polygon1\")\r\n          newRegion = {\r\n            type: \"polygon1\",\r\n            points: [\r\n              [x, y],\r\n              [x, y],\r\n            ],\r\n            holes:[[x, y],\r\n              [x, y],],\r\n            open: true,\r\n            creatingHole:false,\r\n            highlighted: true,\r\n            color: defaultRegionColor,\r\n            cls: defaultRegionCls,\r\n            id: getRandomId(),\r\n          }\r\n          state = setIn(state, [\"mode\"], {\r\n            mode: \"DRAW_POLYGON1\",\r\n            regionId: newRegion.id,\r\n          })\r\n          break\r\n        }\r\n        case \"create-circle\": {\r\n          state = saveToHistory(state, \"Create Circle\")\r\n          newRegion = {\r\n            type: \"circle\",\r\n            x: x,\r\n            y: y,\r\n            xr: 0.1,\r\n            yr: 0.1,\r\n            highlighted: true,\r\n            editingLabels: false,\r\n            color: defaultRegionColor,\r\n            id: getRandomId()\r\n          }\r\n          // state = unselectRegions(state)\r\n          state = setIn(state, [\"mode\"], {\r\n            mode: \"RESIZE_CIRCLE\",\r\n            editLabelEditorAfter: true,\r\n            regionId: newRegion.id,\r\n            original: { x: x, y: y, xr: newRegion.xr, yr: newRegion.yr }\r\n          })\r\n          break\r\n        }\r\n        default:\r\n          break\r\n      }\r\n\r\n      const regions = [...(getIn(state, pathToActiveImage).regions || [])]\r\n        .map((r) =>\r\n          setIn(r, [\"editingLabels\"], false).setIn([\"highlighted\"], false)\r\n        )\r\n        .concat(newRegion ? [newRegion] : [])\r\n\r\n      return setIn(state, [...pathToActiveImage, \"regions\"], regions)\r\n    }\r\n    case \"MOUSE_UP\": {\r\n      const { x, y } = action\r\n\r\n      const { mouseDownAt = { x, y } } = state\r\n      if (!state.mode) return state\r\n      state = setIn(state, [\"mouseDownAt\"], null)\r\n      switch (state.mode.mode) {\r\n        case \"RESIZE_BOX\": {\r\n          if (state.mode.isNew) {\r\n            if (\r\n              Math.abs(state.mode.original.x - x) < 0.002 ||\r\n              Math.abs(state.mode.original.y - y) < 0.002\r\n            ) {\r\n              return setIn(\r\n                modifyRegion(state.mode.regionId, null),\r\n                [\"mode\"],\r\n                null\r\n              )\r\n            }\r\n          }\r\n          if (state.mode.editLabelEditorAfter) {\r\n            return {\r\n              ...modifyRegion(state.mode.regionId, { editingLabels: true }),\r\n              mode: null,\r\n            }\r\n          }\r\n        }\r\n        case \"MOVE_REGION\":\r\n        case \"RESIZE_CIRCLE\": {\r\n          if (state.mode.editLabelEditorAfter) {\r\n            return {\r\n              ...modifyRegion(state.mode.regionId, { editingLabels: true }),\r\n              mode: null\r\n            }\r\n          }\r\n        }\r\n        case \"MOVE_POLYGON_POINT\": {\r\n          return { ...state, mode: null }\r\n        }\r\n        case \"MOVE_POLYGON1_POINT\": {\r\n          return { ...state, mode: null }\r\n        }\r\n        default:\r\n          return state\r\n      }\r\n    }\r\n    case \"OPEN_REGION_EDITOR\": {\r\n      const { region } = action\r\n      const regionIndex = getRegionIndex(action.region)\r\n      if (regionIndex === null) return state\r\n      const newRegions = setIn(\r\n        activeImage.regions.map((r) => ({\r\n          ...r,\r\n          highlighted: false,\r\n          editingLabels: false,\r\n        })),\r\n        [regionIndex],\r\n        {\r\n          ...(activeImage.regions || [])[regionIndex],\r\n          highlighted: true,\r\n          editingLabels: true,\r\n        }\r\n      )\r\n      return setIn(state, [...pathToActiveImage, \"regions\"], newRegions)\r\n    }\r\n    case \"CLOSE_REGION_EDITOR\": {\r\n      const regionIndex = getRegionIndex(action.region)\r\n      if (regionIndex === null) return state\r\n      return setIn(state, [...pathToActiveImage, \"regions\", regionIndex], {\r\n        ...(activeImage.regions || [])[regionIndex],\r\n        editingLabels: false,\r\n      })\r\n    }\r\n    case \"DELETE_REGION\": {\r\n      const regionIndex = getRegionIndex(action.region)\r\n      if (regionIndex === null) return state\r\n      return setIn(\r\n        state,\r\n        [...pathToActiveImage, \"regions\"],\r\n        (activeImage.regions || []).filter((r) => r.id !== action.region.id)\r\n      )\r\n    }\r\n    case \"DELETE_SELECTED_REGION\": {\r\n      return setIn(\r\n        state,\r\n        [...pathToActiveImage, \"regions\"],\r\n        (activeImage.regions || []).filter((r) => !r.highlighted)\r\n      )\r\n    }\r\n    case \"HEADER_BUTTON_CLICKED\": {\r\n      const buttonName = action.buttonName.toLowerCase()\r\n      switch (buttonName) {\r\n        case \"prev\": {\r\n          if (currentImageIndex === null) return state\r\n          if (currentImageIndex === 0) return state\r\n          return setNewImage(\r\n            state.images[currentImageIndex - 1],\r\n            currentImageIndex - 1\r\n          )\r\n        }\r\n        case \"next\": {\r\n          if (currentImageIndex === null) return state\r\n          if (currentImageIndex === state.images.length - 1) return state\r\n          return setNewImage(\r\n            state.images[currentImageIndex + 1],\r\n            currentImageIndex + 1\r\n          )\r\n        }\r\n        case \"clone\": {\r\n          if (currentImageIndex === null) return state\r\n          if (currentImageIndex === state.images.length - 1) return state\r\n          return setIn(\r\n            setNewImage(\r\n              state.images[currentImageIndex + 1],\r\n              currentImageIndex + 1\r\n            ),\r\n            [\"images\", currentImageIndex + 1, \"regions\"],\r\n            activeImage.regions\r\n          )\r\n        }\r\n        case \"hotkeys\": {\r\n          return state\r\n        }\r\n        case \"exit\":\r\n        case \"done\": {\r\n          return state\r\n        }\r\n        default:\r\n          return state\r\n      }\r\n    }\r\n    case \"SELECT_TOOL\": {\r\n\r\n      state = setIn(state, [\"mode\"], null)\r\n      return setIn(state, [\"selectedTool\"], action.selectedTool)\r\n    }\r\n    case \"BEGIN_CIRCLE_TRANSFORM\": {\r\n      const { circle, directions } = action\r\n      state = closeEditors(state)\r\n      if (directions === \"MOVE_REGION\") {\r\n        return setIn(state, [\"mode\"], {\r\n          mode: \"MOVE_REGION\",\r\n          regionId: circle.id\r\n        })\r\n      } else {\r\n        return setIn(state, [\"mode\"], {\r\n          mode: \"RESIZE_CIRCLE\",\r\n          regionId: circle.id,\r\n          original: { x: circle.x, y: circle.y, rx: circle.rx, ry: circle.ry }\r\n        })\r\n      }\r\n    }\r\n    case \"CANCEL\": {\r\n      const { mode } = state\r\n      if (mode) {\r\n        switch (mode.mode) {\r\n          case \"DRAW_POLYGON\": {\r\n            const { regionId } = mode\r\n            return modifyRegion(regionId, null)\r\n          }\r\n          case \"DRAW_POLYGON1\": {\r\n            const { regionId } = mode\r\n            return modifyRegion(regionId, null)\r\n          }\r\n          case \"MOVE_POLYGON_POINT\":\r\n          case \"MOVE_POLYGON1_POINT\":\r\n          case \"RESIZE_BOX\":\r\n          case \"RESIZE_CIRCLE\":\r\n          case \"MOVE_REGION\": {\r\n            return setIn(state, [\"mode\"], null)\r\n          }\r\n          default:\r\n            return state\r\n        }\r\n      }\r\n      // Close any open boxes\r\n      const regions: any = activeImage.regions\r\n      if (regions && regions.some((r) => r.editingLabels)) {\r\n        return setIn(\r\n          state,\r\n          [...pathToActiveImage, \"regions\"],\r\n          regions.map((r) => ({\r\n            ...r,\r\n            editingLabels: false,\r\n          }))\r\n        )\r\n      } else if (regions) {\r\n        return setIn(\r\n          state,\r\n          [...pathToActiveImage, \"regions\"],\r\n          regions.map((r) => ({\r\n            ...r,\r\n            highlighted: false,\r\n          }))\r\n        )\r\n      }\r\n      break\r\n    }\r\n\r\n\r\n    default:\r\n      break\r\n  }\r\n  return state\r\n}\r\n"]},"metadata":{},"sourceType":"module"}