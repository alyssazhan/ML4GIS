{"ast":null,"code":"/**\n * A collection of shims that provide minimal functionality of the ES6 collections.\n *\n * These implementations are not meant to be used outside of the ResizeObserver\n * modules as they cover only a limited range of use cases.\n */\n\n/* eslint-disable require-jsdoc, valid-jsdoc */\nvar MapShim = function () {\n  if (typeof Map !== 'undefined') {\n    return Map;\n  }\n  /**\n   * Returns index in provided array that matches the specified key.\n   *\n   * @param {Array<Array>} arr\n   * @param {*} key\n   * @returns {number}\n   */\n\n\n  function getIndex(arr, key) {\n    var result = -1;\n    arr.some(function (entry, index) {\n      if (entry[0] === key) {\n        result = index;\n        return true;\n      }\n\n      return false;\n    });\n    return result;\n  }\n\n  return (\n    /** @class */\n    function () {\n      function class_1() {\n        this.__entries__ = [];\n      }\n\n      Object.defineProperty(class_1.prototype, \"size\", {\n        /**\n         * @returns {boolean}\n         */\n        get: function get() {\n          return this.__entries__.length;\n        },\n        enumerable: true,\n        configurable: true\n      });\n      /**\n       * @param {*} key\n       * @returns {*}\n       */\n\n      class_1.prototype.get = function (key) {\n        var index = getIndex(this.__entries__, key);\n        var entry = this.__entries__[index];\n        return entry && entry[1];\n      };\n      /**\n       * @param {*} key\n       * @param {*} value\n       * @returns {void}\n       */\n\n\n      class_1.prototype.set = function (key, value) {\n        var index = getIndex(this.__entries__, key);\n\n        if (~index) {\n          this.__entries__[index][1] = value;\n        } else {\n          this.__entries__.push([key, value]);\n        }\n      };\n      /**\n       * @param {*} key\n       * @returns {void}\n       */\n\n\n      class_1.prototype.delete = function (key) {\n        var entries = this.__entries__;\n        var index = getIndex(entries, key);\n\n        if (~index) {\n          entries.splice(index, 1);\n        }\n      };\n      /**\n       * @param {*} key\n       * @returns {void}\n       */\n\n\n      class_1.prototype.has = function (key) {\n        return !!~getIndex(this.__entries__, key);\n      };\n      /**\n       * @returns {void}\n       */\n\n\n      class_1.prototype.clear = function () {\n        this.__entries__.splice(0);\n      };\n      /**\n       * @param {Function} callback\n       * @param {*} [ctx=null]\n       * @returns {void}\n       */\n\n\n      class_1.prototype.forEach = function (callback, ctx) {\n        if (ctx === void 0) {\n          ctx = null;\n        }\n\n        for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\n          var entry = _a[_i];\n          callback.call(ctx, entry[1], entry[0]);\n        }\n      };\n\n      return class_1;\n    }()\n  );\n}();\n/**\n * Detects whether window and document objects are available in current environment.\n */\n\n\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document; // Returns global object of a current environment.\n\nvar global$1 = function () {\n  if (typeof global !== 'undefined' && global.Math === Math) {\n    return global;\n  }\n\n  if (typeof self !== 'undefined' && self.Math === Math) {\n    return self;\n  }\n\n  if (typeof window !== 'undefined' && window.Math === Math) {\n    return window;\n  } // eslint-disable-next-line no-new-func\n\n\n  return Function('return this')();\n}();\n/**\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\n * first one is not supported.\n *\n * @returns {number} Requests' identifier.\n */\n\n\nvar requestAnimationFrame$1 = function () {\n  if (typeof requestAnimationFrame === 'function') {\n    // It's required to use a bounded function because IE sometimes throws\n    // an \"Invalid calling object\" error if rAF is invoked without the global\n    // object on the left hand side.\n    return requestAnimationFrame.bind(global$1);\n  }\n\n  return function (callback) {\n    return setTimeout(function () {\n      return callback(Date.now());\n    }, 1000 / 60);\n  };\n}(); // Defines minimum timeout before adding a trailing call.\n\n\nvar trailingTimeout = 2;\n/**\n * Creates a wrapper function which ensures that provided callback will be\n * invoked only once during the specified delay period.\n *\n * @param {Function} callback - Function to be invoked after the delay period.\n * @param {number} delay - Delay after which to invoke callback.\n * @returns {Function}\n */\n\nfunction throttle(callback, delay) {\n  var leadingCall = false,\n      trailingCall = false,\n      lastCallTime = 0;\n  /**\n   * Invokes the original callback function and schedules new invocation if\n   * the \"proxy\" was called during current request.\n   *\n   * @returns {void}\n   */\n\n  function resolvePending() {\n    if (leadingCall) {\n      leadingCall = false;\n      callback();\n    }\n\n    if (trailingCall) {\n      proxy();\n    }\n  }\n  /**\n   * Callback invoked after the specified delay. It will further postpone\n   * invocation of the original function delegating it to the\n   * requestAnimationFrame.\n   *\n   * @returns {void}\n   */\n\n\n  function timeoutCallback() {\n    requestAnimationFrame$1(resolvePending);\n  }\n  /**\n   * Schedules invocation of the original function.\n   *\n   * @returns {void}\n   */\n\n\n  function proxy() {\n    var timeStamp = Date.now();\n\n    if (leadingCall) {\n      // Reject immediately following calls.\n      if (timeStamp - lastCallTime < trailingTimeout) {\n        return;\n      } // Schedule new call to be in invoked when the pending one is resolved.\n      // This is important for \"transitions\" which never actually start\n      // immediately so there is a chance that we might miss one if change\n      // happens amids the pending invocation.\n\n\n      trailingCall = true;\n    } else {\n      leadingCall = true;\n      trailingCall = false;\n      setTimeout(timeoutCallback, delay);\n    }\n\n    lastCallTime = timeStamp;\n  }\n\n  return proxy;\n} // Minimum delay before invoking the update of observers.\n\n\nvar REFRESH_DELAY = 20; // A list of substrings of CSS properties used to find transition events that\n// might affect dimensions of observed elements.\n\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight']; // Check if MutationObserver is available.\n\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\n/**\n * Singleton controller class which handles updates of ResizeObserver instances.\n */\n\nvar ResizeObserverController =\n/** @class */\nfunction () {\n  /**\n   * Creates a new instance of ResizeObserverController.\n   *\n   * @private\n   */\n  function ResizeObserverController() {\n    /**\n     * Indicates whether DOM listeners have been added.\n     *\n     * @private {boolean}\n     */\n    this.connected_ = false;\n    /**\n     * Tells that controller has subscribed for Mutation Events.\n     *\n     * @private {boolean}\n     */\n\n    this.mutationEventsAdded_ = false;\n    /**\n     * Keeps reference to the instance of MutationObserver.\n     *\n     * @private {MutationObserver}\n     */\n\n    this.mutationsObserver_ = null;\n    /**\n     * A list of connected observers.\n     *\n     * @private {Array<ResizeObserverSPI>}\n     */\n\n    this.observers_ = [];\n    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\n    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\n  }\n  /**\n   * Adds observer to observers list.\n   *\n   * @param {ResizeObserverSPI} observer - Observer to be added.\n   * @returns {void}\n   */\n\n\n  ResizeObserverController.prototype.addObserver = function (observer) {\n    if (!~this.observers_.indexOf(observer)) {\n      this.observers_.push(observer);\n    } // Add listeners if they haven't been added yet.\n\n\n    if (!this.connected_) {\n      this.connect_();\n    }\n  };\n  /**\n   * Removes observer from observers list.\n   *\n   * @param {ResizeObserverSPI} observer - Observer to be removed.\n   * @returns {void}\n   */\n\n\n  ResizeObserverController.prototype.removeObserver = function (observer) {\n    var observers = this.observers_;\n    var index = observers.indexOf(observer); // Remove observer if it's present in registry.\n\n    if (~index) {\n      observers.splice(index, 1);\n    } // Remove listeners if controller has no connected observers.\n\n\n    if (!observers.length && this.connected_) {\n      this.disconnect_();\n    }\n  };\n  /**\n   * Invokes the update of observers. It will continue running updates insofar\n   * it detects changes.\n   *\n   * @returns {void}\n   */\n\n\n  ResizeObserverController.prototype.refresh = function () {\n    var changesDetected = this.updateObservers_(); // Continue running updates if changes have been detected as there might\n    // be future ones caused by CSS transitions.\n\n    if (changesDetected) {\n      this.refresh();\n    }\n  };\n  /**\n   * Updates every observer from observers list and notifies them of queued\n   * entries.\n   *\n   * @private\n   * @returns {boolean} Returns \"true\" if any observer has detected changes in\n   *      dimensions of it's elements.\n   */\n\n\n  ResizeObserverController.prototype.updateObservers_ = function () {\n    // Collect observers that have active observations.\n    var activeObservers = this.observers_.filter(function (observer) {\n      return observer.gatherActive(), observer.hasActive();\n    }); // Deliver notifications in a separate cycle in order to avoid any\n    // collisions between observers, e.g. when multiple instances of\n    // ResizeObserver are tracking the same element and the callback of one\n    // of them changes content dimensions of the observed target. Sometimes\n    // this may result in notifications being blocked for the rest of observers.\n\n    activeObservers.forEach(function (observer) {\n      return observer.broadcastActive();\n    });\n    return activeObservers.length > 0;\n  };\n  /**\n   * Initializes DOM listeners.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  ResizeObserverController.prototype.connect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already added.\n    if (!isBrowser || this.connected_) {\n      return;\n    } // Subscription to the \"Transitionend\" event is used as a workaround for\n    // delayed transitions. This way it's possible to capture at least the\n    // final state of an element.\n\n\n    document.addEventListener('transitionend', this.onTransitionEnd_);\n    window.addEventListener('resize', this.refresh);\n\n    if (mutationObserverSupported) {\n      this.mutationsObserver_ = new MutationObserver(this.refresh);\n      this.mutationsObserver_.observe(document, {\n        attributes: true,\n        childList: true,\n        characterData: true,\n        subtree: true\n      });\n    } else {\n      document.addEventListener('DOMSubtreeModified', this.refresh);\n      this.mutationEventsAdded_ = true;\n    }\n\n    this.connected_ = true;\n  };\n  /**\n   * Removes DOM listeners.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  ResizeObserverController.prototype.disconnect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already removed.\n    if (!isBrowser || !this.connected_) {\n      return;\n    }\n\n    document.removeEventListener('transitionend', this.onTransitionEnd_);\n    window.removeEventListener('resize', this.refresh);\n\n    if (this.mutationsObserver_) {\n      this.mutationsObserver_.disconnect();\n    }\n\n    if (this.mutationEventsAdded_) {\n      document.removeEventListener('DOMSubtreeModified', this.refresh);\n    }\n\n    this.mutationsObserver_ = null;\n    this.mutationEventsAdded_ = false;\n    this.connected_ = false;\n  };\n  /**\n   * \"Transitionend\" event handler.\n   *\n   * @private\n   * @param {TransitionEvent} event\n   * @returns {void}\n   */\n\n\n  ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\n    var _b = _a.propertyName,\n        propertyName = _b === void 0 ? '' : _b; // Detect whether transition may affect dimensions of an element.\n\n    var isReflowProperty = transitionKeys.some(function (key) {\n      return !!~propertyName.indexOf(key);\n    });\n\n    if (isReflowProperty) {\n      this.refresh();\n    }\n  };\n  /**\n   * Returns instance of the ResizeObserverController.\n   *\n   * @returns {ResizeObserverController}\n   */\n\n\n  ResizeObserverController.getInstance = function () {\n    if (!this.instance_) {\n      this.instance_ = new ResizeObserverController();\n    }\n\n    return this.instance_;\n  };\n  /**\n   * Holds reference to the controller's instance.\n   *\n   * @private {ResizeObserverController}\n   */\n\n\n  ResizeObserverController.instance_ = null;\n  return ResizeObserverController;\n}();\n/**\n * Defines non-writable/enumerable properties of the provided target object.\n *\n * @param {Object} target - Object for which to define properties.\n * @param {Object} props - Properties to be defined.\n * @returns {Object} Target object.\n */\n\n\nvar defineConfigurable = function defineConfigurable(target, props) {\n  for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\n    var key = _a[_i];\n    Object.defineProperty(target, key, {\n      value: props[key],\n      enumerable: false,\n      writable: false,\n      configurable: true\n    });\n  }\n\n  return target;\n};\n/**\n * Returns the global object associated with provided element.\n *\n * @param {Object} target\n * @returns {Object}\n */\n\n\nvar getWindowOf = function getWindowOf(target) {\n  // Assume that the element is an instance of Node, which means that it\n  // has the \"ownerDocument\" property from which we can retrieve a\n  // corresponding global object.\n  var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView; // Return the local global object if it's not possible extract one from\n  // provided element.\n\n  return ownerGlobal || global$1;\n}; // Placeholder of an empty content rectangle.\n\n\nvar emptyRect = createRectInit(0, 0, 0, 0);\n/**\n * Converts provided string to a number.\n *\n * @param {number|string} value\n * @returns {number}\n */\n\nfunction toFloat(value) {\n  return parseFloat(value) || 0;\n}\n/**\n * Extracts borders size from provided styles.\n *\n * @param {CSSStyleDeclaration} styles\n * @param {...string} positions - Borders positions (top, right, ...)\n * @returns {number}\n */\n\n\nfunction getBordersSize(styles) {\n  var positions = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    positions[_i - 1] = arguments[_i];\n  }\n\n  return positions.reduce(function (size, position) {\n    var value = styles['border-' + position + '-width'];\n    return size + toFloat(value);\n  }, 0);\n}\n/**\n * Extracts paddings sizes from provided styles.\n *\n * @param {CSSStyleDeclaration} styles\n * @returns {Object} Paddings box.\n */\n\n\nfunction getPaddings(styles) {\n  var positions = ['top', 'right', 'bottom', 'left'];\n  var paddings = {};\n\n  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\n    var position = positions_1[_i];\n    var value = styles['padding-' + position];\n    paddings[position] = toFloat(value);\n  }\n\n  return paddings;\n}\n/**\n * Calculates content rectangle of provided SVG element.\n *\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\n *      to be calculated.\n * @returns {DOMRectInit}\n */\n\n\nfunction getSVGContentRect(target) {\n  var bbox = target.getBBox();\n  return createRectInit(0, 0, bbox.width, bbox.height);\n}\n/**\n * Calculates content rectangle of provided HTMLElement.\n *\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\n * @returns {DOMRectInit}\n */\n\n\nfunction getHTMLElementContentRect(target) {\n  // Client width & height properties can't be\n  // used exclusively as they provide rounded values.\n  var clientWidth = target.clientWidth,\n      clientHeight = target.clientHeight; // By this condition we can catch all non-replaced inline, hidden and\n  // detached elements. Though elements with width & height properties less\n  // than 0.5 will be discarded as well.\n  //\n  // Without it we would need to implement separate methods for each of\n  // those cases and it's not possible to perform a precise and performance\n  // effective test for hidden elements. E.g. even jQuery's ':visible' filter\n  // gives wrong results for elements with width & height less than 0.5.\n\n  if (!clientWidth && !clientHeight) {\n    return emptyRect;\n  }\n\n  var styles = getWindowOf(target).getComputedStyle(target);\n  var paddings = getPaddings(styles);\n  var horizPad = paddings.left + paddings.right;\n  var vertPad = paddings.top + paddings.bottom; // Computed styles of width & height are being used because they are the\n  // only dimensions available to JS that contain non-rounded values. It could\n  // be possible to utilize the getBoundingClientRect if only it's data wasn't\n  // affected by CSS transformations let alone paddings, borders and scroll bars.\n\n  var width = toFloat(styles.width),\n      height = toFloat(styles.height); // Width & height include paddings and borders when the 'border-box' box\n  // model is applied (except for IE).\n\n  if (styles.boxSizing === 'border-box') {\n    // Following conditions are required to handle Internet Explorer which\n    // doesn't include paddings and borders to computed CSS dimensions.\n    //\n    // We can say that if CSS dimensions + paddings are equal to the \"client\"\n    // properties then it's either IE, and thus we don't need to subtract\n    // anything, or an element merely doesn't have paddings/borders styles.\n    if (Math.round(width + horizPad) !== clientWidth) {\n      width -= getBordersSize(styles, 'left', 'right') + horizPad;\n    }\n\n    if (Math.round(height + vertPad) !== clientHeight) {\n      height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\n    }\n  } // Following steps can't be applied to the document's root element as its\n  // client[Width/Height] properties represent viewport area of the window.\n  // Besides, it's as well not necessary as the <html> itself neither has\n  // rendered scroll bars nor it can be clipped.\n\n\n  if (!isDocumentElement(target)) {\n    // In some browsers (only in Firefox, actually) CSS width & height\n    // include scroll bars size which can be removed at this step as scroll\n    // bars are the only difference between rounded dimensions + paddings\n    // and \"client\" properties, though that is not always true in Chrome.\n    var vertScrollbar = Math.round(width + horizPad) - clientWidth;\n    var horizScrollbar = Math.round(height + vertPad) - clientHeight; // Chrome has a rather weird rounding of \"client\" properties.\n    // E.g. for an element with content width of 314.2px it sometimes gives\n    // the client width of 315px and for the width of 314.7px it may give\n    // 314px. And it doesn't happen all the time. So just ignore this delta\n    // as a non-relevant.\n\n    if (Math.abs(vertScrollbar) !== 1) {\n      width -= vertScrollbar;\n    }\n\n    if (Math.abs(horizScrollbar) !== 1) {\n      height -= horizScrollbar;\n    }\n  }\n\n  return createRectInit(paddings.left, paddings.top, width, height);\n}\n/**\n * Checks whether provided element is an instance of the SVGGraphicsElement.\n *\n * @param {Element} target - Element to be checked.\n * @returns {boolean}\n */\n\n\nvar isSVGGraphicsElement = function () {\n  // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\n  // interface.\n  if (typeof SVGGraphicsElement !== 'undefined') {\n    return function (target) {\n      return target instanceof getWindowOf(target).SVGGraphicsElement;\n    };\n  } // If it's so, then check that element is at least an instance of the\n  // SVGElement and that it has the \"getBBox\" method.\n  // eslint-disable-next-line no-extra-parens\n\n\n  return function (target) {\n    return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';\n  };\n}();\n/**\n * Checks whether provided element is a document element (<html>).\n *\n * @param {Element} target - Element to be checked.\n * @returns {boolean}\n */\n\n\nfunction isDocumentElement(target) {\n  return target === getWindowOf(target).document.documentElement;\n}\n/**\n * Calculates an appropriate content rectangle for provided html or svg element.\n *\n * @param {Element} target - Element content rectangle of which needs to be calculated.\n * @returns {DOMRectInit}\n */\n\n\nfunction getContentRect(target) {\n  if (!isBrowser) {\n    return emptyRect;\n  }\n\n  if (isSVGGraphicsElement(target)) {\n    return getSVGContentRect(target);\n  }\n\n  return getHTMLElementContentRect(target);\n}\n/**\n * Creates rectangle with an interface of the DOMRectReadOnly.\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\n *\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\n * @returns {DOMRectReadOnly}\n */\n\n\nfunction createReadOnlyRect(_a) {\n  var x = _a.x,\n      y = _a.y,\n      width = _a.width,\n      height = _a.height; // If DOMRectReadOnly is available use it as a prototype for the rectangle.\n\n  var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\n  var rect = Object.create(Constr.prototype); // Rectangle's properties are not writable and non-enumerable.\n\n  defineConfigurable(rect, {\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    top: y,\n    right: x + width,\n    bottom: height + y,\n    left: x\n  });\n  return rect;\n}\n/**\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\n *\n * @param {number} x - X coordinate.\n * @param {number} y - Y coordinate.\n * @param {number} width - Rectangle's width.\n * @param {number} height - Rectangle's height.\n * @returns {DOMRectInit}\n */\n\n\nfunction createRectInit(x, y, width, height) {\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n}\n/**\n * Class that is responsible for computations of the content rectangle of\n * provided DOM element and for keeping track of it's changes.\n */\n\n\nvar ResizeObservation =\n/** @class */\nfunction () {\n  /**\n   * Creates an instance of ResizeObservation.\n   *\n   * @param {Element} target - Element to be observed.\n   */\n  function ResizeObservation(target) {\n    /**\n     * Broadcasted width of content rectangle.\n     *\n     * @type {number}\n     */\n    this.broadcastWidth = 0;\n    /**\n     * Broadcasted height of content rectangle.\n     *\n     * @type {number}\n     */\n\n    this.broadcastHeight = 0;\n    /**\n     * Reference to the last observed content rectangle.\n     *\n     * @private {DOMRectInit}\n     */\n\n    this.contentRect_ = createRectInit(0, 0, 0, 0);\n    this.target = target;\n  }\n  /**\n   * Updates content rectangle and tells whether it's width or height properties\n   * have changed since the last broadcast.\n   *\n   * @returns {boolean}\n   */\n\n\n  ResizeObservation.prototype.isActive = function () {\n    var rect = getContentRect(this.target);\n    this.contentRect_ = rect;\n    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;\n  };\n  /**\n   * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\n   * from the corresponding properties of the last observed content rectangle.\n   *\n   * @returns {DOMRectInit} Last observed content rectangle.\n   */\n\n\n  ResizeObservation.prototype.broadcastRect = function () {\n    var rect = this.contentRect_;\n    this.broadcastWidth = rect.width;\n    this.broadcastHeight = rect.height;\n    return rect;\n  };\n\n  return ResizeObservation;\n}();\n\nvar ResizeObserverEntry =\n/** @class */\nfunction () {\n  /**\n   * Creates an instance of ResizeObserverEntry.\n   *\n   * @param {Element} target - Element that is being observed.\n   * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\n   */\n  function ResizeObserverEntry(target, rectInit) {\n    var contentRect = createReadOnlyRect(rectInit); // According to the specification following properties are not writable\n    // and are also not enumerable in the native implementation.\n    //\n    // Property accessors are not being used as they'd require to define a\n    // private WeakMap storage which may cause memory leaks in browsers that\n    // don't support this type of collections.\n\n    defineConfigurable(this, {\n      target: target,\n      contentRect: contentRect\n    });\n  }\n\n  return ResizeObserverEntry;\n}();\n\nvar ResizeObserverSPI =\n/** @class */\nfunction () {\n  /**\n   * Creates a new instance of ResizeObserver.\n   *\n   * @param {ResizeObserverCallback} callback - Callback function that is invoked\n   *      when one of the observed elements changes it's content dimensions.\n   * @param {ResizeObserverController} controller - Controller instance which\n   *      is responsible for the updates of observer.\n   * @param {ResizeObserver} callbackCtx - Reference to the public\n   *      ResizeObserver instance which will be passed to callback function.\n   */\n  function ResizeObserverSPI(callback, controller, callbackCtx) {\n    /**\n     * Collection of resize observations that have detected changes in dimensions\n     * of elements.\n     *\n     * @private {Array<ResizeObservation>}\n     */\n    this.activeObservations_ = [];\n    /**\n     * Registry of the ResizeObservation instances.\n     *\n     * @private {Map<Element, ResizeObservation>}\n     */\n\n    this.observations_ = new MapShim();\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('The callback provided as parameter 1 is not a function.');\n    }\n\n    this.callback_ = callback;\n    this.controller_ = controller;\n    this.callbackCtx_ = callbackCtx;\n  }\n  /**\n   * Starts observing provided element.\n   *\n   * @param {Element} target - Element to be observed.\n   * @returns {void}\n   */\n\n\n  ResizeObserverSPI.prototype.observe = function (target) {\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    } // Do nothing if current environment doesn't have the Element interface.\n\n\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n      return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n      throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_; // Do nothing if element is already being observed.\n\n    if (observations.has(target)) {\n      return;\n    }\n\n    observations.set(target, new ResizeObservation(target));\n    this.controller_.addObserver(this); // Force the update of observations.\n\n    this.controller_.refresh();\n  };\n  /**\n   * Stops observing provided element.\n   *\n   * @param {Element} target - Element to stop observing.\n   * @returns {void}\n   */\n\n\n  ResizeObserverSPI.prototype.unobserve = function (target) {\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    } // Do nothing if current environment doesn't have the Element interface.\n\n\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n      return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n      throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_; // Do nothing if element is not being observed.\n\n    if (!observations.has(target)) {\n      return;\n    }\n\n    observations.delete(target);\n\n    if (!observations.size) {\n      this.controller_.removeObserver(this);\n    }\n  };\n  /**\n   * Stops observing all elements.\n   *\n   * @returns {void}\n   */\n\n\n  ResizeObserverSPI.prototype.disconnect = function () {\n    this.clearActive();\n    this.observations_.clear();\n    this.controller_.removeObserver(this);\n  };\n  /**\n   * Collects observation instances the associated element of which has changed\n   * it's content rectangle.\n   *\n   * @returns {void}\n   */\n\n\n  ResizeObserverSPI.prototype.gatherActive = function () {\n    var _this = this;\n\n    this.clearActive();\n    this.observations_.forEach(function (observation) {\n      if (observation.isActive()) {\n        _this.activeObservations_.push(observation);\n      }\n    });\n  };\n  /**\n   * Invokes initial callback function with a list of ResizeObserverEntry\n   * instances collected from active resize observations.\n   *\n   * @returns {void}\n   */\n\n\n  ResizeObserverSPI.prototype.broadcastActive = function () {\n    // Do nothing if observer doesn't have active observations.\n    if (!this.hasActive()) {\n      return;\n    }\n\n    var ctx = this.callbackCtx_; // Create ResizeObserverEntry instance for every active observation.\n\n    var entries = this.activeObservations_.map(function (observation) {\n      return new ResizeObserverEntry(observation.target, observation.broadcastRect());\n    });\n    this.callback_.call(ctx, entries, ctx);\n    this.clearActive();\n  };\n  /**\n   * Clears the collection of active observations.\n   *\n   * @returns {void}\n   */\n\n\n  ResizeObserverSPI.prototype.clearActive = function () {\n    this.activeObservations_.splice(0);\n  };\n  /**\n   * Tells whether observer has active observations.\n   *\n   * @returns {boolean}\n   */\n\n\n  ResizeObserverSPI.prototype.hasActive = function () {\n    return this.activeObservations_.length > 0;\n  };\n\n  return ResizeObserverSPI;\n}(); // Registry of internal observers. If WeakMap is not available use current shim\n// for the Map collection as it has all required methods and because WeakMap\n// can't be fully polyfilled anyway.\n\n\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\n/**\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\n * exposing only those methods and properties that are defined in the spec.\n */\n\nvar ResizeObserver =\n/** @class */\nfunction () {\n  /**\n   * Creates a new instance of ResizeObserver.\n   *\n   * @param {ResizeObserverCallback} callback - Callback that is invoked when\n   *      dimensions of the observed elements change.\n   */\n  function ResizeObserver(callback) {\n    if (!(this instanceof ResizeObserver)) {\n      throw new TypeError('Cannot call a class as a function.');\n    }\n\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    }\n\n    var controller = ResizeObserverController.getInstance();\n    var observer = new ResizeObserverSPI(callback, controller, this);\n    observers.set(this, observer);\n  }\n\n  return ResizeObserver;\n}(); // Expose public methods of ResizeObserver.\n\n\n['observe', 'unobserve', 'disconnect'].forEach(function (method) {\n  ResizeObserver.prototype[method] = function () {\n    var _a;\n\n    return (_a = observers.get(this))[method].apply(_a, arguments);\n  };\n});\n\nvar index = function () {\n  // Export existing implementation if available.\n  if (typeof global$1.ResizeObserver !== 'undefined') {\n    return global$1.ResizeObserver;\n  }\n\n  return ResizeObserver;\n}();\n\nexport default index;","map":{"version":3,"sources":["/Users/yan/Documents/proj/ML4GIS/client/node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js"],"names":["MapShim","Map","getIndex","arr","key","result","some","entry","index","class_1","__entries__","Object","defineProperty","prototype","get","length","enumerable","configurable","set","value","push","delete","entries","splice","has","clear","forEach","callback","ctx","_i","_a","call","isBrowser","window","document","global$1","global","Math","self","Function","requestAnimationFrame$1","requestAnimationFrame","bind","setTimeout","Date","now","trailingTimeout","throttle","delay","leadingCall","trailingCall","lastCallTime","resolvePending","proxy","timeoutCallback","timeStamp","REFRESH_DELAY","transitionKeys","mutationObserverSupported","MutationObserver","ResizeObserverController","connected_","mutationEventsAdded_","mutationsObserver_","observers_","onTransitionEnd_","refresh","addObserver","observer","indexOf","connect_","removeObserver","observers","disconnect_","changesDetected","updateObservers_","activeObservers","filter","gatherActive","hasActive","broadcastActive","addEventListener","observe","attributes","childList","characterData","subtree","removeEventListener","disconnect","_b","propertyName","isReflowProperty","getInstance","instance_","defineConfigurable","target","props","keys","writable","getWindowOf","ownerGlobal","ownerDocument","defaultView","emptyRect","createRectInit","toFloat","parseFloat","getBordersSize","styles","positions","arguments","reduce","size","position","getPaddings","paddings","positions_1","getSVGContentRect","bbox","getBBox","width","height","getHTMLElementContentRect","clientWidth","clientHeight","getComputedStyle","horizPad","left","right","vertPad","top","bottom","boxSizing","round","isDocumentElement","vertScrollbar","horizScrollbar","abs","isSVGGraphicsElement","SVGGraphicsElement","SVGElement","documentElement","getContentRect","createReadOnlyRect","x","y","Constr","DOMRectReadOnly","rect","create","ResizeObservation","broadcastWidth","broadcastHeight","contentRect_","isActive","broadcastRect","ResizeObserverEntry","rectInit","contentRect","ResizeObserverSPI","controller","callbackCtx","activeObservations_","observations_","TypeError","callback_","controller_","callbackCtx_","Element","observations","unobserve","clearActive","_this","observation","map","WeakMap","ResizeObserver","method","apply"],"mappings":"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","sourcesContent":["/**\n * A collection of shims that provide minimal functionality of the ES6 collections.\n *\n * These implementations are not meant to be used outside of the ResizeObserver\n * modules as they cover only a limited range of use cases.\n */\n/* eslint-disable require-jsdoc, valid-jsdoc */\nvar MapShim = (function () {\n    if (typeof Map !== 'undefined') {\n        return Map;\n    }\n    /**\n     * Returns index in provided array that matches the specified key.\n     *\n     * @param {Array<Array>} arr\n     * @param {*} key\n     * @returns {number}\n     */\n    function getIndex(arr, key) {\n        var result = -1;\n        arr.some(function (entry, index) {\n            if (entry[0] === key) {\n                result = index;\n                return true;\n            }\n            return false;\n        });\n        return result;\n    }\n    return /** @class */ (function () {\n        function class_1() {\n            this.__entries__ = [];\n        }\n        Object.defineProperty(class_1.prototype, \"size\", {\n            /**\n             * @returns {boolean}\n             */\n            get: function () {\n                return this.__entries__.length;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {*} key\n         * @returns {*}\n         */\n        class_1.prototype.get = function (key) {\n            var index = getIndex(this.__entries__, key);\n            var entry = this.__entries__[index];\n            return entry && entry[1];\n        };\n        /**\n         * @param {*} key\n         * @param {*} value\n         * @returns {void}\n         */\n        class_1.prototype.set = function (key, value) {\n            var index = getIndex(this.__entries__, key);\n            if (~index) {\n                this.__entries__[index][1] = value;\n            }\n            else {\n                this.__entries__.push([key, value]);\n            }\n        };\n        /**\n         * @param {*} key\n         * @returns {void}\n         */\n        class_1.prototype.delete = function (key) {\n            var entries = this.__entries__;\n            var index = getIndex(entries, key);\n            if (~index) {\n                entries.splice(index, 1);\n            }\n        };\n        /**\n         * @param {*} key\n         * @returns {void}\n         */\n        class_1.prototype.has = function (key) {\n            return !!~getIndex(this.__entries__, key);\n        };\n        /**\n         * @returns {void}\n         */\n        class_1.prototype.clear = function () {\n            this.__entries__.splice(0);\n        };\n        /**\n         * @param {Function} callback\n         * @param {*} [ctx=null]\n         * @returns {void}\n         */\n        class_1.prototype.forEach = function (callback, ctx) {\n            if (ctx === void 0) { ctx = null; }\n            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\n                var entry = _a[_i];\n                callback.call(ctx, entry[1], entry[0]);\n            }\n        };\n        return class_1;\n    }());\n})();\n\n/**\n * Detects whether window and document objects are available in current environment.\n */\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\n\n// Returns global object of a current environment.\nvar global$1 = (function () {\n    if (typeof global !== 'undefined' && global.Math === Math) {\n        return global;\n    }\n    if (typeof self !== 'undefined' && self.Math === Math) {\n        return self;\n    }\n    if (typeof window !== 'undefined' && window.Math === Math) {\n        return window;\n    }\n    // eslint-disable-next-line no-new-func\n    return Function('return this')();\n})();\n\n/**\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\n * first one is not supported.\n *\n * @returns {number} Requests' identifier.\n */\nvar requestAnimationFrame$1 = (function () {\n    if (typeof requestAnimationFrame === 'function') {\n        // It's required to use a bounded function because IE sometimes throws\n        // an \"Invalid calling object\" error if rAF is invoked without the global\n        // object on the left hand side.\n        return requestAnimationFrame.bind(global$1);\n    }\n    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\n})();\n\n// Defines minimum timeout before adding a trailing call.\nvar trailingTimeout = 2;\n/**\n * Creates a wrapper function which ensures that provided callback will be\n * invoked only once during the specified delay period.\n *\n * @param {Function} callback - Function to be invoked after the delay period.\n * @param {number} delay - Delay after which to invoke callback.\n * @returns {Function}\n */\nfunction throttle (callback, delay) {\n    var leadingCall = false, trailingCall = false, lastCallTime = 0;\n    /**\n     * Invokes the original callback function and schedules new invocation if\n     * the \"proxy\" was called during current request.\n     *\n     * @returns {void}\n     */\n    function resolvePending() {\n        if (leadingCall) {\n            leadingCall = false;\n            callback();\n        }\n        if (trailingCall) {\n            proxy();\n        }\n    }\n    /**\n     * Callback invoked after the specified delay. It will further postpone\n     * invocation of the original function delegating it to the\n     * requestAnimationFrame.\n     *\n     * @returns {void}\n     */\n    function timeoutCallback() {\n        requestAnimationFrame$1(resolvePending);\n    }\n    /**\n     * Schedules invocation of the original function.\n     *\n     * @returns {void}\n     */\n    function proxy() {\n        var timeStamp = Date.now();\n        if (leadingCall) {\n            // Reject immediately following calls.\n            if (timeStamp - lastCallTime < trailingTimeout) {\n                return;\n            }\n            // Schedule new call to be in invoked when the pending one is resolved.\n            // This is important for \"transitions\" which never actually start\n            // immediately so there is a chance that we might miss one if change\n            // happens amids the pending invocation.\n            trailingCall = true;\n        }\n        else {\n            leadingCall = true;\n            trailingCall = false;\n            setTimeout(timeoutCallback, delay);\n        }\n        lastCallTime = timeStamp;\n    }\n    return proxy;\n}\n\n// Minimum delay before invoking the update of observers.\nvar REFRESH_DELAY = 20;\n// A list of substrings of CSS properties used to find transition events that\n// might affect dimensions of observed elements.\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\n// Check if MutationObserver is available.\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\n/**\n * Singleton controller class which handles updates of ResizeObserver instances.\n */\nvar ResizeObserverController = /** @class */ (function () {\n    /**\n     * Creates a new instance of ResizeObserverController.\n     *\n     * @private\n     */\n    function ResizeObserverController() {\n        /**\n         * Indicates whether DOM listeners have been added.\n         *\n         * @private {boolean}\n         */\n        this.connected_ = false;\n        /**\n         * Tells that controller has subscribed for Mutation Events.\n         *\n         * @private {boolean}\n         */\n        this.mutationEventsAdded_ = false;\n        /**\n         * Keeps reference to the instance of MutationObserver.\n         *\n         * @private {MutationObserver}\n         */\n        this.mutationsObserver_ = null;\n        /**\n         * A list of connected observers.\n         *\n         * @private {Array<ResizeObserverSPI>}\n         */\n        this.observers_ = [];\n        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\n        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\n    }\n    /**\n     * Adds observer to observers list.\n     *\n     * @param {ResizeObserverSPI} observer - Observer to be added.\n     * @returns {void}\n     */\n    ResizeObserverController.prototype.addObserver = function (observer) {\n        if (!~this.observers_.indexOf(observer)) {\n            this.observers_.push(observer);\n        }\n        // Add listeners if they haven't been added yet.\n        if (!this.connected_) {\n            this.connect_();\n        }\n    };\n    /**\n     * Removes observer from observers list.\n     *\n     * @param {ResizeObserverSPI} observer - Observer to be removed.\n     * @returns {void}\n     */\n    ResizeObserverController.prototype.removeObserver = function (observer) {\n        var observers = this.observers_;\n        var index = observers.indexOf(observer);\n        // Remove observer if it's present in registry.\n        if (~index) {\n            observers.splice(index, 1);\n        }\n        // Remove listeners if controller has no connected observers.\n        if (!observers.length && this.connected_) {\n            this.disconnect_();\n        }\n    };\n    /**\n     * Invokes the update of observers. It will continue running updates insofar\n     * it detects changes.\n     *\n     * @returns {void}\n     */\n    ResizeObserverController.prototype.refresh = function () {\n        var changesDetected = this.updateObservers_();\n        // Continue running updates if changes have been detected as there might\n        // be future ones caused by CSS transitions.\n        if (changesDetected) {\n            this.refresh();\n        }\n    };\n    /**\n     * Updates every observer from observers list and notifies them of queued\n     * entries.\n     *\n     * @private\n     * @returns {boolean} Returns \"true\" if any observer has detected changes in\n     *      dimensions of it's elements.\n     */\n    ResizeObserverController.prototype.updateObservers_ = function () {\n        // Collect observers that have active observations.\n        var activeObservers = this.observers_.filter(function (observer) {\n            return observer.gatherActive(), observer.hasActive();\n        });\n        // Deliver notifications in a separate cycle in order to avoid any\n        // collisions between observers, e.g. when multiple instances of\n        // ResizeObserver are tracking the same element and the callback of one\n        // of them changes content dimensions of the observed target. Sometimes\n        // this may result in notifications being blocked for the rest of observers.\n        activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\n        return activeObservers.length > 0;\n    };\n    /**\n     * Initializes DOM listeners.\n     *\n     * @private\n     * @returns {void}\n     */\n    ResizeObserverController.prototype.connect_ = function () {\n        // Do nothing if running in a non-browser environment or if listeners\n        // have been already added.\n        if (!isBrowser || this.connected_) {\n            return;\n        }\n        // Subscription to the \"Transitionend\" event is used as a workaround for\n        // delayed transitions. This way it's possible to capture at least the\n        // final state of an element.\n        document.addEventListener('transitionend', this.onTransitionEnd_);\n        window.addEventListener('resize', this.refresh);\n        if (mutationObserverSupported) {\n            this.mutationsObserver_ = new MutationObserver(this.refresh);\n            this.mutationsObserver_.observe(document, {\n                attributes: true,\n                childList: true,\n                characterData: true,\n                subtree: true\n            });\n        }\n        else {\n            document.addEventListener('DOMSubtreeModified', this.refresh);\n            this.mutationEventsAdded_ = true;\n        }\n        this.connected_ = true;\n    };\n    /**\n     * Removes DOM listeners.\n     *\n     * @private\n     * @returns {void}\n     */\n    ResizeObserverController.prototype.disconnect_ = function () {\n        // Do nothing if running in a non-browser environment or if listeners\n        // have been already removed.\n        if (!isBrowser || !this.connected_) {\n            return;\n        }\n        document.removeEventListener('transitionend', this.onTransitionEnd_);\n        window.removeEventListener('resize', this.refresh);\n        if (this.mutationsObserver_) {\n            this.mutationsObserver_.disconnect();\n        }\n        if (this.mutationEventsAdded_) {\n            document.removeEventListener('DOMSubtreeModified', this.refresh);\n        }\n        this.mutationsObserver_ = null;\n        this.mutationEventsAdded_ = false;\n        this.connected_ = false;\n    };\n    /**\n     * \"Transitionend\" event handler.\n     *\n     * @private\n     * @param {TransitionEvent} event\n     * @returns {void}\n     */\n    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\n        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;\n        // Detect whether transition may affect dimensions of an element.\n        var isReflowProperty = transitionKeys.some(function (key) {\n            return !!~propertyName.indexOf(key);\n        });\n        if (isReflowProperty) {\n            this.refresh();\n        }\n    };\n    /**\n     * Returns instance of the ResizeObserverController.\n     *\n     * @returns {ResizeObserverController}\n     */\n    ResizeObserverController.getInstance = function () {\n        if (!this.instance_) {\n            this.instance_ = new ResizeObserverController();\n        }\n        return this.instance_;\n    };\n    /**\n     * Holds reference to the controller's instance.\n     *\n     * @private {ResizeObserverController}\n     */\n    ResizeObserverController.instance_ = null;\n    return ResizeObserverController;\n}());\n\n/**\n * Defines non-writable/enumerable properties of the provided target object.\n *\n * @param {Object} target - Object for which to define properties.\n * @param {Object} props - Properties to be defined.\n * @returns {Object} Target object.\n */\nvar defineConfigurable = (function (target, props) {\n    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\n        var key = _a[_i];\n        Object.defineProperty(target, key, {\n            value: props[key],\n            enumerable: false,\n            writable: false,\n            configurable: true\n        });\n    }\n    return target;\n});\n\n/**\n * Returns the global object associated with provided element.\n *\n * @param {Object} target\n * @returns {Object}\n */\nvar getWindowOf = (function (target) {\n    // Assume that the element is an instance of Node, which means that it\n    // has the \"ownerDocument\" property from which we can retrieve a\n    // corresponding global object.\n    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\n    // Return the local global object if it's not possible extract one from\n    // provided element.\n    return ownerGlobal || global$1;\n});\n\n// Placeholder of an empty content rectangle.\nvar emptyRect = createRectInit(0, 0, 0, 0);\n/**\n * Converts provided string to a number.\n *\n * @param {number|string} value\n * @returns {number}\n */\nfunction toFloat(value) {\n    return parseFloat(value) || 0;\n}\n/**\n * Extracts borders size from provided styles.\n *\n * @param {CSSStyleDeclaration} styles\n * @param {...string} positions - Borders positions (top, right, ...)\n * @returns {number}\n */\nfunction getBordersSize(styles) {\n    var positions = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        positions[_i - 1] = arguments[_i];\n    }\n    return positions.reduce(function (size, position) {\n        var value = styles['border-' + position + '-width'];\n        return size + toFloat(value);\n    }, 0);\n}\n/**\n * Extracts paddings sizes from provided styles.\n *\n * @param {CSSStyleDeclaration} styles\n * @returns {Object} Paddings box.\n */\nfunction getPaddings(styles) {\n    var positions = ['top', 'right', 'bottom', 'left'];\n    var paddings = {};\n    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\n        var position = positions_1[_i];\n        var value = styles['padding-' + position];\n        paddings[position] = toFloat(value);\n    }\n    return paddings;\n}\n/**\n * Calculates content rectangle of provided SVG element.\n *\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\n *      to be calculated.\n * @returns {DOMRectInit}\n */\nfunction getSVGContentRect(target) {\n    var bbox = target.getBBox();\n    return createRectInit(0, 0, bbox.width, bbox.height);\n}\n/**\n * Calculates content rectangle of provided HTMLElement.\n *\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\n * @returns {DOMRectInit}\n */\nfunction getHTMLElementContentRect(target) {\n    // Client width & height properties can't be\n    // used exclusively as they provide rounded values.\n    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;\n    // By this condition we can catch all non-replaced inline, hidden and\n    // detached elements. Though elements with width & height properties less\n    // than 0.5 will be discarded as well.\n    //\n    // Without it we would need to implement separate methods for each of\n    // those cases and it's not possible to perform a precise and performance\n    // effective test for hidden elements. E.g. even jQuery's ':visible' filter\n    // gives wrong results for elements with width & height less than 0.5.\n    if (!clientWidth && !clientHeight) {\n        return emptyRect;\n    }\n    var styles = getWindowOf(target).getComputedStyle(target);\n    var paddings = getPaddings(styles);\n    var horizPad = paddings.left + paddings.right;\n    var vertPad = paddings.top + paddings.bottom;\n    // Computed styles of width & height are being used because they are the\n    // only dimensions available to JS that contain non-rounded values. It could\n    // be possible to utilize the getBoundingClientRect if only it's data wasn't\n    // affected by CSS transformations let alone paddings, borders and scroll bars.\n    var width = toFloat(styles.width), height = toFloat(styles.height);\n    // Width & height include paddings and borders when the 'border-box' box\n    // model is applied (except for IE).\n    if (styles.boxSizing === 'border-box') {\n        // Following conditions are required to handle Internet Explorer which\n        // doesn't include paddings and borders to computed CSS dimensions.\n        //\n        // We can say that if CSS dimensions + paddings are equal to the \"client\"\n        // properties then it's either IE, and thus we don't need to subtract\n        // anything, or an element merely doesn't have paddings/borders styles.\n        if (Math.round(width + horizPad) !== clientWidth) {\n            width -= getBordersSize(styles, 'left', 'right') + horizPad;\n        }\n        if (Math.round(height + vertPad) !== clientHeight) {\n            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\n        }\n    }\n    // Following steps can't be applied to the document's root element as its\n    // client[Width/Height] properties represent viewport area of the window.\n    // Besides, it's as well not necessary as the <html> itself neither has\n    // rendered scroll bars nor it can be clipped.\n    if (!isDocumentElement(target)) {\n        // In some browsers (only in Firefox, actually) CSS width & height\n        // include scroll bars size which can be removed at this step as scroll\n        // bars are the only difference between rounded dimensions + paddings\n        // and \"client\" properties, though that is not always true in Chrome.\n        var vertScrollbar = Math.round(width + horizPad) - clientWidth;\n        var horizScrollbar = Math.round(height + vertPad) - clientHeight;\n        // Chrome has a rather weird rounding of \"client\" properties.\n        // E.g. for an element with content width of 314.2px it sometimes gives\n        // the client width of 315px and for the width of 314.7px it may give\n        // 314px. And it doesn't happen all the time. So just ignore this delta\n        // as a non-relevant.\n        if (Math.abs(vertScrollbar) !== 1) {\n            width -= vertScrollbar;\n        }\n        if (Math.abs(horizScrollbar) !== 1) {\n            height -= horizScrollbar;\n        }\n    }\n    return createRectInit(paddings.left, paddings.top, width, height);\n}\n/**\n * Checks whether provided element is an instance of the SVGGraphicsElement.\n *\n * @param {Element} target - Element to be checked.\n * @returns {boolean}\n */\nvar isSVGGraphicsElement = (function () {\n    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\n    // interface.\n    if (typeof SVGGraphicsElement !== 'undefined') {\n        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\n    }\n    // If it's so, then check that element is at least an instance of the\n    // SVGElement and that it has the \"getBBox\" method.\n    // eslint-disable-next-line no-extra-parens\n    return function (target) { return (target instanceof getWindowOf(target).SVGElement &&\n        typeof target.getBBox === 'function'); };\n})();\n/**\n * Checks whether provided element is a document element (<html>).\n *\n * @param {Element} target - Element to be checked.\n * @returns {boolean}\n */\nfunction isDocumentElement(target) {\n    return target === getWindowOf(target).document.documentElement;\n}\n/**\n * Calculates an appropriate content rectangle for provided html or svg element.\n *\n * @param {Element} target - Element content rectangle of which needs to be calculated.\n * @returns {DOMRectInit}\n */\nfunction getContentRect(target) {\n    if (!isBrowser) {\n        return emptyRect;\n    }\n    if (isSVGGraphicsElement(target)) {\n        return getSVGContentRect(target);\n    }\n    return getHTMLElementContentRect(target);\n}\n/**\n * Creates rectangle with an interface of the DOMRectReadOnly.\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\n *\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\n * @returns {DOMRectReadOnly}\n */\nfunction createReadOnlyRect(_a) {\n    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;\n    // If DOMRectReadOnly is available use it as a prototype for the rectangle.\n    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\n    var rect = Object.create(Constr.prototype);\n    // Rectangle's properties are not writable and non-enumerable.\n    defineConfigurable(rect, {\n        x: x, y: y, width: width, height: height,\n        top: y,\n        right: x + width,\n        bottom: height + y,\n        left: x\n    });\n    return rect;\n}\n/**\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\n *\n * @param {number} x - X coordinate.\n * @param {number} y - Y coordinate.\n * @param {number} width - Rectangle's width.\n * @param {number} height - Rectangle's height.\n * @returns {DOMRectInit}\n */\nfunction createRectInit(x, y, width, height) {\n    return { x: x, y: y, width: width, height: height };\n}\n\n/**\n * Class that is responsible for computations of the content rectangle of\n * provided DOM element and for keeping track of it's changes.\n */\nvar ResizeObservation = /** @class */ (function () {\n    /**\n     * Creates an instance of ResizeObservation.\n     *\n     * @param {Element} target - Element to be observed.\n     */\n    function ResizeObservation(target) {\n        /**\n         * Broadcasted width of content rectangle.\n         *\n         * @type {number}\n         */\n        this.broadcastWidth = 0;\n        /**\n         * Broadcasted height of content rectangle.\n         *\n         * @type {number}\n         */\n        this.broadcastHeight = 0;\n        /**\n         * Reference to the last observed content rectangle.\n         *\n         * @private {DOMRectInit}\n         */\n        this.contentRect_ = createRectInit(0, 0, 0, 0);\n        this.target = target;\n    }\n    /**\n     * Updates content rectangle and tells whether it's width or height properties\n     * have changed since the last broadcast.\n     *\n     * @returns {boolean}\n     */\n    ResizeObservation.prototype.isActive = function () {\n        var rect = getContentRect(this.target);\n        this.contentRect_ = rect;\n        return (rect.width !== this.broadcastWidth ||\n            rect.height !== this.broadcastHeight);\n    };\n    /**\n     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\n     * from the corresponding properties of the last observed content rectangle.\n     *\n     * @returns {DOMRectInit} Last observed content rectangle.\n     */\n    ResizeObservation.prototype.broadcastRect = function () {\n        var rect = this.contentRect_;\n        this.broadcastWidth = rect.width;\n        this.broadcastHeight = rect.height;\n        return rect;\n    };\n    return ResizeObservation;\n}());\n\nvar ResizeObserverEntry = /** @class */ (function () {\n    /**\n     * Creates an instance of ResizeObserverEntry.\n     *\n     * @param {Element} target - Element that is being observed.\n     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\n     */\n    function ResizeObserverEntry(target, rectInit) {\n        var contentRect = createReadOnlyRect(rectInit);\n        // According to the specification following properties are not writable\n        // and are also not enumerable in the native implementation.\n        //\n        // Property accessors are not being used as they'd require to define a\n        // private WeakMap storage which may cause memory leaks in browsers that\n        // don't support this type of collections.\n        defineConfigurable(this, { target: target, contentRect: contentRect });\n    }\n    return ResizeObserverEntry;\n}());\n\nvar ResizeObserverSPI = /** @class */ (function () {\n    /**\n     * Creates a new instance of ResizeObserver.\n     *\n     * @param {ResizeObserverCallback} callback - Callback function that is invoked\n     *      when one of the observed elements changes it's content dimensions.\n     * @param {ResizeObserverController} controller - Controller instance which\n     *      is responsible for the updates of observer.\n     * @param {ResizeObserver} callbackCtx - Reference to the public\n     *      ResizeObserver instance which will be passed to callback function.\n     */\n    function ResizeObserverSPI(callback, controller, callbackCtx) {\n        /**\n         * Collection of resize observations that have detected changes in dimensions\n         * of elements.\n         *\n         * @private {Array<ResizeObservation>}\n         */\n        this.activeObservations_ = [];\n        /**\n         * Registry of the ResizeObservation instances.\n         *\n         * @private {Map<Element, ResizeObservation>}\n         */\n        this.observations_ = new MapShim();\n        if (typeof callback !== 'function') {\n            throw new TypeError('The callback provided as parameter 1 is not a function.');\n        }\n        this.callback_ = callback;\n        this.controller_ = controller;\n        this.callbackCtx_ = callbackCtx;\n    }\n    /**\n     * Starts observing provided element.\n     *\n     * @param {Element} target - Element to be observed.\n     * @returns {void}\n     */\n    ResizeObserverSPI.prototype.observe = function (target) {\n        if (!arguments.length) {\n            throw new TypeError('1 argument required, but only 0 present.');\n        }\n        // Do nothing if current environment doesn't have the Element interface.\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n            return;\n        }\n        if (!(target instanceof getWindowOf(target).Element)) {\n            throw new TypeError('parameter 1 is not of type \"Element\".');\n        }\n        var observations = this.observations_;\n        // Do nothing if element is already being observed.\n        if (observations.has(target)) {\n            return;\n        }\n        observations.set(target, new ResizeObservation(target));\n        this.controller_.addObserver(this);\n        // Force the update of observations.\n        this.controller_.refresh();\n    };\n    /**\n     * Stops observing provided element.\n     *\n     * @param {Element} target - Element to stop observing.\n     * @returns {void}\n     */\n    ResizeObserverSPI.prototype.unobserve = function (target) {\n        if (!arguments.length) {\n            throw new TypeError('1 argument required, but only 0 present.');\n        }\n        // Do nothing if current environment doesn't have the Element interface.\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n            return;\n        }\n        if (!(target instanceof getWindowOf(target).Element)) {\n            throw new TypeError('parameter 1 is not of type \"Element\".');\n        }\n        var observations = this.observations_;\n        // Do nothing if element is not being observed.\n        if (!observations.has(target)) {\n            return;\n        }\n        observations.delete(target);\n        if (!observations.size) {\n            this.controller_.removeObserver(this);\n        }\n    };\n    /**\n     * Stops observing all elements.\n     *\n     * @returns {void}\n     */\n    ResizeObserverSPI.prototype.disconnect = function () {\n        this.clearActive();\n        this.observations_.clear();\n        this.controller_.removeObserver(this);\n    };\n    /**\n     * Collects observation instances the associated element of which has changed\n     * it's content rectangle.\n     *\n     * @returns {void}\n     */\n    ResizeObserverSPI.prototype.gatherActive = function () {\n        var _this = this;\n        this.clearActive();\n        this.observations_.forEach(function (observation) {\n            if (observation.isActive()) {\n                _this.activeObservations_.push(observation);\n            }\n        });\n    };\n    /**\n     * Invokes initial callback function with a list of ResizeObserverEntry\n     * instances collected from active resize observations.\n     *\n     * @returns {void}\n     */\n    ResizeObserverSPI.prototype.broadcastActive = function () {\n        // Do nothing if observer doesn't have active observations.\n        if (!this.hasActive()) {\n            return;\n        }\n        var ctx = this.callbackCtx_;\n        // Create ResizeObserverEntry instance for every active observation.\n        var entries = this.activeObservations_.map(function (observation) {\n            return new ResizeObserverEntry(observation.target, observation.broadcastRect());\n        });\n        this.callback_.call(ctx, entries, ctx);\n        this.clearActive();\n    };\n    /**\n     * Clears the collection of active observations.\n     *\n     * @returns {void}\n     */\n    ResizeObserverSPI.prototype.clearActive = function () {\n        this.activeObservations_.splice(0);\n    };\n    /**\n     * Tells whether observer has active observations.\n     *\n     * @returns {boolean}\n     */\n    ResizeObserverSPI.prototype.hasActive = function () {\n        return this.activeObservations_.length > 0;\n    };\n    return ResizeObserverSPI;\n}());\n\n// Registry of internal observers. If WeakMap is not available use current shim\n// for the Map collection as it has all required methods and because WeakMap\n// can't be fully polyfilled anyway.\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\n/**\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\n * exposing only those methods and properties that are defined in the spec.\n */\nvar ResizeObserver = /** @class */ (function () {\n    /**\n     * Creates a new instance of ResizeObserver.\n     *\n     * @param {ResizeObserverCallback} callback - Callback that is invoked when\n     *      dimensions of the observed elements change.\n     */\n    function ResizeObserver(callback) {\n        if (!(this instanceof ResizeObserver)) {\n            throw new TypeError('Cannot call a class as a function.');\n        }\n        if (!arguments.length) {\n            throw new TypeError('1 argument required, but only 0 present.');\n        }\n        var controller = ResizeObserverController.getInstance();\n        var observer = new ResizeObserverSPI(callback, controller, this);\n        observers.set(this, observer);\n    }\n    return ResizeObserver;\n}());\n// Expose public methods of ResizeObserver.\n[\n    'observe',\n    'unobserve',\n    'disconnect'\n].forEach(function (method) {\n    ResizeObserver.prototype[method] = function () {\n        var _a;\n        return (_a = observers.get(this))[method].apply(_a, arguments);\n    };\n});\n\nvar index = (function () {\n    // Export existing implementation if available.\n    if (typeof global$1.ResizeObserver !== 'undefined') {\n        return global$1.ResizeObserver;\n    }\n    return ResizeObserver;\n})();\n\nexport default index;\n"]},"metadata":{},"sourceType":"module"}