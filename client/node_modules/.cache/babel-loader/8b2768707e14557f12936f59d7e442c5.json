{"ast":null,"code":"import _slicedToArray from\"D:\\\\GitHub\\\\ML4GIS\\\\client\\\\node_modules\\\\react-scripts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{memo}from\"react\";import colorAlpha from\"color-alpha\";function clamp(num,min,max){return num<=min?min:num>=max?max:num;}var RegionComponents={point:memo(function(_ref){var region=_ref.region,iw=_ref.iw,ih=_ref.ih;return/*#__PURE__*/React.createElement(\"g\",{transform:\"translate(\".concat(region.x*iw,\" \").concat(region.y*ih,\")\")},/*#__PURE__*/React.createElement(\"path\",{d:\"M0 8L8 0L0 -8L-8 0Z\",strokeWidth:2,stroke:region.color,fill:\"transparent\"}));}),rectangle:memo(function(_ref2){var region=_ref2.region,iw=_ref2.iw,ih=_ref2.ih;return/*#__PURE__*/React.createElement(\"g\",{transform:\"translate(\".concat(region.x*iw,\" \").concat(region.y*ih,\")\")},/*#__PURE__*/React.createElement(\"rect\",{strokeWidth:2,x:0,y:0,width:Math.max(region.w*iw,0),height:Math.max(region.h*ih,0),stroke:colorAlpha(region.color,0.75),fill:colorAlpha(region.color,0.25)}));}),circle:memo(function(_ref3){var region=_ref3.region,iw=_ref3.iw,ih=_ref3.ih;return/*#__PURE__*/React.createElement(\"g\",{transform:\"translate(\".concat(region.x*iw,\" \").concat(region.y*ih,\")\")},/*#__PURE__*/React.createElement(\"ellipse\",{strokeWidth:2,rx:Math.max(region.xr*iw,0),ry:Math.max(region.yr*ih,0),cx:region.x,cy:region.y,stroke:colorAlpha(region.color,0.75),fill:colorAlpha(region.color,0.25)}));}),polygon1:memo(function(_ref4){var region=_ref4.region,iw=_ref4.iw,ih=_ref4.ih,fullSegmentationMode=_ref4.fullSegmentationMode;var Component=region.open?\"polyline\":\"polygon\";// const Hole=region.creatingHole ? \"polyline\" : \"polygon\"\nreturn/*#__PURE__*/React.createElement(Component// paths={[region.points,region.holes]}\n,{points:region.points.map(function(_ref5){var _ref6=_slicedToArray(_ref5,2),x=_ref6[0],y=_ref6[1];return[x*iw,y*ih];}).map(function(a){return a.join(\" \");}).join(\" \")// holes={region.holes\n//     .map(([x, y]) => [x * iw, y * ih])\n//     .map((a) => a.join(\" \"))\n//     .join(\" \")}\n,strokeWidth:2,stroke:colorAlpha(region.color,0.75),fill:colorAlpha(region.color,0.25)});}),polygon:memo(function(_ref7){var region=_ref7.region,iw=_ref7.iw,ih=_ref7.ih,fullSegmentationMode=_ref7.fullSegmentationMode;var Component=region.open?\"polyline\":\"polygon\";return/*#__PURE__*/React.createElement(Component,{points:region.points.map(function(_ref8){var _ref9=_slicedToArray(_ref8,2),x=_ref9[0],y=_ref9[1];return[x*iw,y*ih];}).map(function(a){return a.join(\" \");}).join(\" \"),strokeWidth:2,stroke:colorAlpha(region.color,0.75),fill:colorAlpha(region.color,0.25)});}),pixel:function pixel(){return null;}};export var WrappedRegionList=memo(function(_ref10){var regions=_ref10.regions,keypointDefinitions=_ref10.keypointDefinitions,iw=_ref10.iw,ih=_ref10.ih,fullSegmentationMode=_ref10.fullSegmentationMode;return regions.filter(function(r){return r.visible!==false;}).map(function(r){var Component=RegionComponents[r.type];return/*#__PURE__*/React.createElement(Component,{key:r.regionId,region:r,iw:iw,ih:ih});});},function(n,p){return n.regions===p.regions&&n.iw===p.iw&&n.ih===p.ih;});export var RegionShapes=function RegionShapes(_ref11){var mat=_ref11.mat,imagePosition=_ref11.imagePosition,_ref11$regions=_ref11.regions,regions=_ref11$regions===void 0?[]:_ref11$regions;var iw=imagePosition.bottomRight.x-imagePosition.topLeft.x;var ih=imagePosition.bottomRight.y-imagePosition.topLeft.y;if(isNaN(iw)||isNaN(ih))return null;return/*#__PURE__*/React.createElement(\"svg\",{width:iw,height:ih,style:{position:\"absolute\",zIndex:2,left:imagePosition.topLeft.x,top:imagePosition.topLeft.y,pointerEvents:\"none\",width:iw,height:ih}},/*#__PURE__*/React.createElement(WrappedRegionList,{key:\"wrapped-region-list\",regions:regions,iw:iw,ih:ih}));};export default RegionShapes;","map":{"version":3,"sources":["D:/GitHub/ML4GIS/client/src/pages/Home/annotateComponents/RegionShapes/main_RegionShapes.js"],"names":["React","memo","colorAlpha","clamp","num","min","max","RegionComponents","point","region","iw","ih","x","y","color","rectangle","Math","w","h","circle","xr","yr","polygon1","fullSegmentationMode","Component","open","points","map","a","join","polygon","pixel","WrappedRegionList","regions","keypointDefinitions","filter","r","visible","type","regionId","n","p","RegionShapes","mat","imagePosition","bottomRight","topLeft","isNaN","position","zIndex","left","top","pointerEvents","width","height"],"mappings":"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","sourcesContent":["\r\nimport React, { memo } from \"react\"\r\nimport colorAlpha from \"color-alpha\"\r\n\r\nfunction clamp(num, min, max) {\r\n  return num <= min ? min : num >= max ? max : num\r\n}\r\n\r\nconst RegionComponents = {\r\n  point: memo(({ region, iw, ih }) => (\r\n    <g transform={`translate(${region.x * iw} ${region.y * ih})`}>\r\n      <path\r\n        d={\"M0 8L8 0L0 -8L-8 0Z\"}\r\n        strokeWidth={2}\r\n        stroke={region.color}\r\n        fill=\"transparent\"\r\n      />\r\n    </g>\r\n  )),\r\n    rectangle: memo(({ region, iw, ih }) => (\r\n    <g transform={`translate(${region.x * iw} ${region.y * ih})`}>\r\n      <rect\r\n        strokeWidth={2}\r\n        x={0}\r\n        y={0}\r\n        width={Math.max(region.w * iw, 0)}\r\n        height={Math.max(region.h * ih, 0)}\r\n        stroke={colorAlpha(region.color, 0.75)}\r\n        fill={colorAlpha(region.color, 0.25)}\r\n      />\r\n    </g>\r\n  )),\r\n    circle: memo(({ region, iw, ih }) => (\r\n        <g transform={`translate(${region.x * iw} ${region.y * ih})`}>\r\n            <ellipse\r\n                strokeWidth={2}\r\n                rx={Math.max(region.xr*iw,0)}\r\n                ry={Math.max(region.yr*ih,0)}\r\n                cx={region.x}\r\n                cy={region.y}\r\n                stroke={colorAlpha(region.color, 0.75)}\r\n                fill={colorAlpha(region.color, 0.25)}\r\n            />\r\n        </g>\r\n    )),\r\n  polygon1: memo(({ region, iw, ih, fullSegmentationMode }) => {\r\n    const Component = region.open? \"polyline\" : \"polygon\"\r\n\r\n      // const Hole=region.creatingHole ? \"polyline\" : \"polygon\"\r\n    return (\r\n      <Component\r\n          // paths={[region.points,region.holes]}\r\n        points={region.points\r\n          .map(([x, y]) => [x * iw, y * ih])\r\n          .map((a) => a.join(\" \"))\r\n          .join(\" \")}\r\n        // holes={region.holes\r\n        //     .map(([x, y]) => [x * iw, y * ih])\r\n        //     .map((a) => a.join(\" \"))\r\n        //     .join(\" \")}\r\n        strokeWidth={2}\r\n        stroke={colorAlpha(region.color, 0.75)}\r\n        fill={colorAlpha(region.color, 0.25)}>\r\n\r\n         </Component>\r\n\r\n\r\n    )\r\n  }),\r\n    polygon: memo(({ region, iw, ih, fullSegmentationMode }) => {\r\n        const Component = region.open ? \"polyline\" : \"polygon\"\r\n        return (\r\n            <Component\r\n                points={region.points\r\n                    .map(([x, y]) => [x * iw, y * ih])\r\n                    .map((a) => a.join(\" \"))\r\n                    .join(\" \")}\r\n                strokeWidth={2}\r\n                stroke={colorAlpha(region.color, 0.75)}\r\n                fill={colorAlpha(region.color, 0.25)}\r\n            />\r\n        )\r\n    }),\r\n  pixel: () => null,\r\n}\r\n\r\n\r\nexport const WrappedRegionList = memo(\r\n  ({ regions, keypointDefinitions, iw, ih, fullSegmentationMode }) => {\r\n    return regions\r\n      .filter((r) => r.visible !== false)\r\n      .map((r) => {\r\n        const Component = RegionComponents[r.type]\r\n        return (\r\n          <Component\r\n            key={r.regionId}\r\n            region={r}\r\n            iw={iw}\r\n            ih={ih}\r\n          />\r\n        )\r\n      })\r\n  },\r\n  (n, p) => n.regions === p.regions && n.iw === p.iw && n.ih === p.ih\r\n)\r\n\r\nexport const RegionShapes = ({\r\n  mat,\r\n  imagePosition,\r\n  regions = [],\r\n}) => {\r\n  const iw = imagePosition.bottomRight.x - imagePosition.topLeft.x\r\n  const ih = imagePosition.bottomRight.y - imagePosition.topLeft.y\r\n  if (isNaN(iw) || isNaN(ih)) return null\r\n  return (\r\n    <svg\r\n      width={iw}\r\n      height={ih}\r\n      style={{\r\n        position: \"absolute\",\r\n        zIndex: 2,\r\n        left: imagePosition.topLeft.x,\r\n        top: imagePosition.topLeft.y,\r\n        pointerEvents: \"none\",\r\n        width: iw,\r\n        height: ih,\r\n      }}\r\n    >\r\n      <WrappedRegionList\r\n        key=\"wrapped-region-list\"\r\n        regions={regions}\r\n        iw={iw}\r\n        ih={ih}\r\n      />\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default RegionShapes\r\n"]},"metadata":{},"sourceType":"module"}