{"ast":null,"code":"import _objectSpread from \"/Users/yan/Documents/proj/ML4GIS/client/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/yan/Documents/proj/ML4GIS/client/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/yan/Documents/proj/ML4GIS/client/src/annotateComponents/MainLayout/index.js\";\nimport React, { useRef, useCallback } from \"react\"; // import type { Node } from \"react\"\n\nimport { makeStyles, styled } from \"@material-ui/core/styles\";\nimport ImageCanvas from \"../ImageCanvas\";\nimport styles from \"./styles\";\nimport useKey from \"use-key-hook\";\nimport classnames from \"classnames\";\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\nimport getActiveImage from \"../Annotator/reducers/get-active-image\";\nimport { useDispatchHotkeyHandlers } from \"../ShortcutsManager\";\nimport { withHotKeys } from \"react-hotkeys\";\nimport iconDictionary from \"./icon-dictionary\";\nimport Workspace from \"react-material-workspace-layout/Workspace\";\nimport useEventCallback from \"use-event-callback\"; // import getHotkeyHelpText from \"../utils/get-hotkey-help-text\"\n\nconst useStyles = makeStyles(styles);\nconst HotkeyDiv = withHotKeys((_ref) => {\n  let hotKeys = _ref.hotKeys,\n      children = _ref.children,\n      divRef = _ref.divRef,\n      props = _objectWithoutProperties(_ref, [\"hotKeys\", \"children\", \"divRef\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, _objectSpread(_objectSpread({}, hotKeys), props), {\n    ref: divRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 3\n    }\n  }), children);\n}); // const FullScreenContainer = styled(\"div\")({\n//   width: \"100%\",\n//   height: \"100%\",\n//   \"& .fullscreen\": {\n//     width: \"100%\",\n//     height: \"100%\",\n//   },\n// })\n\nexport const MainLayout = ({\n  state,\n  dispatch,\n  alwaysShowNextButton = false,\n  alwaysShowPrevButton = false,\n  // RegionEditLabel,\n  onRegionClassAdded // hideHeader,\n  // hideHeaderText,\n  // hideNext = false,\n  // hidePrev = false,\n\n}) => {\n  const classes = useStyles(); // const settings = useSettings()\n\n  const fullScreenHandle = useFullScreenHandle();\n  const memoizedActionFns = useRef({});\n\n  const action = (type, ...params) => {\n    const fnKey = \"\".concat(type, \"(\").concat(params.join(\",\"), \")\");\n    if (memoizedActionFns.current[fnKey]) return memoizedActionFns.current[fnKey];\n\n    const fn = (...args) => params.length > 0 ? dispatch(_objectSpread({\n      type\n    }, params.reduce((acc, p, i) => (acc[p] = args[i], acc), {}))) : dispatch(_objectSpread({\n      type\n    }, args[0]));\n\n    memoizedActionFns.current[fnKey] = fn;\n    return fn;\n  };\n\n  const _getActiveImage = getActiveImage(state),\n        currentImageIndex = _getActiveImage.currentImageIndex,\n        activeImage = _getActiveImage.activeImage;\n\n  let nextImage;\n\n  if (currentImageIndex !== null) {\n    nextImage = state.images[currentImageIndex + 1];\n  }\n\n  useKey(() => dispatch({\n    type: \"CANCEL\"\n  }), {\n    detectKeys: [27]\n  }); // const isAVideoFrame = activeImage && activeImage.frameTime !== undefined\n\n  const innerContainerRef = useRef();\n  const hotkeyHandlers = useDispatchHotkeyHandlers({\n    dispatch\n  }); // let impliedVideoRegions = useImpliedVideoRegions(state)\n\n  const refocusOnMouseEvent = useCallback(e => {\n    if (!innerContainerRef.current) return;\n    if (innerContainerRef.current.contains(document.activeElement)) return;\n\n    if (innerContainerRef.current.contains(e.target)) {\n      innerContainerRef.current.focus();\n      e.target.focus();\n    }\n  }, []);\n  const canvas = /*#__PURE__*/React.createElement(ImageCanvas, {\n    key: state.selectedImage // fullImageSegmentationMode={state.fullImageSegmentationMode}\n    // autoSegmentationOptions={state.autoSegmentationOptions}\n    ,\n    showTags: state.showTags // allowedArea={state.allowedArea}\n    // modifyingAllowedArea={state.selectedTool === \"modify-allowed-area\"}\n    // regionClsList={state.regionClsList}\n    ,\n    regionTagList: state.regionTagList,\n    regions: activeImage.regions || [],\n    realSize: activeImage ? activeImage.realSize : undefined,\n    imageSrc: state.annotationType === \"image\" ? activeImage.src : null,\n    pointDistancePrecision: state.pointDistancePrecision,\n    createWithPrimary: state.selectedTool.includes(\"create\"),\n    dragWithPrimary: state.selectedTool === \"pan\",\n    zoomWithPrimary: state.selectedTool === \"zoom\" // showPointDistances={state.showPointDistances}\n    // keypointDefinitions={state.keypointDefinitions}\n    ,\n    onMouseMove: action(\"MOUSE_MOVE\"),\n    onMouseDown: action(\"MOUSE_DOWN\"),\n    onMouseUp: action(\"MOUSE_UP\"),\n    onChangeRegion: action(\"CHANGE_REGION\", \"region\"),\n    onBeginRegionEdit: action(\"OPEN_REGION_EDITOR\", \"region\"),\n    onCloseRegionEdit: action(\"CLOSE_REGION_EDITOR\", \"region\"),\n    onDeleteRegion: action(\"DELETE_REGION\", \"region\"),\n    onBeginBoxTransform: action(\"BEGIN_BOX_TRANSFORM\", \"rectangle\", \"directions\"),\n    onBeginMovePolygonPoint: action(\"BEGIN_MOVE_POLYGON_POINT\", \"polygon\", \"pointIndex\") // onBeginMoveKeypoint={action(\n    //   \"BEGIN_MOVE_KEYPOINT\",\n    //   \"region\",\n    //   \"keypointId\"\n    // )}\n    ,\n    onAddPolygonPoint: action(\"ADD_POLYGON_POINT\", \"polygon\", \"point\", \"pointIndex\"),\n    onSelectRegion: action(\"SELECT_REGION\", \"region\"),\n    onBeginMovePoint: action(\"BEGIN_MOVE_POINT\", \"point\"),\n    onImageLoaded: action(\"IMAGE_LOADED\", \"image\") // RegionEditLabel={RegionEditLabel}\n    // onRegionClassAdded={onRegionClassAdded}\n    ,\n    allowComments: state.allowComments,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  });\n  const onClickIconSidebarItem = useEventCallback(item => {\n    dispatch({\n      type: \"SELECT_TOOL\",\n      selectedTool: item.name\n    });\n  });\n  const onClickHeaderItem = useEventCallback(item => {\n    // if (item.name === \"Fullscreen\") {\n    //   fullScreenHandle.enter()\n    // } else if (item.name === \"Window\") {\n    //   fullScreenHandle.exit()\n    // }\n    dispatch({\n      type: \"HEADER_BUTTON_CLICKED\",\n      buttonName: item.name\n    });\n  }); // const nextImageHasRegions =\n  //   !nextImage || (nextImage.regions && nextImage.regions.length > 0)\n\n  return (\n    /*#__PURE__*/\n    // <FullScreenContainer>\n    //   <FullScreen\n    //     handle={fullScreenHandle}\n    //     onChange={(open) => {\n    //       if (!open) {\n    //         fullScreenHandle.exit()\n    //         action(\"HEADER_BUTTON_CLICKED\", \"buttonName\")(\"Window\")\n    //       }\n    //     }}\n    //   >\n    React.createElement(HotkeyDiv, {\n      tabIndex: -1,\n      divRef: innerContainerRef,\n      onMouseDown: refocusOnMouseEvent,\n      onMouseOver: refocusOnMouseEvent,\n      allowChanges: true,\n      handlers: hotkeyHandlers,\n      className: classnames(classes.container),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Workspace, {\n      iconDictionary: iconDictionary // hideHeader={hideHeader}\n      // hideHeaderText={hideHeaderText}\n      ,\n      headerLeftSide: [activeImage ? /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.headerTitle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 17\n        }\n      }, activeImage.name) : null].filter(Boolean),\n      headerItems: [{\n        name: \"Prev\"\n      }, {\n        name: \"Next\"\n      }, {\n        name: \"Save\"\n      }].filter(Boolean),\n      onClickHeaderItem: onClickHeaderItem,\n      onClickIconSidebarItem: onClickIconSidebarItem,\n      selectedTools: [state.selectedTool].filter(Boolean),\n      iconSidebarItems: [{\n        name: \"pan\",\n        helperText: \"Drag/Pan (right or middle click)\",\n        alwaysShowing: true\n      }, {\n        name: \"zoom\",\n        helperText: \"Zoom In/Out\",\n        alwaysShowing: true\n      }, {\n        name: \"create-point\",\n        helperText: \"Add Point\"\n      }, {\n        name: \"create-rectangle\",\n        helperText: \"Add Rectangle\"\n      }, {\n        name: \"create-polygon\",\n        helperText: \"Add Polygon\"\n      }].filter(Boolean).filter(a => a.alwaysShowing || state.enabledTools.includes(a.name)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }\n    }, canvas))\n    /* </FullScreen>*/\n\n    /*</FullScreenContainer>*/\n\n  );\n};\nexport default MainLayout;","map":{"version":3,"sources":["/Users/yan/Documents/proj/ML4GIS/client/src/annotateComponents/MainLayout/index.js"],"names":["React","useRef","useCallback","makeStyles","styled","ImageCanvas","styles","useKey","classnames","FullScreen","useFullScreenHandle","getActiveImage","useDispatchHotkeyHandlers","withHotKeys","iconDictionary","Workspace","useEventCallback","useStyles","HotkeyDiv","hotKeys","children","divRef","props","MainLayout","state","dispatch","alwaysShowNextButton","alwaysShowPrevButton","onRegionClassAdded","classes","fullScreenHandle","memoizedActionFns","action","type","params","fnKey","join","current","fn","args","length","reduce","acc","p","i","currentImageIndex","activeImage","nextImage","images","detectKeys","innerContainerRef","hotkeyHandlers","refocusOnMouseEvent","e","contains","document","activeElement","target","focus","canvas","selectedImage","showTags","regionTagList","regions","realSize","undefined","annotationType","src","pointDistancePrecision","selectedTool","includes","allowComments","onClickIconSidebarItem","item","name","onClickHeaderItem","buttonName","container","headerTitle","filter","Boolean","helperText","alwaysShowing","a","enabledTools"],"mappings":";;;AAEA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,WAAxB,QAA2C,OAA3C,C,CACA;;AACA,SAASC,UAAT,EAAqBC,MAArB,QAAmC,0BAAnC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,EAAqBC,mBAArB,QAAgD,mBAAhD;AACA,OAAOC,cAAP,MAA2B,wCAA3B;AACA,SAASC,yBAAT,QAA0C,qBAA1C;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,SAAP,MAAsB,2CAAtB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B,C,CACA;;AAEA,MAAMC,SAAS,GAAGd,UAAU,CAACG,MAAD,CAA5B;AAEA,MAAMY,SAAS,GAAGL,WAAW,CAAC;AAAA,MAAGM,OAAH,QAAGA,OAAH;AAAA,MAAYC,QAAZ,QAAYA,QAAZ;AAAA,MAAsBC,MAAtB,QAAsBA,MAAtB;AAAA,MAAiCC,KAAjC;;AAAA,sBAC5B,6EAAcH,OAAd,GAA0BG,KAA1B;AAAmC,IAAA,GAAG,EAAED,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGD,QADH,CAD4B;AAAA,CAAD,CAA7B,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAaA,OAAO,MAAMG,UAAU,GAAG,CAAC;AACzBC,EAAAA,KADyB;AAEzBC,EAAAA,QAFyB;AAGzBC,EAAAA,oBAAoB,GAAG,KAHE;AAIzBC,EAAAA,oBAAoB,GAAG,KAJE;AAKzB;AACAC,EAAAA,kBANyB,CAOzB;AACA;AACA;AACA;;AAVyB,CAAD,KAWb;AACX,QAAMC,OAAO,GAAGZ,SAAS,EAAzB,CADW,CAEX;;AACA,QAAMa,gBAAgB,GAAGpB,mBAAmB,EAA5C;AAEA,QAAMqB,iBAAiB,GAAG9B,MAAM,CAAC,EAAD,CAAhC;;AACA,QAAM+B,MAAM,GAAG,CAACC,IAAD,EAAe,GAAGC,MAAlB,KAA4C;AACzD,UAAMC,KAAK,aAAMF,IAAN,cAAcC,MAAM,CAACE,IAAP,CAAY,GAAZ,CAAd,MAAX;AACA,QAAIL,iBAAiB,CAACM,OAAlB,CAA0BF,KAA1B,CAAJ,EACE,OAAOJ,iBAAiB,CAACM,OAAlB,CAA0BF,KAA1B,CAAP;;AAEF,UAAMG,EAAE,GAAG,CAAC,GAAGC,IAAJ,KACTL,MAAM,CAACM,MAAP,GAAgB,CAAhB,GACIf,QAAQ;AAEJQ,MAAAA;AAFI,OAGDC,MAAM,CAACO,MAAP,CAAc,CAACC,GAAD,EAAMC,CAAN,EAASC,CAAT,MAAiBF,GAAG,CAACC,CAAD,CAAH,GAASJ,IAAI,CAACK,CAAD,CAAd,EAAoBF,GAApC,CAAd,EAAwD,EAAxD,CAHC,EADZ,GAOIjB,QAAQ;AAAGQ,MAAAA;AAAH,OAAYM,IAAI,CAAC,CAAD,CAAhB,EARd;;AASAR,IAAAA,iBAAiB,CAACM,OAAlB,CAA0BF,KAA1B,IAAmCG,EAAnC;AACA,WAAOA,EAAP;AACD,GAhBD;;AANW,0BAwBgC3B,cAAc,CAACa,KAAD,CAxB9C;AAAA,QAwBHqB,iBAxBG,mBAwBHA,iBAxBG;AAAA,QAwBgBC,WAxBhB,mBAwBgBA,WAxBhB;;AAyBX,MAAIC,SAAJ;;AACA,MAAIF,iBAAiB,KAAK,IAA1B,EAAgC;AAC9BE,IAAAA,SAAS,GAAGvB,KAAK,CAACwB,MAAN,CAAaH,iBAAiB,GAAG,CAAjC,CAAZ;AACD;;AAEDtC,EAAAA,MAAM,CAAC,MAAMkB,QAAQ,CAAC;AAAEQ,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAf,EAAqC;AACzCgB,IAAAA,UAAU,EAAE,CAAC,EAAD;AAD6B,GAArC,CAAN,CA9BW,CAkCX;;AACA,QAAMC,iBAAiB,GAAGjD,MAAM,EAAhC;AACA,QAAMkD,cAAc,GAAGvC,yBAAyB,CAAC;AAAEa,IAAAA;AAAF,GAAD,CAAhD,CApCW,CAsCX;;AAEA,QAAM2B,mBAAmB,GAAGlD,WAAW,CAAEmD,CAAD,IAAO;AAC7C,QAAI,CAACH,iBAAiB,CAACb,OAAvB,EAAgC;AAChC,QAAIa,iBAAiB,CAACb,OAAlB,CAA0BiB,QAA1B,CAAmCC,QAAQ,CAACC,aAA5C,CAAJ,EAAgE;;AAChE,QAAIN,iBAAiB,CAACb,OAAlB,CAA0BiB,QAA1B,CAAmCD,CAAC,CAACI,MAArC,CAAJ,EAAkD;AAChDP,MAAAA,iBAAiB,CAACb,OAAlB,CAA0BqB,KAA1B;AACAL,MAAAA,CAAC,CAACI,MAAF,CAASC,KAAT;AACD;AACF,GAPsC,EAOpC,EAPoC,CAAvC;AASA,QAAMC,MAAM,gBACV,oBAAC,WAAD;AACE,IAAA,GAAG,EAAEnC,KAAK,CAACoC,aADb,CAEE;AACA;AAHF;AAIE,IAAA,QAAQ,EAAEpC,KAAK,CAACqC,QAJlB,CAKE;AACA;AACA;AAPF;AAQE,IAAA,aAAa,EAAErC,KAAK,CAACsC,aARvB;AASE,IAAA,OAAO,EACLhB,WAAW,CAACiB,OAAZ,IAAuB,EAV3B;AAYE,IAAA,QAAQ,EAAEjB,WAAW,GAAGA,WAAW,CAACkB,QAAf,GAA0BC,SAZjD;AAaE,IAAA,QAAQ,EAAEzC,KAAK,CAAC0C,cAAN,KAAyB,OAAzB,GAAmCpB,WAAW,CAACqB,GAA/C,GAAqD,IAbjE;AAcE,IAAA,sBAAsB,EAAE3C,KAAK,CAAC4C,sBAdhC;AAeE,IAAA,iBAAiB,EAAE5C,KAAK,CAAC6C,YAAN,CAAmBC,QAAnB,CAA4B,QAA5B,CAfrB;AAgBE,IAAA,eAAe,EAAE9C,KAAK,CAAC6C,YAAN,KAAuB,KAhB1C;AAiBE,IAAA,eAAe,EAAE7C,KAAK,CAAC6C,YAAN,KAAuB,MAjB1C,CAkBE;AACA;AAnBF;AAoBE,IAAA,WAAW,EAAErC,MAAM,CAAC,YAAD,CApBrB;AAqBE,IAAA,WAAW,EAAEA,MAAM,CAAC,YAAD,CArBrB;AAsBE,IAAA,SAAS,EAAEA,MAAM,CAAC,UAAD,CAtBnB;AAuBE,IAAA,cAAc,EAAEA,MAAM,CAAC,eAAD,EAAkB,QAAlB,CAvBxB;AAwBE,IAAA,iBAAiB,EAAEA,MAAM,CAAC,oBAAD,EAAuB,QAAvB,CAxB3B;AAyBE,IAAA,iBAAiB,EAAEA,MAAM,CAAC,qBAAD,EAAwB,QAAxB,CAzB3B;AA0BE,IAAA,cAAc,EAAEA,MAAM,CAAC,eAAD,EAAkB,QAAlB,CA1BxB;AA2BE,IAAA,mBAAmB,EAAEA,MAAM,CAAC,qBAAD,EAAwB,WAAxB,EAAqC,YAArC,CA3B7B;AA4BE,IAAA,uBAAuB,EAAEA,MAAM,CAC7B,0BAD6B,EAE7B,SAF6B,EAG7B,YAH6B,CA5BjC,CAiCE;AACA;AACA;AACA;AACA;AArCF;AAsCE,IAAA,iBAAiB,EAAEA,MAAM,CACvB,mBADuB,EAEvB,SAFuB,EAGvB,OAHuB,EAIvB,YAJuB,CAtC3B;AA4CE,IAAA,cAAc,EAAEA,MAAM,CAAC,eAAD,EAAkB,QAAlB,CA5CxB;AA6CE,IAAA,gBAAgB,EAAEA,MAAM,CAAC,kBAAD,EAAqB,OAArB,CA7C1B;AA8CE,IAAA,aAAa,EAAEA,MAAM,CAAC,cAAD,EAAiB,OAAjB,CA9CvB,CA+CE;AACA;AAhDF;AAiDE,IAAA,aAAa,EAAER,KAAK,CAAC+C,aAjDvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAsDA,QAAMC,sBAAsB,GAAGxD,gBAAgB,CAAEyD,IAAD,IAAU;AACxDhD,IAAAA,QAAQ,CAAC;AAAEQ,MAAAA,IAAI,EAAE,aAAR;AAAuBoC,MAAAA,YAAY,EAAEI,IAAI,CAACC;AAA1C,KAAD,CAAR;AACD,GAF8C,CAA/C;AAIA,QAAMC,iBAAiB,GAAG3D,gBAAgB,CAAEyD,IAAD,IAAU;AACnD;AACA;AACA;AACA;AACA;AACAhD,IAAAA,QAAQ,CAAC;AAAEQ,MAAAA,IAAI,EAAE,uBAAR;AAAiC2C,MAAAA,UAAU,EAAEH,IAAI,CAACC;AAAlD,KAAD,CAAR;AACD,GAPyC,CAA1C,CA3GW,CAoHX;AACA;;AAEA;AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,wBAAC,SAAD;AACE,MAAA,QAAQ,EAAE,CAAC,CADb;AAEE,MAAA,MAAM,EAAExB,iBAFV;AAGE,MAAA,WAAW,EAAEE,mBAHf;AAIE,MAAA,WAAW,EAAEA,mBAJf;AAKE,MAAA,YAAY,MALd;AAME,MAAA,QAAQ,EAAED,cANZ;AAOE,MAAA,SAAS,EAAE3C,UAAU,CACnBqB,OAAO,CAACgD,SADW,CAPvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAYE,oBAAC,SAAD;AACE,MAAA,cAAc,EAAE/D,cADlB,CAEE;AACA;AAHF;AAKE,MAAA,cAAc,EAAE,CACbgC,WAAW,gBACV;AAAK,QAAA,SAAS,EAAEjB,OAAO,CAACiD,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAsChC,WAAW,CAAC4B,IAAlD,CADU,GAER,IAHU,EAIdK,MAJc,CAIPC,OAJO,CALlB;AAUE,MAAA,WAAW,EAAE,CACX;AAAEN,QAAAA,IAAI,EAAE;AAAR,OADW,EAEX;AAAEA,QAAAA,IAAI,EAAE;AAAR,OAFW,EAGX;AAAEA,QAAAA,IAAI,EAAE;AAAR,OAHW,EAIXK,MAJW,CAIJC,OAJI,CAVf;AAeE,MAAA,iBAAiB,EAAEL,iBAfrB;AAgBE,MAAA,sBAAsB,EAAEH,sBAhB1B;AAiBE,MAAA,aAAa,EAAE,CACbhD,KAAK,CAAC6C,YADO,EAEbU,MAFa,CAENC,OAFM,CAjBjB;AAoBE,MAAA,gBAAgB,EAAE,CAChB;AACEN,QAAAA,IAAI,EAAE,KADR;AAEEO,QAAAA,UAAU,EACR,kCAHJ;AAIEC,QAAAA,aAAa,EAAE;AAJjB,OADgB,EAOhB;AACER,QAAAA,IAAI,EAAE,MADR;AAEEO,QAAAA,UAAU,EACR,aAHJ;AAIEC,QAAAA,aAAa,EAAE;AAJjB,OAPgB,EAahB;AACER,QAAAA,IAAI,EAAE,cADR;AAEEO,QAAAA,UAAU,EAAE;AAFd,OAbgB,EAiBhB;AACEP,QAAAA,IAAI,EAAE,kBADR;AAEEO,QAAAA,UAAU,EACR;AAHJ,OAjBgB,EAsBhB;AACEP,QAAAA,IAAI,EAAE,gBADR;AAEEO,QAAAA,UAAU,EAAE;AAFd,OAtBgB,EA4BfF,MA5Be,CA4BRC,OA5BQ,EA6BfD,MA7Be,CA8BbI,CAAD,IAAOA,CAAC,CAACD,aAAF,IAAmB1D,KAAK,CAAC4D,YAAN,CAAmBd,QAAnB,CAA4Ba,CAAC,CAACT,IAA9B,CA9BZ,CApBpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAsDGf,MAtDH,CAZF;AAqEJ;;AACA;;AAjFF;AAmFD,CArNM;AAuNP,eAAepC,UAAf","sourcesContent":["// @flow\n\nimport React, { useRef, useCallback } from \"react\"\n// import type { Node } from \"react\"\nimport { makeStyles, styled } from \"@material-ui/core/styles\"\nimport ImageCanvas from \"../ImageCanvas\"\nimport styles from \"./styles\"\nimport type { MainLayoutState, Action } from \"./types\"\nimport useKey from \"use-key-hook\"\nimport classnames from \"classnames\"\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\"\nimport getActiveImage from \"../Annotator/reducers/get-active-image\"\nimport { useDispatchHotkeyHandlers } from \"../ShortcutsManager\"\nimport { withHotKeys } from \"react-hotkeys\"\nimport iconDictionary from \"./icon-dictionary\"\nimport Workspace from \"react-material-workspace-layout/Workspace\"\nimport useEventCallback from \"use-event-callback\"\n// import getHotkeyHelpText from \"../utils/get-hotkey-help-text\"\n\nconst useStyles = makeStyles(styles)\n\nconst HotkeyDiv = withHotKeys(({ hotKeys, children, divRef, ...props }) => (\n  <div {...{ ...hotKeys, ...props }} ref={divRef}>\n    {children}\n  </div>\n))\n\n// const FullScreenContainer = styled(\"div\")({\n//   width: \"100%\",\n//   height: \"100%\",\n//   \"& .fullscreen\": {\n//     width: \"100%\",\n//     height: \"100%\",\n//   },\n// })\n\ntype Props = {\n  state: MainLayoutState,\n  // RegionEditLabel?: Node,\n  dispatch: (Action) => any,\n  alwaysShowNextButton?: boolean,\n  alwaysShowPrevButton?: boolean,\n  onRegionClassAdded: () => {},\n  // hideHeader?: boolean,\n  // hideHeaderText?: boolean,\n}\n\nexport const MainLayout = ({\n  state,\n  dispatch,\n  alwaysShowNextButton = false,\n  alwaysShowPrevButton = false,\n  // RegionEditLabel,\n  onRegionClassAdded,\n  // hideHeader,\n  // hideHeaderText,\n  // hideNext = false,\n  // hidePrev = false,\n}: Props) => {\n  const classes = useStyles()\n  // const settings = useSettings()\n  const fullScreenHandle = useFullScreenHandle()\n\n  const memoizedActionFns = useRef({})\n  const action = (type: string, ...params: Array<string>) => {\n    const fnKey = `${type}(${params.join(\",\")})`\n    if (memoizedActionFns.current[fnKey])\n      return memoizedActionFns.current[fnKey]\n\n    const fn = (...args: any) =>\n      params.length > 0\n        ? dispatch(\n            ({\n              type,\n              ...params.reduce((acc, p, i) => ((acc[p] = args[i]), acc), {}),\n            }: any)\n          )\n        : dispatch({ type, ...args[0] })\n    memoizedActionFns.current[fnKey] = fn\n    return fn\n  }\n\n  const { currentImageIndex, activeImage } = getActiveImage(state)\n  let nextImage\n  if (currentImageIndex !== null) {\n    nextImage = state.images[currentImageIndex + 1]\n  }\n\n  useKey(() => dispatch({ type: \"CANCEL\" }), {\n    detectKeys: [27],\n  })\n\n  // const isAVideoFrame = activeImage && activeImage.frameTime !== undefined\n  const innerContainerRef = useRef()\n  const hotkeyHandlers = useDispatchHotkeyHandlers({ dispatch })\n\n  // let impliedVideoRegions = useImpliedVideoRegions(state)\n\n  const refocusOnMouseEvent = useCallback((e) => {\n    if (!innerContainerRef.current) return\n    if (innerContainerRef.current.contains(document.activeElement)) return\n    if (innerContainerRef.current.contains(e.target)) {\n      innerContainerRef.current.focus()\n      e.target.focus()\n    }\n  }, [])\n\n  const canvas = (\n    <ImageCanvas\n      key={state.selectedImage}\n      // fullImageSegmentationMode={state.fullImageSegmentationMode}\n      // autoSegmentationOptions={state.autoSegmentationOptions}\n      showTags={state.showTags}\n      // allowedArea={state.allowedArea}\n      // modifyingAllowedArea={state.selectedTool === \"modify-allowed-area\"}\n      // regionClsList={state.regionClsList}\n      regionTagList={state.regionTagList}\n      regions={\n        activeImage.regions || []\n      }\n      realSize={activeImage ? activeImage.realSize : undefined}\n      imageSrc={state.annotationType === \"image\" ? activeImage.src : null}\n      pointDistancePrecision={state.pointDistancePrecision}\n      createWithPrimary={state.selectedTool.includes(\"create\")}\n      dragWithPrimary={state.selectedTool === \"pan\"}\n      zoomWithPrimary={state.selectedTool === \"zoom\"}\n      // showPointDistances={state.showPointDistances}\n      // keypointDefinitions={state.keypointDefinitions}\n      onMouseMove={action(\"MOUSE_MOVE\")}\n      onMouseDown={action(\"MOUSE_DOWN\")}\n      onMouseUp={action(\"MOUSE_UP\")}\n      onChangeRegion={action(\"CHANGE_REGION\", \"region\")}\n      onBeginRegionEdit={action(\"OPEN_REGION_EDITOR\", \"region\")}\n      onCloseRegionEdit={action(\"CLOSE_REGION_EDITOR\", \"region\")}\n      onDeleteRegion={action(\"DELETE_REGION\", \"region\")}\n      onBeginBoxTransform={action(\"BEGIN_BOX_TRANSFORM\", \"rectangle\", \"directions\")}\n      onBeginMovePolygonPoint={action(\n        \"BEGIN_MOVE_POLYGON_POINT\",\n        \"polygon\",\n        \"pointIndex\"\n      )}\n      // onBeginMoveKeypoint={action(\n      //   \"BEGIN_MOVE_KEYPOINT\",\n      //   \"region\",\n      //   \"keypointId\"\n      // )}\n      onAddPolygonPoint={action(\n        \"ADD_POLYGON_POINT\",\n        \"polygon\",\n        \"point\",\n        \"pointIndex\"\n      )}\n      onSelectRegion={action(\"SELECT_REGION\", \"region\")}\n      onBeginMovePoint={action(\"BEGIN_MOVE_POINT\", \"point\")}\n      onImageLoaded={action(\"IMAGE_LOADED\", \"image\")}\n      // RegionEditLabel={RegionEditLabel}\n      // onRegionClassAdded={onRegionClassAdded}\n      allowComments={state.allowComments}\n    />\n  )\n\n  const onClickIconSidebarItem = useEventCallback((item) => {\n    dispatch({ type: \"SELECT_TOOL\", selectedTool: item.name })\n  })\n\n  const onClickHeaderItem = useEventCallback((item) => {\n    // if (item.name === \"Fullscreen\") {\n    //   fullScreenHandle.enter()\n    // } else if (item.name === \"Window\") {\n    //   fullScreenHandle.exit()\n    // }\n    dispatch({ type: \"HEADER_BUTTON_CLICKED\", buttonName: item.name })\n  })\n\n  // const nextImageHasRegions =\n  //   !nextImage || (nextImage.regions && nextImage.regions.length > 0)\n\n  return (\n    // <FullScreenContainer>\n    //   <FullScreen\n    //     handle={fullScreenHandle}\n    //     onChange={(open) => {\n    //       if (!open) {\n    //         fullScreenHandle.exit()\n    //         action(\"HEADER_BUTTON_CLICKED\", \"buttonName\")(\"Window\")\n    //       }\n    //     }}\n    //   >\n        <HotkeyDiv\n          tabIndex={-1}\n          divRef={innerContainerRef}\n          onMouseDown={refocusOnMouseEvent}\n          onMouseOver={refocusOnMouseEvent}\n          allowChanges\n          handlers={hotkeyHandlers}\n          className={classnames(\n            classes.container,\n\n          )}\n        >\n          <Workspace\n            iconDictionary={iconDictionary}\n            // hideHeader={hideHeader}\n            // hideHeaderText={hideHeaderText}\n\n            headerLeftSide={[\n               activeImage ? (\n                <div className={classes.headerTitle}>{activeImage.name}</div>\n              ) : null,\n            ].filter(Boolean)}\n            headerItems={[\n              { name: \"Prev\" },\n              { name: \"Next\" },\n              { name: \"Save\" },\n            ].filter(Boolean)}\n            onClickHeaderItem={onClickHeaderItem}\n            onClickIconSidebarItem={onClickIconSidebarItem}\n            selectedTools={[\n              state.selectedTool,\n            ].filter(Boolean)}\n            iconSidebarItems={[\n              {\n                name: \"pan\",\n                helperText:\n                  \"Drag/Pan (right or middle click)\",\n                alwaysShowing: true,\n              },\n              {\n                name: \"zoom\",\n                helperText:\n                  \"Zoom In/Out\",\n                alwaysShowing: true,\n              },\n              {\n                name: \"create-point\",\n                helperText: \"Add Point\" ,\n              },\n              {\n                name: \"create-rectangle\",\n                helperText:\n                  \"Add Rectangle\" ,\n              },\n              {\n                name: \"create-polygon\",\n                helperText: \"Add Polygon\",\n              },\n\n            ]\n              .filter(Boolean)\n              .filter(\n                (a) => a.alwaysShowing || state.enabledTools.includes(a.name)\n              )}\n\n          >\n            {canvas}\n          </Workspace>\n        </HotkeyDiv>\n    /* </FullScreen>*/\n    /*</FullScreenContainer>*/\n  )\n}\n\nexport default MainLayout\n"]},"metadata":{},"sourceType":"module"}