{"ast":null,"code":"/**\r\n * @module color-parse\r\n */\n'use strict';\n\nvar names = require('color-name');\n\nmodule.exports = parse;\n/**\r\n * Base hues\r\n * http://dev.w3.org/csswg/css-color/#typedef-named-hue\r\n */\n//FIXME: use external hue detector\n\nvar baseHues = {\n  red: 0,\n  orange: 60,\n  yellow: 120,\n  green: 180,\n  blue: 240,\n  purple: 300\n};\n/**\r\n * Parse color from the string passed\r\n *\r\n * @return {Object} A space indicator `space`, an array `values` and `alpha`\r\n */\n\nfunction parse(cstr) {\n  var m,\n      parts = [],\n      alpha = 1,\n      space;\n\n  if (typeof cstr === 'string') {\n    //keyword\n    if (names[cstr]) {\n      parts = names[cstr].slice();\n      space = 'rgb';\n    } //reserved words\n    else if (cstr === 'transparent') {\n        alpha = 0;\n        space = 'rgb';\n        parts = [0, 0, 0];\n      } //hex\n      else if (/^#[A-Fa-f0-9]+$/.test(cstr)) {\n          var base = cstr.slice(1);\n          var size = base.length;\n          var isShort = size <= 4;\n          alpha = 1;\n\n          if (isShort) {\n            parts = [parseInt(base[0] + base[0], 16), parseInt(base[1] + base[1], 16), parseInt(base[2] + base[2], 16)];\n\n            if (size === 4) {\n              alpha = parseInt(base[3] + base[3], 16) / 255;\n            }\n          } else {\n            parts = [parseInt(base[0] + base[1], 16), parseInt(base[2] + base[3], 16), parseInt(base[4] + base[5], 16)];\n\n            if (size === 8) {\n              alpha = parseInt(base[6] + base[7], 16) / 255;\n            }\n          }\n\n          if (!parts[0]) parts[0] = 0;\n          if (!parts[1]) parts[1] = 0;\n          if (!parts[2]) parts[2] = 0;\n          space = 'rgb';\n        } //color space\n        else if (m = /^((?:rgb|hs[lvb]|hwb|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms)a?)\\s*\\(([^\\)]*)\\)/.exec(cstr)) {\n            var name = m[1];\n            var isRGB = name === 'rgb';\n            var base = name.replace(/a$/, '');\n            space = base;\n            var size = base === 'cmyk' ? 4 : base === 'gray' ? 1 : 3;\n            parts = m[2].trim().split(/\\s*[,\\/]\\s*|\\s+/).map(function (x, i) {\n              //<percentage>\n              if (/%$/.test(x)) {\n                //alpha\n                if (i === size) return parseFloat(x) / 100; //rgb\n\n                if (base === 'rgb') return parseFloat(x) * 255 / 100;\n                return parseFloat(x);\n              } //hue\n              else if (base[i] === 'h') {\n                  //<deg>\n                  if (/deg$/.test(x)) {\n                    return parseFloat(x);\n                  } //<base-hue>\n                  else if (baseHues[x] !== undefined) {\n                      return baseHues[x];\n                    }\n                }\n\n              return parseFloat(x);\n            });\n            if (name === base) parts.push(1);\n            alpha = isRGB ? 1 : parts[size] === undefined ? 1 : parts[size];\n            parts = parts.slice(0, size);\n          } //named channels case\n          else if (cstr.length > 10 && /[0-9](?:\\s|\\/)/.test(cstr)) {\n              parts = cstr.match(/([0-9]+)/g).map(function (value) {\n                return parseFloat(value);\n              });\n              space = cstr.match(/([a-z])/ig).join('').toLowerCase();\n            }\n  } //numeric case\n  else if (!isNaN(cstr)) {\n      space = 'rgb';\n      parts = [cstr >>> 16, (cstr & 0x00ff00) >>> 8, cstr & 0x0000ff];\n    } //array-like\n    else if (Array.isArray(cstr) || cstr.length) {\n        parts = [cstr[0], cstr[1], cstr[2]];\n        space = 'rgb';\n        alpha = cstr.length === 4 ? cstr[3] : 1;\n      } //object case - detects css cases of rgb and hsl\n      else if (cstr instanceof Object) {\n          if (cstr.r != null || cstr.red != null || cstr.R != null) {\n            space = 'rgb';\n            parts = [cstr.r || cstr.red || cstr.R || 0, cstr.g || cstr.green || cstr.G || 0, cstr.b || cstr.blue || cstr.B || 0];\n          } else {\n            space = 'hsl';\n            parts = [cstr.h || cstr.hue || cstr.H || 0, cstr.s || cstr.saturation || cstr.S || 0, cstr.l || cstr.lightness || cstr.L || cstr.b || cstr.brightness];\n          }\n\n          alpha = cstr.a || cstr.alpha || cstr.opacity || 1;\n          if (cstr.opacity != null) alpha /= 100;\n        }\n\n  return {\n    space: space,\n    values: parts,\n    alpha: alpha\n  };\n}","map":{"version":3,"sources":["D:/GitHub/ML4GIS/client/node_modules/color-parse/index.js"],"names":["names","require","module","exports","parse","baseHues","red","orange","yellow","green","blue","purple","cstr","m","parts","alpha","space","slice","test","base","size","length","isShort","parseInt","exec","name","isRGB","replace","trim","split","map","x","i","parseFloat","undefined","push","match","value","join","toLowerCase","isNaN","Array","isArray","Object","r","R","g","G","b","B","h","hue","H","s","saturation","S","l","lightness","L","brightness","a","opacity","values"],"mappings":"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","sourcesContent":["/**\r\n * @module color-parse\r\n */\r\n\r\n'use strict'\r\n\r\nvar names = require('color-name')\r\n\r\nmodule.exports = parse\r\n\r\n/**\r\n * Base hues\r\n * http://dev.w3.org/csswg/css-color/#typedef-named-hue\r\n */\r\n//FIXME: use external hue detector\r\nvar baseHues = {\r\n\tred: 0,\r\n\torange: 60,\r\n\tyellow: 120,\r\n\tgreen: 180,\r\n\tblue: 240,\r\n\tpurple: 300\r\n}\r\n\r\n/**\r\n * Parse color from the string passed\r\n *\r\n * @return {Object} A space indicator `space`, an array `values` and `alpha`\r\n */\r\nfunction parse (cstr) {\r\n\tvar m, parts = [], alpha = 1, space\r\n\r\n\tif (typeof cstr === 'string') {\r\n\t\t//keyword\r\n\t\tif (names[cstr]) {\r\n\t\t\tparts = names[cstr].slice()\r\n\t\t\tspace = 'rgb'\r\n\t\t}\r\n\r\n\t\t//reserved words\r\n\t\telse if (cstr === 'transparent') {\r\n\t\t\talpha = 0\r\n\t\t\tspace = 'rgb'\r\n\t\t\tparts = [0,0,0]\r\n\t\t}\r\n\r\n\t\t//hex\r\n\t\telse if (/^#[A-Fa-f0-9]+$/.test(cstr)) {\r\n\t\t\tvar base = cstr.slice(1)\r\n\t\t\tvar size = base.length\r\n\t\t\tvar isShort = size <= 4\r\n\t\t\talpha = 1\r\n\r\n\t\t\tif (isShort) {\r\n\t\t\t\tparts = [\r\n\t\t\t\t\tparseInt(base[0] + base[0], 16),\r\n\t\t\t\t\tparseInt(base[1] + base[1], 16),\r\n\t\t\t\t\tparseInt(base[2] + base[2], 16)\r\n\t\t\t\t]\r\n\t\t\t\tif (size === 4) {\r\n\t\t\t\t\talpha = parseInt(base[3] + base[3], 16) / 255\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tparts = [\r\n\t\t\t\t\tparseInt(base[0] + base[1], 16),\r\n\t\t\t\t\tparseInt(base[2] + base[3], 16),\r\n\t\t\t\t\tparseInt(base[4] + base[5], 16)\r\n\t\t\t\t]\r\n\t\t\t\tif (size === 8) {\r\n\t\t\t\t\talpha = parseInt(base[6] + base[7], 16) / 255\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!parts[0]) parts[0] = 0\r\n\t\t\tif (!parts[1]) parts[1] = 0\r\n\t\t\tif (!parts[2]) parts[2] = 0\r\n\r\n\t\t\tspace = 'rgb'\r\n\t\t}\r\n\r\n\t\t//color space\r\n\t\telse if (m = /^((?:rgb|hs[lvb]|hwb|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms)a?)\\s*\\(([^\\)]*)\\)/.exec(cstr)) {\r\n\t\t\tvar name = m[1]\r\n\t\t\tvar isRGB = name === 'rgb'\r\n\t\t\tvar base = name.replace(/a$/, '')\r\n\t\t\tspace = base\r\n\t\t\tvar size = base === 'cmyk' ? 4 : base === 'gray' ? 1 : 3\r\n\t\t\tparts = m[2].trim()\r\n\t\t\t\t.split(/\\s*[,\\/]\\s*|\\s+/)\r\n\t\t\t\t.map(function (x, i) {\r\n\t\t\t\t\t//<percentage>\r\n\t\t\t\t\tif (/%$/.test(x)) {\r\n\t\t\t\t\t\t//alpha\r\n\t\t\t\t\t\tif (i === size)\treturn parseFloat(x) / 100\r\n\t\t\t\t\t\t//rgb\r\n\t\t\t\t\t\tif (base === 'rgb') return parseFloat(x) * 255 / 100\r\n\t\t\t\t\t\treturn parseFloat(x)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//hue\r\n\t\t\t\t\telse if (base[i] === 'h') {\r\n\t\t\t\t\t\t//<deg>\r\n\t\t\t\t\t\tif (/deg$/.test(x)) {\r\n\t\t\t\t\t\t\treturn parseFloat(x)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//<base-hue>\r\n\t\t\t\t\t\telse if (baseHues[x] !== undefined) {\r\n\t\t\t\t\t\t\treturn baseHues[x]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn parseFloat(x)\r\n\t\t\t\t})\r\n\r\n\t\t\tif (name === base) parts.push(1)\r\n\t\t\talpha = (isRGB) ? 1 : (parts[size] === undefined) ? 1 : parts[size]\r\n\t\t\tparts = parts.slice(0, size)\r\n\t\t}\r\n\r\n\t\t//named channels case\r\n\t\telse if (cstr.length > 10 && /[0-9](?:\\s|\\/)/.test(cstr)) {\r\n\t\t\tparts = cstr.match(/([0-9]+)/g).map(function (value) {\r\n\t\t\t\treturn parseFloat(value)\r\n\t\t\t})\r\n\r\n\t\t\tspace = cstr.match(/([a-z])/ig).join('').toLowerCase()\r\n\t\t}\r\n\t}\r\n\r\n\t//numeric case\r\n\telse if (!isNaN(cstr)) {\r\n\t\tspace = 'rgb'\r\n\t\tparts = [cstr >>> 16, (cstr & 0x00ff00) >>> 8, cstr & 0x0000ff]\r\n\t}\r\n\r\n\t//array-like\r\n\telse if (Array.isArray(cstr) || cstr.length) {\r\n\t\tparts = [cstr[0], cstr[1], cstr[2]]\r\n\t\tspace = 'rgb'\r\n\t\talpha = cstr.length === 4 ? cstr[3] : 1\r\n\t}\r\n\r\n\t//object case - detects css cases of rgb and hsl\r\n\telse if (cstr instanceof Object) {\r\n\t\tif (cstr.r != null || cstr.red != null || cstr.R != null) {\r\n\t\t\tspace = 'rgb'\r\n\t\t\tparts = [\r\n\t\t\t\tcstr.r || cstr.red || cstr.R || 0,\r\n\t\t\t\tcstr.g || cstr.green || cstr.G || 0,\r\n\t\t\t\tcstr.b || cstr.blue || cstr.B || 0\r\n\t\t\t]\r\n\t\t}\r\n\t\telse {\r\n\t\t\tspace = 'hsl'\r\n\t\t\tparts = [\r\n\t\t\t\tcstr.h || cstr.hue || cstr.H || 0,\r\n\t\t\t\tcstr.s || cstr.saturation || cstr.S || 0,\r\n\t\t\t\tcstr.l || cstr.lightness || cstr.L || cstr.b || cstr.brightness\r\n\t\t\t]\r\n\t\t}\r\n\r\n\t\talpha = cstr.a || cstr.alpha || cstr.opacity || 1\r\n\r\n\t\tif (cstr.opacity != null) alpha /= 100\r\n\t}\r\n\r\n\treturn {\r\n\t\tspace: space,\r\n\t\tvalues: parts,\r\n\t\talpha: alpha\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"script"}