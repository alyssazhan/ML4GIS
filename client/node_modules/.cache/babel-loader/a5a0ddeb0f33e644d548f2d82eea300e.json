{"ast":null,"code":"import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport fscreen from 'fscreen';\n\nfunction useFullScreenHandle() {\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var node = useRef(null);\n  useEffect(function () {\n    var handleChange = function handleChange() {\n      setActive(fscreen.fullscreenElement === node.current);\n    };\n\n    fscreen.addEventListener('fullscreenchange', handleChange);\n    return function () {\n      return fscreen.removeEventListener('fullscreenchange', handleChange);\n    };\n  }, []);\n  var enter = useCallback(function () {\n    if (fscreen.fullscreenElement) {\n      fscreen.exitFullscreen().then(function () {\n        fscreen.requestFullscreen(node.current);\n      });\n    } else if (node.current) {\n      fscreen.requestFullscreen(node.current);\n    }\n  }, []);\n  var exit = useCallback(function () {\n    if (fscreen.fullscreenElement === node.current) {\n      fscreen.exitFullscreen();\n    }\n  }, []);\n  return {\n    active: active,\n    enter: enter,\n    exit: exit,\n    node: node\n  };\n}\n\nvar FullScreen = function FullScreen(_ref) {\n  var handle = _ref.handle,\n      onChange = _ref.onChange,\n      children = _ref.children;\n  var classNames = ['fullscreen'];\n\n  if (handle.active) {\n    classNames.push('fullscreen-enabled');\n  }\n\n  useEffect(function () {\n    if (onChange) {\n      onChange(handle.active, handle);\n    }\n  }, [handle.active]);\n  return React.createElement(\"div\", {\n    className: classNames.join(' '),\n    ref: handle.node,\n    style: handle.active ? {\n      height: '100%',\n      width: '100%'\n    } : undefined\n  }, children);\n};\n\nexport { FullScreen, useFullScreenHandle };","map":{"version":3,"sources":["../src/index.tsx"],"names":["useFullScreenHandle","active","setActive","useState","node","useRef","useEffect","handleChange","fscreen","enter","useCallback","exit","FullScreen","handle","onChange","children","classNames","className","ref","style","height","width","undefined"],"mappings":";;;SAegBA,mB,GAAAA;kBACcG,QAAQ,CAAA,KAAA,C;MAA7BF,MAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;MAAQC,SAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;;AACf,MAAME,IAAI,GAAGC,MAAM,CAAnB,IAAmB,CAAnB;AAEAC,EAAAA,SAAS,CAAC,YAAA;AACR,QAAMC,YAAY,GAAG,SAAfA,YAAe,GAAA;AACnBL,MAAAA,SAAS,CAACM,OAAO,CAAPA,iBAAAA,KAA8BJ,IAAI,CAA5CF,OAAS,CAATA;AADF,KAAA;;AAGAM,IAAAA,OAAO,CAAPA,gBAAAA,CAAAA,kBAAAA,EAAAA,YAAAA;AACA,WAAO,YAAA;AAAA,aAAMA,OAAO,CAAPA,mBAAAA,CAAAA,kBAAAA,EAAN,YAAMA,CAAN;AAAP,KAAA;AALO,GAAA,EAATF,EAAS,CAATA;AAQA,MAAMG,KAAK,GAAGC,WAAW,CAAC,YAAA;AACxB,QAAIF,OAAO,CAAX,iBAAA,EAA+B;AAC7BA,MAAAA,OAAO,CAAPA,cAAAA,GAAAA,IAAAA,CAA8B,YAAA;AAC5BA,QAAAA,OAAO,CAAPA,iBAAAA,CAA0BJ,IAAI,CAA9BI,OAAAA;AADFA,OAAAA;AADF,KAAA,MAIO,IAAIJ,IAAI,CAAR,OAAA,EAAkB;AACvBI,MAAAA,OAAO,CAAPA,iBAAAA,CAA0BJ,IAAI,CAA9BI,OAAAA;AACD;AAPsB,GAAA,EAAzB,EAAyB,CAAzB;AAUA,MAAMG,IAAI,GAAGD,WAAW,CAAC,YAAA;AACvB,QAAIF,OAAO,CAAPA,iBAAAA,KAA8BJ,IAAI,CAAtC,OAAA,EAAgD;AAC9CI,MAAAA,OAAO,CAAPA,cAAAA;AACD;AAHqB,GAAA,EAAxB,EAAwB,CAAxB;AAMA,SAAO;AACLP,IAAAA,MAAM,EADD,MAAA;AAELQ,IAAAA,KAAK,EAFA,KAAA;AAGLE,IAAAA,IAAI,EAHC,IAAA;AAILP,IAAAA,IAAI,EAAJA;AAJK,GAAP;AAMD;;IAEYQ,UAAU,GAA8B,SAAxCA,UAAwC,CAAA,IAAA,EAAA;MACnDC,MAAAA,GAAAA,IAAAA,CAAAA,M;MACAC,QAAAA,GAAAA,IAAAA,CAAAA,Q;MACAC,QAAAA,GAAAA,IAAAA,CAAAA,Q;AAEA,MAAMC,UAAU,GAAG,CAAnB,YAAmB,CAAnB;;AACA,MAAIH,MAAM,CAAV,MAAA,EAAmB;AACjBG,IAAAA,UAAU,CAAVA,IAAAA,CAAAA,oBAAAA;AACD;;AAEDV,EAAAA,SAAS,CAAC,YAAA;AACR,QAAA,QAAA,EAAc;AACZQ,MAAAA,QAAQ,CAACD,MAAM,CAAP,MAAA,EAARC,MAAQ,CAARA;AACD;AAHM,GAAA,EAIN,CAACD,MAAM,CAJVP,MAIG,CAJM,CAATA;AAMA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACEW,IAAAA,SAAS,EAAED,UAAU,CAAVA,IAAAA,CAAAA,GAAAA,CADb;AAEEE,IAAAA,GAAG,EAAEL,MAAM,CAACT,IAFd;AAGEe,IAAAA,KAAK,EAAE,MAAM,CAAN,MAAA,GAAgB;AAAEC,MAAAA,MAAM,EAAR,MAAA;AAAkBC,MAAAA,KAAK,EAAE;AAAzB,KAAhB,GAAoDC;AAH7D,GAAA,EADF,QACE,CADF;AASD,C","sourcesContent":["import React, { useCallback, useState, useRef, useEffect } from 'react'\nimport fscreen from 'fscreen'\n\nexport interface FullScreenHandle {\n  active: boolean\n  enter: () => void\n  exit: () => void\n  node: React.MutableRefObject<HTMLDivElement | null>\n}\n\nexport interface FullScreenProps {\n  handle: FullScreenHandle\n  onChange?: (state: boolean, handle: FullScreenHandle) => void\n}\n\nexport function useFullScreenHandle(): FullScreenHandle {\n  const [active, setActive] = useState<boolean>(false)\n  const node = useRef<HTMLDivElement | null>(null)\n\n  useEffect(() => {\n    const handleChange = () => {\n      setActive(fscreen.fullscreenElement === node.current)\n    }\n    fscreen.addEventListener('fullscreenchange', handleChange)\n    return () => fscreen.removeEventListener('fullscreenchange', handleChange)\n  }, [])\n\n  const enter = useCallback(() => {\n    if (fscreen.fullscreenElement) {\n      fscreen.exitFullscreen().then(() => {\n        fscreen.requestFullscreen(node.current)\n      })\n    } else if (node.current) {\n      fscreen.requestFullscreen(node.current)\n    }\n  }, [])\n\n  const exit = useCallback(() => {\n    if (fscreen.fullscreenElement === node.current) {\n      fscreen.exitFullscreen()\n    }\n  }, [])\n\n  return {\n    active,\n    enter,\n    exit,\n    node\n  }\n}\n\nexport const FullScreen: React.FC<FullScreenProps> = ({\n  handle,\n  onChange,\n  children\n}) => {\n  const classNames = ['fullscreen']\n  if (handle.active) {\n    classNames.push('fullscreen-enabled')\n  }\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(handle.active, handle)\n    }\n  }, [handle.active])\n\n  return (\n    <div\n      className={classNames.join(' ')}\n      ref={handle.node}\n      style={handle.active ? { height: '100%', width: '100%' } : undefined}\n    >\n      {children}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}