{"ast":null,"code":"/**\n * Lowercased string representing a particular keyboard key\n * @typedef {string} NormalizedKeyName\n */\nimport reactsGetEventKey from '../../vendor/react-dom/reactsGetEventKey';\nimport Configuration from '../../lib/config/Configuration';\nimport hasKey from '../../utils/object/hasKey';\n/**\n * Returns key name from native or React keyboard event\n * @param {KeyboardEvent} event - Event containing the key name\n * @returns {NormalizedKeyName} Normalized name of the key\n */\n\nfunction getKeyName(event) {\n  var keyName = function () {\n    var customKeyCodes = Configuration.option('customKeyCodes');\n    var keyCode = event.keyCode || event.charCode;\n\n    if (hasKey(customKeyCodes, keyCode)) {\n      return customKeyCodes[keyCode];\n    }\n\n    if (event.nativeEvent) {\n      return event.key;\n    } else {\n      return reactsGetEventKey(event);\n    }\n  }();\n\n  if (keyName === '+') {\n    return 'plus';\n  } else {\n    return keyName;\n  }\n}\n\nexport default getKeyName;","map":{"version":3,"sources":["D:/GitHub/ML4GIS/client/node_modules/react-hotkeys/es/helpers/resolving-handlers/getKeyName.js"],"names":["reactsGetEventKey","Configuration","hasKey","getKeyName","event","keyName","customKeyCodes","option","keyCode","charCode","nativeEvent","key"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAOA,iBAAP,MAA8B,0CAA9B;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,MAAIC,OAAO,GAAG,YAAY;AACxB,QAAIC,cAAc,GAAGL,aAAa,CAACM,MAAd,CAAqB,gBAArB,CAArB;AACA,QAAIC,OAAO,GAAGJ,KAAK,CAACI,OAAN,IAAiBJ,KAAK,CAACK,QAArC;;AAEA,QAAIP,MAAM,CAACI,cAAD,EAAiBE,OAAjB,CAAV,EAAqC;AACnC,aAAOF,cAAc,CAACE,OAAD,CAArB;AACD;;AAED,QAAIJ,KAAK,CAACM,WAAV,EAAuB;AACrB,aAAON,KAAK,CAACO,GAAb;AACD,KAFD,MAEO;AACL,aAAOX,iBAAiB,CAACI,KAAD,CAAxB;AACD;AACF,GAba,EAAd;;AAeA,MAAIC,OAAO,KAAK,GAAhB,EAAqB;AACnB,WAAO,MAAP;AACD,GAFD,MAEO;AACL,WAAOA,OAAP;AACD;AACF;;AAED,eAAeF,UAAf","sourcesContent":["/**\n * Lowercased string representing a particular keyboard key\n * @typedef {string} NormalizedKeyName\n */\nimport reactsGetEventKey from '../../vendor/react-dom/reactsGetEventKey';\nimport Configuration from '../../lib/config/Configuration';\nimport hasKey from '../../utils/object/hasKey';\n/**\n * Returns key name from native or React keyboard event\n * @param {KeyboardEvent} event - Event containing the key name\n * @returns {NormalizedKeyName} Normalized name of the key\n */\n\nfunction getKeyName(event) {\n  var keyName = function () {\n    var customKeyCodes = Configuration.option('customKeyCodes');\n    var keyCode = event.keyCode || event.charCode;\n\n    if (hasKey(customKeyCodes, keyCode)) {\n      return customKeyCodes[keyCode];\n    }\n\n    if (event.nativeEvent) {\n      return event.key;\n    } else {\n      return reactsGetEventKey(event);\n    }\n  }();\n\n  if (keyName === '+') {\n    return 'plus';\n  } else {\n    return keyName;\n  }\n}\n\nexport default getKeyName;"]},"metadata":{},"sourceType":"module"}