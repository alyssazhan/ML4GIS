{"version":3,"file":"index.cjs.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/compact.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isPrimitive.ts","../src/utils/deepMerge.ts","../src/utils/deepEqual.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/isString.ts","../src/logic/getFieldsValues.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/isWeb.ts","../src/utils/cloneObject.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/fillBooleanArray.ts","../src/useFieldArray.ts","../src/useController.ts","../src/logic/getInputValue.ts","../src/controller.tsx","../src/logic/isErrorStateChanged.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/utils/onDomRemove.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n  shouldKeepRawValue?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return shouldKeepRawValue\n      ? value\n      : valueAsNumber\n      ? value === ''\n        ? NaN\n        : +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\nimport deepEqual from '../utils/deepEqual';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(\n      fieldsRef,\n      name,\n      shallowFieldsStateRef,\n      false,\n      true,\n    );\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(shallowFieldsStateRef.current, name, { ...value });\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const newDefaultValues = isEmptyObject(fieldsRef.current)\n        ? defaultValuesRef.current\n        : {};\n\n      const { errors } =\n        (await resolverRef.current!(\n          {\n            ...newDefaultValues,\n            ...getValues(),\n            ...values,\n          },\n          contextRef.current,\n          isValidateAllFieldCriteria,\n        )) || {};\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) => {\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      );\n\n      if (shouldUnregister) {\n        unset(validFieldsRef.current, field.ref.name);\n        unset(fieldsWithValidationRef.current, field.ref.name);\n      }\n    },\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        const parentNodeName = getNodeParentName(fieldNames) || fieldNames;\n\n        if (fieldArrayNamesRef.current.has(parentNodeName)) {\n          fieldValues = {\n            ...fieldArrayValuesRef.current,\n            ...fieldValues,\n          };\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name?: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[] | undefined,\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport compact from './compact';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(data, (Array.isArray(index) ? index : [index]).sort());\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","export default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(Array.isArray(value) ? value : [value || undefined]), ...data];\n}\n","export default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(Array.isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isObject from './isObject';\n\nexport default <T>(value: T) =>\n  ((Array.isArray(value) ? value : [value]) as T[]).map((data) => {\n    if (isObject(data)) {\n      const object: Record<string, boolean> = {};\n\n      for (const key in data) {\n        object[key] = true;\n      }\n\n      return object;\n    }\n\n    return true;\n  });\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport getFieldArrayParentName from './logic/getNodeParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport fillBooleanArray from './utils/fillBooleanArray';\nimport compact from './utils/compact';\nimport cloneObject from './utils/cloneObject';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n  UnpackNestedValue,\n  DeepPartial,\n  UseFieldArrayMethods,\n} from './types';\n\nconst mapIds = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id'\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n  skipWarn?: boolean,\n): Partial<ArrayField<TFieldArrayValues, TKeyName>>[] => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!skipWarn) {\n      for (const value of values) {\n        if (typeof value === 'object') {\n          if (keyName in value) {\n            console.warn(\n              `📋 useFieldArray fieldValues contain the keyName \\`${keyName}\\` which is reserved for use by useFieldArray. https://react-hook-form.com/api#useFieldArray`,\n            );\n\n            break;\n          }\n        } else {\n          console.warn(\n            `📋 useFieldArray input's name should be in object shape instead of flat array. https://react-hook-form.com/api#useFieldArray`,\n          );\n\n          break;\n        }\n      }\n    }\n  }\n\n  return values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: value[keyName] || generateId(),\n    ...value,\n  }));\n};\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>): UseFieldArrayMethods<\n  TFieldArrayValues,\n  TKeyName\n> => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const isUnMount = React.useRef(false);\n  const {\n    isFormDirty,\n    updateWatchedValue,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    formStateRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    validateResolver,\n    getValues,\n    shouldUnregister,\n    fieldArrayValuesRef,\n  } = control || methods.control;\n\n  const getDefaultValues = <T>(values: T) =>\n    get(shouldUnregister ? values : shallowFieldsStateRef.current, name, []);\n\n  const fieldArrayParentName = getFieldArrayParentName(name);\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>([\n    ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n      ? getDefaultValues(fieldArrayDefaultValuesRef.current)\n      : getDefaultValues(defaultValuesRef.current)),\n  ]);\n  const [fields, setFields] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  set(fieldArrayValuesRef.current, name, fields);\n\n  const omitKey = <T extends (Partial<TFieldArrayValues> | undefined)[]>(\n    fields: T,\n  ) => fields.map(({ [keyName]: omitted, ...rest } = {}) => rest);\n\n  fieldArrayNamesRef.current.add(name);\n\n  const getFieldArrayValue = React.useCallback(\n    () => get(fieldArrayValuesRef.current, name, []),\n    [name],\n  );\n\n  const getCurrentFieldsValues = () =>\n    mapIds<TFieldArrayValues, TKeyName>(\n      get(getValues(), name, getFieldArrayValue()).map(\n        (item: Partial<TFieldArrayValues>, index: number) => ({\n          ...getFieldArrayValue()[index],\n          ...item,\n        }),\n      ),\n      keyName,\n      true,\n    );\n\n  fieldArrayNamesRef.current.add(name);\n\n  if (\n    fieldArrayParentName &&\n    !get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n  ) {\n    set(\n      fieldArrayDefaultValuesRef.current,\n      fieldArrayParentName,\n      cloneObject(get(defaultValuesRef.current, fieldArrayParentName)),\n    );\n  }\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setFields(fieldsValues);\n    set(fieldArrayValuesRef.current, name, fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = getValues();\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const resetFields = () => {\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name)) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n        delete fieldsRef.current[key];\n      }\n    }\n  };\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const updateDirtyFieldsWithDefaultValues = <\n    T extends (Partial<TFieldArrayValues> | undefined)[]\n  >(\n    updatedFieldArrayValues?: T,\n  ) => {\n    if (updatedFieldArrayValues) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n    }\n  };\n\n  const batchStateUpdate = <\n    T extends Function,\n    K extends (Partial<TFieldArrayValues> | undefined)[]\n  >(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n      argC?: unknown;\n      argD?: unknown;\n    },\n    updatedFieldValues?: K,\n    updatedFormValues: (Partial<TFieldArrayValues> | undefined)[] = [],\n    shouldSet = true,\n    shouldUpdateValid = false,\n  ) => {\n    if (get(shallowFieldsStateRef.current, name)) {\n      const output = method(\n        get(shallowFieldsStateRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(shallowFieldsStateRef.current, name, output);\n    }\n\n    if (get(fieldArrayDefaultValuesRef.current, name)) {\n      const output = method(\n        get(fieldArrayDefaultValuesRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(formStateRef.current.touched, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touched, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touched, name, output);\n      cleanup(formStateRef.current.touched);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFormValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n      updateDirtyFieldsWithDefaultValues(updatedFieldValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (\n      shouldUpdateValid &&\n      readFormStateRef.current.isValid &&\n      !validateResolver\n    ) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    if (!isUnMount.current && readFormStateRef.current.isDirty) {\n      updateFormState({\n        isDirty: isFormDirty(name, omitKey(updatedFormValues)),\n      });\n    }\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const appendValue = Array.isArray(value) ? value : [value];\n    const updateFormValues = [\n      ...getCurrentFieldsValues(),\n      ...mapIds(appendValue, keyName),\n    ];\n    setFieldAndValidState(updateFormValues);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      updateDirtyFieldsWithDefaultValues(updateFormValues);\n\n      updateFormState({\n        isDirty: true,\n        dirtyFields: formStateRef.current.dirtyFields,\n      });\n    }\n\n    !shouldUnregister &&\n      set(shallowFieldsStateRef.current, name, [\n        ...(get(shallowFieldsStateRef.current, name) || []),\n        ...cloneObject(appendValue),\n      ]);\n\n    focusIndexRef.current = shouldFocus\n      ? get(fieldArrayValuesRef.current, name).length - 1\n      : -1;\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: emptyArray,\n        argC: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n    );\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldValues: (\n      | Partial<TFieldArrayValues>\n      | undefined\n    )[] = removeArrayAt(fieldValues, index);\n    setFieldAndValidState(\n      updatedFieldValues as Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n    );\n    resetFields();\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n        argC: index,\n      },\n      updatedFieldValues,\n      removeArrayAt(fieldValues, index),\n      true,\n      true,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldArrayValues = insertAt(\n      fieldValues,\n      index,\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: emptyArray,\n        argC: index,\n        argD: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n      insertAt(fieldValues, index),\n    );\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n        argC: indexA,\n        argD: indexB,\n      },\n      undefined,\n      fieldValues,\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n        argC: from,\n        argD: to,\n      },\n      undefined,\n      fieldValues,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        console.warn(\n          '📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      set(fieldArrayDefaultValuesRef.current, name, defaultValues.slice(1));\n    }\n\n    updateWatchedValue(name);\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n\n    if (!getFieldArrayParentName(name)) {\n      resetFunctions[name] = <TFieldValues>(\n        data?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n      ) => {\n        resetFields();\n        !data && unset(fieldArrayDefaultValuesRef.current, name);\n        unset(shallowFieldsStateRef.current, name);\n        memoizedDefaultValues.current = get(\n          data || defaultValuesRef.current,\n          name,\n        );\n        if (!isUnMount.current) {\n          setFields(mapIds(memoizedDefaultValues.current, keyName));\n        }\n      };\n    }\n\n    return () => {\n      isUnMount.current = true;\n      shouldUnregister && remove();\n      resetFields();\n      delete resetFunctions[name];\n      unset(fieldArrayValuesRef.current, name);\n      fieldArrayNames.delete(name);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import { useFormContext } from './useFormContext';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport * as React from 'react';\nimport isFunction from './utils/isFunction';\nimport skipValidation from './logic/skipValidation';\nimport getInputValue from './logic/getInputValue';\nimport set from './utils/set';\nimport {\n  FieldValues,\n  UseControllerOptions,\n  UseControllerMethods,\n} from './types';\n\nexport function useController<TFieldValues extends FieldValues = FieldValues>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  onFocus,\n}: UseControllerOptions<TFieldValues>): UseControllerMethods<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formState,\n    formStateRef: {\n      current: { isSubmitted, touched, errors },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const ref = React.useRef({\n    focus: () => null,\n  });\n  const onFocusRef = React.useRef(\n    onFocus ||\n      (() => {\n        if (isFunction(ref.current.focus)) {\n          ref.current.focus();\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!isFunction(ref.current.focus)) {\n            console.warn(\n              `📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`,\n            );\n          }\n        }\n      }),\n  );\n\n  const shouldValidate = React.useCallback(\n    (isBlurEvent?: boolean) =>\n      !skipValidation({\n        isBlurEvent,\n        isReValidateOnBlur,\n        isReValidateOnChange,\n        isSubmitted,\n        isTouched: !!get(touched, name),\n        ...mode,\n      }),\n    [\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      touched,\n      name,\n      mode,\n    ],\n  );\n\n  const commonTask = React.useCallback(([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n\n  const registerField = React.useCallback(\n    (shouldUpdateValue?: boolean) => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!name) {\n          return console.warn(\n            '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n          );\n        }\n      }\n\n      if (fieldsRef.current[name]) {\n        fieldsRef.current[name] = {\n          ref: fieldsRef.current[name]!.ref,\n          ...rules,\n        };\n      } else {\n        register(\n          Object.defineProperties(\n            {\n              name,\n              focus: onFocusRef.current,\n            },\n            {\n              value: {\n                set(data) {\n                  setInputStateValue(data);\n                  valueRef.current = data;\n                },\n                get() {\n                  return valueRef.current;\n                },\n              },\n            },\n          ),\n          rules,\n        );\n\n        shouldUpdateValue = isUndefined(get(defaultValuesRef.current, name));\n      }\n\n      shouldUpdateValue &&\n        isNotFieldArray &&\n        setInputStateValue(getInitialValue());\n    },\n    [rules, name, register],\n  );\n\n  React.useEffect(() => () => unregister(name), [name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    !fieldsRef.current[name] && registerField(true);\n  });\n\n  const onBlur = React.useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    shouldValidate(true) && trigger(name);\n  }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\n\n  const onChange = React.useCallback(\n    (...event: any[]) =>\n      setValue(name, commonTask(event), {\n        shouldValidate: shouldValidate(),\n        shouldDirty: true,\n      }),\n    [setValue, name, shouldValidate],\n  );\n\n  return {\n    field: {\n      onChange,\n      onBlur,\n      name,\n      value,\n      ref,\n    },\n    meta: Object.defineProperties(\n      {\n        invalid: !!get(errors, name),\n      },\n      {\n        isDirty: {\n          get() {\n            return !!get(formState.dirtyFields, name);\n          },\n        },\n        isTouched: {\n          get() {\n            return !!get(formState.touched, name);\n          },\n        },\n      },\n    ),\n  };\n}\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport { useController } from './useController';\nimport { ControllerProps, FieldValues } from './types';\n\ntype NativeInputs = 'input' | 'select' | 'textarea';\n\nconst Controller = <\n  TAs extends React.ReactElement | React.ComponentType<any> | NativeInputs,\n  TFieldValues extends FieldValues = FieldValues\n>(\n  props: ControllerProps<TAs, TFieldValues>,\n) => {\n  const { rules, as, render, defaultValue, control, onFocus, ...rest } = props;\n  const { field, meta } = useController(props);\n\n  const componentProps = {\n    ...rest,\n    ...field,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, componentProps)\n      : React.createElement(as as NativeInputs, componentProps as any)\n    : render\n    ? render(field, meta)\n    : null;\n};\n\nexport { Controller };\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport {\n  DeepPartial,\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch',\n      );\n    }\n  }\n\n  const {\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const updateValue = React.useState<unknown>()[1];\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (name === '') {\n        console.warn(\n          '📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch',\n        );\n      }\n    }\n\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\n    const watchFieldsHook = useWatchFieldsRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = () => updateValue({});\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    useWatchRenderFunctionsRef,\n    useWatchFieldsRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return idRef.current\n    ? watchInternal(name, defaultValueRef.current, idRef.current)\n    : isUndefined(defaultValue)\n    ? isString(name)\n      ? get(defaultValuesRef.current, name)\n      : Array.isArray(name)\n      ? name.reduce(\n          (previous, inputName) => ({\n            ...previous,\n            [inputName]: get(defaultValuesRef.current, inputName),\n          }),\n          {},\n        )\n      : defaultValuesRef.current\n    : defaultValue;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","isObjectType","isNullOrUndefined","Array","isArray","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","shouldKeepRawValue","field","current","disabled","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","NaN","get","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","Object","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","deepMerge","target","source","isPrimitive","targetValue","sourceValue","deepEqual","object1","object2","isErrorObject","React.isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","dirtyFields","parentName","[object Object]","shallowFieldsState","shouldUnregister","search","output","isString","startsWith","find","transformToNestObject","RegExp","validationData","isRegex","message","getValidateError","isMessage","validateAllFieldCriteria","errors","types","async","required","maxLength","minLength","min","max","pattern","validate","error","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","entries","getPath","rootPath","paths","property","rootName","push","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","window","document","cloneObject","copy","isWeb","File","getTime","Set","Map","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","toString","indexes","i","temp","splice","removeAtIndexes","sort","from","to","indexA","indexB","prepend","insert","fill","mapIds","keyName","skipWarn","generateId","useController","rules","control","onFocus","methods","defaultValuesRef","setValue","register","unregister","trigger","reValidateMode","formState","formStateRef","touched","updateFormState","readFormStateRef","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","setInputStateValue","React.useState","valueRef","React.useRef","focus","onFocusRef","shouldValidate","React.useCallback","skipValidation","commonTask","event","getInputValue","registerField","shouldUpdateValue","defineProperties","React.useEffect","onBlur","onChange","shouldDirty","meta","invalid","isDirty","props","as","render","rest","componentProps","React.cloneElement","React.createElement","_a","children","Provider","focusIndexRef","isUnMount","isFormDirty","updateWatchedValue","resetFieldArrayFunctionRef","removeFieldEventListener","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValuesRef","validateResolver","getValues","fieldArrayValuesRef","getDefaultValues","fieldArrayParentName","getFieldArrayParentName","memoizedDefaultValues","fields","setFields","omitKey","_b","getFieldArrayValue","getCurrentFieldsValues","setFieldAndValidState","fieldsValues","resetFields","cleanup","updateDirtyFieldsWithDefaultValues","updatedFieldArrayValues","setFieldArrayDirtyFields","batchStateUpdate","method","args","updatedFieldValues","updatedFormValues","shouldSet","shouldUpdateValid","argA","argB","remove","removeArrayAt","argC","resetFunctions","fieldArrayNames","delete","swap","swapArrayAt","argD","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","fillBooleanArray","append","appendValue","updateFormValues","insertAt","resolver","context","shouldFocusError","criteriaMode","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","isWatchAllRef","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","setFormState","isValidating","submitCount","isSubmitting","isSubmitSuccessful","observerRef","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","previousError","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","formValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","Promise","all","setInternalValues","setInternalValue","config","has","getNodeParentName","isFieldWatched","match","renderWatchedInputs","found","size","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","parentNodeName","currentError","newDefaultValues","forceDelete","handleChange","fieldRef","removeAllEventListeners","findRemovedFieldAndRemoveListener","watchField","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","assignWatchFields","combinedDefaultValues","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","fieldError","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","refOrRegisterOptions","prop","React.useMemo","watch","reset","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","updateValue","idRef","defaultValueRef","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}